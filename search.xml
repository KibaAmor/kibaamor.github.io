<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>理解蒙特卡洛方法和时序差分学习</title>
      <link href="li-jie-meng-te-qia-luo-fang-fa-he-shi-xu-chai-fen-xue-xi/"/>
      <url>li-jie-meng-te-qia-luo-fang-fa-he-shi-xu-chai-fen-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>学习机器学习时常常会用到蒙特卡洛方法和时序差分学习，所以对它们有一个直观的理解还是很重要的。本文通过举一个实际的例子来帮助理解。</p><p>假如要训练一个预估开车从成都到北京需要耗时多久的模型（Model），那么如何训练呢？</p><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">cd<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 成都bj<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 北京cd<span class="token operator">-</span><span class="token operator">&gt;</span>bj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="1-蒙特卡洛方法（Monte-Carlo-method）"><a href="#1-蒙特卡洛方法（Monte-Carlo-method）" class="headerlink" title="1. 蒙特卡洛方法（Monte Carlo method）"></a>1. 蒙特卡洛方法（Monte Carlo method）</h2><p>最直观的方法，既然要预估开车从成都到北京需要耗时多久，那么可以直接记录开车从成都到北京所需要的时间。然后重复很多次，比如100次，把每次的耗时都给模型学习（至于模型具体怎么学习，又需要另外的算法了，比如：<a href="https://en.wikipedia.org/wiki/Gradient_descent">梯度下降</a>），这样模型就能预估出一个比较准确的时间了。</p><p>上面这种方法其实就是<a href="https://en.wikipedia.org/wiki/Monte_Carlo_method">蒙特卡洛方法</a>。这种算法的特点如下：</p><p>优点：</p><ul><li><strong>简单直接</strong>：要预估开车从成都到北京需要耗时多久，那直接做很多次，并记录经验，然后就能比较准确的训练了。</li></ul><p>缺点：</p><ul><li><strong>收集数据麻烦</strong>：直接尝试还是很麻烦的，代价太高。如果要训练一个预测手术成功率的模型，总不能拿人去试吧。</li><li><strong>需要等到完整的一次过程后才能开始训练</strong>：开车到一半时是不能训练模型的，必须要到了目的地才能训练。如果路上车出了故障，那么之前开的路都白费了，代价也太高了。</li></ul><p>第一个缺点不好解决，但是第二个缺点还是有办法改善的，那就是使用<a href="#2-时序差分学习temporal-difference-learning">时序差分学习</a>。</p><h2 id="2-时序差分学习（Temporal-Difference-Learning）"><a href="#2-时序差分学习（Temporal-Difference-Learning）" class="headerlink" title="2. 时序差分学习（Temporal Difference Learning）"></a>2. 时序差分学习（Temporal Difference Learning）</h2><p>时序差分学习的概念不是那么容易解释，但是可以通过更实际的例子来理解：</p><ol><li><p>开始时模型预估开车从成都到北京需要花100个小时。</p> <pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">cd<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 成都bj<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 北京（模型预估需<span class="token number">100</span>小时）cd<span class="token operator">-</span><span class="token operator">&gt;</span>bj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实际开车从成都出发，实际花费了30个小时到西安，此时模型预估到北京还是60个小时。</p> <pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">cd<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 成都xa<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 西安（实际开车花费<span class="token number">30</span>小时）bj<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 北京（模型预估还需<span class="token number">60</span>小时）cd<span class="token operator">-</span><span class="token operator">&gt;</span>xa<span class="token operator">-</span><span class="token operator">&gt;</span>bj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>所以模型在开始时更准确的预估应该是：</p><p>30个小时（成都到西安的<strong>实际时间</strong>）+ 60个小时（新的<strong>预估时间</strong>）= 90个小时</p><p>在时序差分学习中，这个更准确的估计就叫做 <strong>TD target</strong> 。有了这个更准确预估后，就知道开始时的预估时间是多了还是少了，从而就能更新模型的参数让模型的预估越来越准确。这样就能够做到不做完整件事就开始训练模型了。</p><p>而最初的预估时间和 <strong>TD target</strong> 的差值就是 <strong>TD error</strong>：</p><p><strong>TD error</strong> = 100(开始时的预估耗时） - 90（<strong>TD error</strong>）</p><p>时序差分学习的目标就是让 <strong>TD error</strong> 的值接近0。</p><hr><blockquote><p>参考：<a href="https://www.youtube.com/watch?v=jflq6vNcZyA&amp;t=1344s&amp;ab_channel=ShusenWang">价值学习 Value-Based Reinforcement Learningg</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 蒙特卡洛方法 </tag>
            
            <tag> 时序差分学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解强化学习中的基本概念</title>
      <link href="li-jie-qiang-hua-xue-xi-zhong-de-ji-ben-gai-nian/"/>
      <url>li-jie-qiang-hua-xue-xi-zhong-de-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<h2 id="一、随机变量"><a href="#一、随机变量" class="headerlink" title="一、随机变量"></a>一、随机变量</h2><p>变量的值无法预先确定仅以一定的可能性（概率）取值的量。</p><p>强化学习中一般用大写的字母表示随机变量，用小写的字母表示随机变量的值。</p><blockquote><p>比如：掷骰子中，用大写的变量 $X$ 表示可能掷出来骰子的值。假如掷一次骰子，得到它的值是2点，可以用小写的变量$x$来表示，即 $x = 2$ 。</p></blockquote><p>随机变量分两种基本的类型：离散型随机变量和连续型随机变量。</p><blockquote><p>强化学习中训练不同类型的变量一般需要使用不同类型的算法，只有少部分算法同时支持两种类型的变量训练。<br>训练离散型随机变量使用的损失函数一般是交叉熵（Cross Entropy），而训练连续型随机变量使用的损失函数一般是均方误差（MSE, Mean Squared Error）。</p></blockquote><h2 id="二、概率密度函数（Probability-Density-Function，PDF）"><a href="#二、概率密度函数（Probability-Density-Function，PDF）" class="headerlink" title="二、概率密度函数（Probability Density Function，PDF）"></a>二、概率密度函数（Probability Density Function，PDF）</h2><p>描述随机变量的输出值，在某个确定的取值点附近的可能性的函数。</p><blockquote><p>比如：掷骰子的概率密度函数 $p(X) = \frac{1}{6}$ 。</p></blockquote><p>强化学习中的策略$\pi$就是一个概率密度函数。因为它输出的其实是各个动作的概率。</p><h2 id="三、期望"><a href="#三、期望" class="headerlink" title="三、期望"></a>三、期望</h2><p>随机变量值产生的概率乘以随机变量值的总和。</p><p>期望反应了随机变量平均取值的大小。</p><blockquote><p>所以强化学习中才用期望来描述价值函数（Value Function)。</p></blockquote><p>对于离散型随机变量 $X$ 及其可能值的集合 $\mathcal{X}$ ，其期望公式为：</p><script type="math/tex; mode=display">\mathbb{E}[f(X)] = \sum_{x \in \mathcal{X}} p(x) \cdot f(x)</script><p>对于连续型随机变量 $X$ 及其可能值的域 $\mathcal{X}$ ，其期望公式为：</p><script type="math/tex; mode=display">\mathbb{E}[f(X)] = \int_{x \in \mathcal{X}} p(x) \cdot f(x)</script><h2 id="四、强化学习模型"><a href="#四、强化学习模型" class="headerlink" title="四、强化学习模型"></a>四、强化学习模型</h2><p><img src="/images/理解强化学习中的基本概念/强化学习模型.jpg" alt="强化学习模型"></p><p>模型的构成：</p><ol><li>智能体（Agent）：智能体的（本质就是）策略 $\pi$ 根据获取到的状态（state）确定下一步采取的动作（action）。</li><li>动作（Actios）：与环境交互时可以采取的动作的集合。</li><li>环境（Environment）：智能体学习的环境。</li><li>状态（State）：智能体对环境的观测。</li><li>奖励（Reward）：智能体在环境中执行动作后获得的奖励或惩罚。</li></ol><blockquote><p>关于智能体对环境的观测的表述。用state时表示智能体能观察到环境的所有内部状态，用observation时表示智能体不能观察到环境的所有内部状态。比如玩围棋时用state，玩扑克牌时用observation（因为你看不到别人手中的牌）。</p></blockquote><p>交互的流程：</p><ol><li>智能体从环境观测到状态 $S_t$ 。</li><li>智能体根据获取到的状态 $S_t$ 决定下一步采取动作 $A_t$ 。</li><li>环境执行动作 $A_t$ 后转移到新的状态 $S_{t+1}$ ，并给出智能体执行动作获得的奖励 $R_t$ 。</li><li>回到第1步。</li></ol><blockquote><p>第3步中获得的奖励 $R_t$ ，一些资料中也记为 $R_{t+1}$。比如：<a href="https://www.youtube.com/watch?v=lfHX2hHRMVQ&amp;list=PLqYmG7hTraZDM-OYHWgPebj2MfCFzFObQ&amp;index=2&amp;ab_channel=DeepMind">RL Course by David Silver - Lecture 2: Markov Decision Process</a> 。</p></blockquote><h2 id="五、回报和奖励"><a href="#五、回报和奖励" class="headerlink" title="五、回报和奖励"></a>五、回报和奖励</h2><p>强化学习的目的是让智能体与环境交互时获得的奖励尽可能的多。</p><p>智能体从 $t$ 时刻开始到游戏结束获得的所有奖励 <strong>回报</strong>为：</p><script type="math/tex; mode=display">G_t = R_t + R_{t+1} + R_{t+2} + R_{t+3} + \cdots</script><p>考虑到未来的奖励不如现在的奖励有价值，我们给未来的奖励加一个折扣系数 $\gamma$，且 $\gamma \in [0, 1] $。</p><p>所以智能体从 $t$ 时刻开始到游戏结束获得的所有奖励 <strong>折扣回报</strong>为：</p><script type="math/tex; mode=display">G_t = R_t + \gamma \cdot R_{t+1} + \gamma^2 \cdot R_{t+2} + \gamma^3 \cdot R_{t+3} + \cdots</script><p>根据<a href="https://kibazen.cn/ma-er-ke-fu-he-bei-er-man-gong-shi-yi-ji-sheng-cheng-mo-shi/">马尔科夫回报过程</a>我们可以知道，折扣回报也是一个随机变量，原因如下：</p><ol><li>智能体在某个特定的状态采取的动作是一个随机变量：$\mathbb{P}[A=a | S=s] = \pi(a|s)$ 。</li><li>环境状态的转移也是随机的： $\mathbb{P}[S\prime = s\prime | S = s, A=a] = p(s\prime | s, a)$ 。</li></ol><h2 id="六、动作价值函数（Action-Value-Function）"><a href="#六、动作价值函数（Action-Value-Function）" class="headerlink" title="六、动作价值函数（Action-Value Function）"></a>六、动作价值函数（Action-Value Function）</h2><p>对策略 $\pi$ 其动作价值函数的定义为：</p><script type="math/tex; mode=display">Q_{\pi}(s_t,a_t) = \mathbb{E}[G_t | S_t=s_t, A_t=a_t]</script><p>动作价值函数的意义在于可以评估策略 $\pi$ 在特定状态 $s_t$ 时采取动作 $a_t$ 的期望回报。</p><blockquote><p>就相当于你在打牌时有一个先知可以告诉你这次（仅一次）出每种牌后你赢钱的期望。</p></blockquote><h2 id="七、最优动作价值函数（Optimal-Action-Value-Function）"><a href="#七、最优动作价值函数（Optimal-Action-Value-Function）" class="headerlink" title="七、最优动作价值函数（Optimal Action-Value Function）"></a>七、最优动作价值函数（Optimal Action-Value Function）</h2><p>对策略 $\pi$ 其最优动作价值函数的定义为：</p><script type="math/tex; mode=display">Q_{\pi^*}(s_t,a_t) = Q_*(s_t,a_t) = \max_{\pi} Q_{\pi}(s_t,a_t)</script><p>最优动作价值函数的意义在于可以评估在特定状态 $s_t$ 时采取动作 $a_t$ 后最大能获得的期望回报。</p><blockquote><p>就相当于在打牌时有一把牌让世界上牌技最好的人来玩时出每种牌后赢钱的期望。</p></blockquote><h2 id="八、状态价值函数（State-Value-Function）"><a href="#八、状态价值函数（State-Value-Function）" class="headerlink" title="八、状态价值函数（State-Value Function）"></a>八、状态价值函数（State-Value Function）</h2><p>对策略 $\pi$ 其状态价值函数的定义为：</p><script type="math/tex; mode=display">V_{\pi}(s_t) = \mathbb{E}_{A \sim \pi(\cdot | s_t)} [Q_{\pi}(s_t,A)]</script><p>如果动作是离散型随机变量，则：</p><script type="math/tex; mode=display">V_{\pi}(s_t) = \mathbb{E}_A[Q_{\pi}(s_t, A)] = \sum_a \pi(a | s_t) \cdot Q_{\pi}(s_t, a)</script><p>如果动作是连续型随机变量，则：</p><script type="math/tex; mode=display">V_{\pi}(s_t) = \mathbb{E}_A[Q_{\pi}(s_t, A)] = \int \pi(a | s_t) \cdot Q_{\pi}(s_t, a) \mathrm{d}x</script><p>状态价值函数的意义在于可以评估策略 $\pi$ 处在特定状态 $s_t$ 时的期望回报。</p><blockquote><p>就相当于你在打牌时，你拿了一把牌，有一个先知可以告诉你你玩这把牌赢钱的期望。</p></blockquote><h2 id="九、最优状态价值函数（Optimal-State-Value-Function）"><a href="#九、最优状态价值函数（Optimal-State-Value-Function）" class="headerlink" title="九、最优状态价值函数（Optimal State-Value Function）"></a>九、最优状态价值函数（Optimal State-Value Function）</h2><p>对策略 $\pi$ 其最优状态价值函数的定义为：</p><script type="math/tex; mode=display">V_{\pi^*}(s_t) = V_*(s_t) = \max_{\pi} V_{\pi}(s_t)</script><p>最优状态价值函数的意义在于可以评估在特定状态 $s_t$ 时最大能获得的期望回报。</p><blockquote><p>就相当于在打牌时有一把牌让世界上牌技最好的人来玩时赢钱的期望。</p></blockquote><h2 id="十、如何让智能体玩好游戏"><a href="#十、如何让智能体玩好游戏" class="headerlink" title="十、如何让智能体玩好游戏"></a>十、如何让智能体玩好游戏</h2><h3 id="1-假如已有一个好的策略时"><a href="#1-假如已有一个好的策略时" class="headerlink" title="1. 假如已有一个好的策略时"></a>1. 假如已有一个好的策略时</h3><ol><li>输入观测到的状态 $s_t$ 给策略 $\pi(a|s)$ ，它会返回不同动作的概率。</li><li>根据策略 $\pi(a|s)$ 返回的这些概率采样得到一个动作 $a_t$。</li><li>让环境执行动作 $a_t$ ，得到新的状态 $s_{t+1}$和奖励 $r_t$。</li><li>回到第1步。</li></ol><blockquote><p>好的策略相当于一个牌技好的人，牌技好的人赢钱的期望总是高。</p></blockquote><p>所以我们直接训练出一个好的策略就可以了。</p><p>这种直接训练策略的方式就是强化学习中的<strong>基于策略的学习（Policy Based Learning）</strong>。</p><h3 id="2-假如已知最优动作价值函数"><a href="#2-假如已知最优动作价值函数" class="headerlink" title="2. 假如已知最优动作价值函数"></a>2. 假如已知最优动作价值函数</h3><ol><li>根据观测到的状态 $s_t$ 和最优动作价值函数 $Q_*(s_t,a_t)$ 计算出能够获得最大期望奖励的动作 $a_t$ 。</li><li>让环境执行动作 $a_t$ ，得到新的状态 $s_{t+1}$和奖励 $r_t$。</li><li>回到第1步。</li></ol><blockquote><p>最优动作价值函数$Q_*(s_t,a_t)$相当于一个先知，可以告诉我们出每种牌赢钱的期望，只要我们每次都出赢钱期望最大的牌，那么最后赢钱的期望就会最高。</p></blockquote><p>所以我们也可以训练出一个先知，即最优动作价值函数。</p><p>这种训练最优动作价值函数的方式就是强化学习中的<strong>基于价值的学习（Value Based Learning）</strong>。</p><hr><blockquote><p>参考：<a href="https://www.youtube.com/watch?v=vmkRMvhCW5c&amp;list=PLvOO0btloRnsiqM72G4Uid0UWljikENlU&amp;ab_channel=ShusenWang">基本概念 Deep Reinforcement Learning</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随机变量 </tag>
            
            <tag> 概率密度函数 </tag>
            
            <tag> 强化学习模型 </tag>
            
            <tag> 动作价值函数 </tag>
            
            <tag> 状态价值函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>马尔可夫和贝尔曼公式以及生成模式</title>
      <link href="ma-er-ke-fu-he-bei-er-man-gong-shi-yi-ji-sheng-cheng-mo-shi/"/>
      <url>ma-er-ke-fu-he-bei-er-man-gong-shi-yi-ji-sheng-cheng-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、马尔可夫"><a href="#一、马尔可夫" class="headerlink" title="一、马尔可夫"></a>一、马尔可夫</h2><p>环境的状态必须是全部能够获取的（fully observable），即环境的 <strong>observation</strong> 就是 <strong>state</strong>。</p><h3 id="1-马尔可夫性（Markov-Property）"><a href="#1-马尔可夫性（Markov-Property）" class="headerlink" title="1. 马尔可夫性（Markov Property）"></a>1. 马尔可夫性（Markov Property）</h3><p>环境的下一个状态只由当前的的状态决定，与过去无关。</p><script type="math/tex; mode=display">\mathbb{P}[S_{t+1}|S_t] = \mathbb{P}[S_{t+1} | S_1, \ldots, S_t]</script><p>比如下棋，只用关心当前的局面，不用管过去操作。</p><h3 id="2-状态转移矩阵（State-Transition-matrix）"><a href="#2-状态转移矩阵（State-Transition-matrix）" class="headerlink" title="2. 状态转移矩阵（State Transition matrix）"></a>2. 状态转移矩阵（State Transition matrix）</h3><p>环境从一个状态转化成另一个状态的概率组成的矩阵。</p><script type="math/tex; mode=display">P_{ss\prime} = \mathbb{P}[S_{t+1}=s\prime | S_t=s] \tag{2}</script><p><strong>公式2</strong> 表示马尔可夫状态 $s$ 转移到其后继状态 $s\prime$ 的概率为 $P_{ss\prime}$，而状态转移矩阵则表示对于所有状态转移到其所有后继状态的概率，如下：</p><script type="math/tex; mode=display">P =\left[\begin{matrix}P_{11} & \cdots & P_{1n} \\\vdots & \ddots & \vdots \\P_{n1} & \cdots & P_{nn} \\\end{matrix}\right]</script><blockquote><p>$P$ 中任意行的值的和为1。</p></blockquote><h3 id="3-马尔可夫过程（Markov-Process-MP）"><a href="#3-马尔可夫过程（Markov-Process-MP）" class="headerlink" title="3. 马尔可夫过程（Markov Process, MP）"></a>3. 马尔可夫过程（Markov Process, MP）</h3><p>若环境状态变化的过程满足马尔可夫性，则称为马尔可夫过程。马尔可夫过程（或者马尔可夫链）由一个二元组 $\lt S, P \gt$ 定义。其中：</p><ul><li>$S$ 表示环境所有可能状态的有限集合</li><li>$P$ 表示这些状态之间转移概率的矩阵 <script type="math/tex">P_{ss\prime} = \mathbb{P}[S_{t+1}=s\prime | S_t=s]</script></li></ul><h3 id="4-马尔可夫链（Markov-Chain）"><a href="#4-马尔可夫链（Markov-Chain）" class="headerlink" title="4. 马尔可夫链（Markov Chain）"></a>4. 马尔可夫链（Markov Chain）</h3><p>马尔可夫过程下产生的有限状态的集合。</p><h3 id="5-马尔科夫回报过程（Markov-Reward-Process-MRP）"><a href="#5-马尔科夫回报过程（Markov-Reward-Process-MRP）" class="headerlink" title="5. 马尔科夫回报过程（Markov Reward Process, MRP）"></a>5. 马尔科夫回报过程（Markov Reward Process, MRP）</h3><p>包含 <strong>价值（values）</strong> 的马尔可夫链就是马尔科夫回报过程，由一个四元组 $\lt S, P, R, \gamma \gt$ 定义。其中：</p><ul><li>$S$ 表示环境所有可能状态的有限集合</li><li>$P$ 表示这些状态之间转移概率的矩阵 <script type="math/tex">P_{ss\prime} = \mathbb{P}[S_{t+1}=s\prime | S_t=s]</script></li><li><strong>$R$ 表示回报计算函数 <script type="math/tex">R_s = \mathbb{E}[R_{t+1} | S_t=s]</script></strong></li><li><strong>$\gamma$ 衰减系数（Discount factor），$\gamma \in [0, 1]$</strong></li></ul><h4 id="5-1-回报（Return）"><a href="#5-1-回报（Return）" class="headerlink" title="5.1 回报（Return）"></a>5.1 回报（Return）</h4><p>从时刻 $t$ 开始所有的折扣回报之和</p><script type="math/tex; mode=display">G_t = R_{t+1} + \gamma R_{t+2} + \cdots = \sum_{k=0} ^{\infty} \gamma^k R_{t+k+1}</script><h4 id="5-2-衰减系数（Discount-factor）"><a href="#5-2-衰减系数（Discount-factor）" class="headerlink" title="5.2 衰减系数（Discount factor）"></a>5.2 衰减系数（Discount factor）</h4><p>存在的原因：</p><ul><li>数学表达更方便</li><li>避免陷入循环</li><li>长远的利益具有不确定性</li></ul><p>意义：</p><ul><li>值越接近0表示越看重当前的利益</li><li>值越接近1表示越看重长远的利益</li></ul><h3 id="5-3-状态价值函数（Value-Function）"><a href="#5-3-状态价值函数（Value-Function）" class="headerlink" title="5.3 状态价值函数（Value Function）"></a>5.3 状态价值函数（Value Function）</h3><p>状态价值函数用于计算从状态 $s$ 开始的期望回报</p><script type="math/tex; mode=display">v(s) = \mathbb{E}[G_t | S_t=s]</script><h3 id="5-4-贝尔曼方程（Bellman-Equation）"><a href="#5-4-贝尔曼方程（Bellman-Equation）" class="headerlink" title="5.4 贝尔曼方程（Bellman Equation）"></a>5.4 贝尔曼方程（Bellman Equation）</h3><script type="math/tex; mode=display">\begin{aligned}v(s)& = \mathbb{E}[G_t | S_t = s] \\& = \mathbb{E}[R_{t+1} + \gamma R_{t+2} + {\gamma}^2 R_{t+3} + \cdots | S_t = s] \\& = \mathbb{E}[R_{t+1} + \gamma(R_{t+2} + \gamma R_{t+3} + \cdots) | S_t = s] \\& = \mathbb{E}[R_{t+1} + \gamma G_{t+1} | S_t = s] \\& (注意 v(S_{t+1}) 是大写的 S_{t+1} 是因为 S_t = s 的下一个状态是随机的) \\& = \mathbb{E}[R_{t+1} + \gamma v(S_{t+1}) | S_t = s] \\& (分别对 R_{t+1} 和 v(S_{t+1}) 求期望，和的期望等于期望的和) \\& = \mathbb{E}[R_{t+1} | S_t = s] + \gamma \mathbb{E}[v(S_{t+1}) | S_t = s] \\& (如果已知状态转移矩阵 P ，则可以将上式展开) \\& = R_s + \gamma \sum_{s\prime \in S} P_{ss\prime} v(s\prime) \\\end{aligned}</script><p>即：</p><script type="math/tex; mode=display">v(s) = R_s + \gamma \sum_{s\prime \in S} P_{ss\prime} v(s\prime)</script><p>对应的矩阵形式的方程为：</p><script type="math/tex; mode=display">v = R + \gamma Pv</script><script type="math/tex; mode=display">\left[\begin{matrix}v(1) \\\vdots \\v(n) \\\end{matrix}\right] = \left[\begin{matrix}R_{1} \\\vdots \\R_{n} \\\end{matrix}\right] + \gamma \left[\begin{matrix}P_{11} & \cdots & P_{1n} \\\vdots & \ddots & \vdots \\P_{n1} & \cdots & P_{nn} \\\end{matrix}\right] \left[\begin{matrix}v(1) \\\vdots \\v(n) \\\end{matrix}\right]</script><blockquote><p>其中 $R_{t+1}$ 是立即回报， $\gamma v(S_{t+1})$ 是后续状态的折扣值函数</p></blockquote><h3 id="5-5-贝尔曼方程的求解方法"><a href="#5-5-贝尔曼方程的求解方法" class="headerlink" title="5.5 贝尔曼方程的求解方法"></a>5.5 贝尔曼方程的求解方法</h3><ol><li><p>直接求解</p><script type="math/tex; mode=display"> \begin{aligned} v &= R + \gamma Pv \\ (I - \gamma P)v &= R \\ v &= (I - \gamma P)^{-1} R \\ \end{aligned}</script><p> 问题：复杂度太高 $O(n^3)$，n为状态的数量</p></li><li><p>迭代求解</p><ul><li>动态规划（Dynamic programming）</li><li>蒙地卡罗评估（Monte-Carlo evaluation）</li><li>时序差分学习（Temporal-Difference learning）</li></ul></li></ol><h3 id="6-马尔科夫决策过程（Markov-Decision-Process-MDP）"><a href="#6-马尔科夫决策过程（Markov-Decision-Process-MDP）" class="headerlink" title="6. 马尔科夫决策过程（Markov Decision Process, MDP）"></a>6. 马尔科夫决策过程（Markov Decision Process, MDP）</h3><p>包含 <strong>决策（decisions）</strong> 的马尔科夫回报过程就是马尔科夫决策过程，由一个五元组 $\lt S, A, P, R, \gamma \gt$ 定义。其中：</p><ul><li>$S$ 表示环境所有可能状态的有限集合</li><li><strong>$A$ 表示有限的动作集合</strong></li><li><strong>$P$ 表示这些状态之间转移概率的矩阵 <script type="math/tex">P_{ss\prime}^a = \mathbb{P}[S_{t+1}=s\prime | S_t=s, A_t=a]</script></strong></li><li><strong>$R$ 表示回报计算函数 <script type="math/tex">R_s^a = \mathbb{E}[R_{t+1} | S_t=s, A_t=a]</script></strong></li><li>$\gamma$ 衰减系数（Discount factor），$\gamma \in [0, 1]$</li></ul><h4 id="6-1-策略（Policy）"><a href="#6-1-策略（Policy）" class="headerlink" title="6.1 策略（Policy）"></a>6.1 策略（Policy）</h4><p>策略 $\pi$ 是状态 $s$ 时可能执行的动作 $a$ 的概率分布</p><script type="math/tex; mode=display">\pi (a|s) = \mathbb{P}[A_t=a | S_t=s]</script><p>当给定马尔科夫决策过程 $\lt S,A,P,R,\gamma \gt$ 和策略 $\pi$ 时：</p><ul><li>状态序列 $S_1, S_2, \ldots$ 就是一个马尔可夫过程 $\lt S,P^{\pi} \gt$</li><li>状态回报序列 $S_1, R_2, S_2, \ldots$ 就是一个马尔科夫回报过程 $\lt S, P^{\pi}, R^{\pi}, \gamma \gt$</li></ul><p>其中：</p><script type="math/tex; mode=display">P_{s,s\prime}^{\pi} = \sum_{a \in A}\pi(a|s) P_{s,s\prime}^a</script><script type="math/tex; mode=display">R_s^{\pi} = \sum_{a \in A}\pi(a|s) R_s^a</script><h4 id="6-2-基于策略的状态价值函数"><a href="#6-2-基于策略的状态价值函数" class="headerlink" title="6.2 基于策略的状态价值函数"></a>6.2 基于策略的状态价值函数</h4><p>马尔科夫决策过程中，基于策略 $\pi$ 的 <strong>状态</strong> 价值函数用于计算从状态 $s$ 开始，遵循策略 $\pi$ 时的期望回报</p><script type="math/tex; mode=display">v_{\pi}(s) = \mathbb{E}[G_t | S_t=s]</script><h4 id="6-3-基于策略的动作价值函数"><a href="#6-3-基于策略的动作价值函数" class="headerlink" title="6.3 基于策略的动作价值函数"></a>6.3 基于策略的动作价值函数</h4><p>马尔科夫决策过程中，基于策略 $\pi$ 的 <strong>动作</strong> 价值函数用于计算从状态 $s$ 开始，先采取动作 $a$，再遵循策略 $\pi$ 时的期望回报</p><script type="math/tex; mode=display">q_{\pi}(s,a) = \mathbb{E}_{\pi}[G_t | S_t=s, A_t=a]</script><h4 id="6-4-贝尔曼期望方程（Bellman-Expectation-Equation）"><a href="#6-4-贝尔曼期望方程（Bellman-Expectation-Equation）" class="headerlink" title="6.4 贝尔曼期望方程（Bellman Expectation Equation）"></a>6.4 贝尔曼期望方程（Bellman Expectation Equation）</h4><ol><li><p>基于策略的 <strong>状态</strong> 价值函数的贝尔曼方程可以分解为 <strong>立即回报</strong> 与 <strong>后续状态的折扣回报</strong> 的和</p><script type="math/tex; mode=display">v_{\pi}(s) = \mathbb{E}[R_{t+1} + \gamma v_{\pi}(S_{t+1}) | S_t=s]</script><p> 对应的矩阵形式的方程为：</p><script type="math/tex; mode=display">v_{\pi} = R^{\pi} + \gamma P^{\pi} v_{\pi}</script><script type="math/tex; mode=display">v_{\pi} = (I - \gamma P^{\pi})^{-1} R^{\pi}</script><p> 同时，状态 $s$ 的价值也可以通过计算在遵循策略 $\pi$ 时采取所有可能 <strong>动作的价值</strong> 与对应 <strong>动作发生的概率</strong> 乘积的和来获得，即：</p><script type="math/tex; mode=display">v_{\pi}(s) = \sum_{a \in A}\pi(a|s) q_{\pi}(s,a) \tag{6.4.1}</script></li><li><p>基于策略的 <strong>动作</strong> 价值函数的贝尔曼方程也是类似的</p><script type="math/tex; mode=display">q_{\pi}(s,a) = \mathbb{E}[R_{t+1} + \gamma q_{\pi}(S_{t+1},A_{t+1}) | S_t=s, A_t=a]</script><p> 类似的，状态 $s$ 下执行动作 $a$ 的价值也可以分解为 <strong>离开状态 $s$ 的立即回报</strong> 与 <strong>所有可能会进入状态的价值与对应进入概率</strong> 的乘积的和，即：</p><script type="math/tex; mode=display">q_{\pi}(s,a) = R_s^a + \gamma \sum_{s\prime \in S} P_{ss\prime}^a v_{\pi}(s\prime) \tag{6.4.2}</script></li><li><p>组合上面的 <strong>方程6.4.1</strong> 和 <strong>方程6.4.2</strong> ，可以得到</p><script type="math/tex; mode=display">v_{\pi}(s) = \sum_{a \in A}\pi(a|s) \left( R_s^a + \gamma \sum_{s\prime \in S} P_{ss\prime}^a v_{\pi}(s\prime) \right)</script><script type="math/tex; mode=display">q_{\pi}(s,a) = R_s^a + \gamma \sum_{s\prime \in S} P_{ss\prime}^a \sum_{a\prime \in A}\pi(a\prime|s\prime) q_{\pi}(s\prime,a\prime)</script></li></ol><h4 id="6-5-最优价值函数（Optimal-Value-Function）"><a href="#6-5-最优价值函数（Optimal-Value-Function）" class="headerlink" title="6.5 最优价值函数（Optimal Value Function）"></a>6.5 最优价值函数（Optimal Value Function）</h4><ol><li><p><strong>最优状态价值函数</strong> 就是从所有可能的策略中，<strong>选取</strong> 产生最大状态价值函数值的 <strong>策略的函数</strong></p><script type="math/tex; mode=display">v_*(s) = \max_{\pi} v_{\pi}(s) \tag{6.5.1}</script></li><li><p><strong>最优动作价值函数</strong> 就是从所有可能的策略中，<strong>选取</strong> 产生最大动作状态价值函数值的 <strong>策略的函数</strong></p><script type="math/tex; mode=display">q_*(s,a) = \max_{\pi} q_{\pi}(s,a) \tag{6.5.2}</script></li><li><p>最优价值函数能够在马尔科夫决策过程中找到最好的策略。所以，如果我们找到了最优价值函数，那么我们就可以解决马尔科夫决策问题</p></li></ol><h4 id="6-6-最优策略（Optimal-Policy）"><a href="#6-6-最优策略（Optimal-Policy）" class="headerlink" title="6.6 最优策略（Optimal Policy）"></a>6.6 最优策略（Optimal Policy）</h4><ol><li><p>对于任意可能的状态，如果遵循一个策略的价值总是不差于遵循另一个策略，那么前一个策略就要优于后一个策略</p><script type="math/tex; mode=display">\pi \ge \pi\prime \quad if \; v_{\pi}(s) \ge v_{\pi\prime}(s), \forall{s}</script></li><li><p>定理：对任意马尔科夫决策过程，有：</p></li></ol><ul><li><p>存在一个最优策略 ${\pi}_*$ 不差于其他任何策略</p><script type="math/tex; mode=display">{\pi}_* \ge \pi, \forall{\pi}</script></li><li><p>所有的最优策略有相同的最优状态价值函数</p><script type="math/tex; mode=display">v_{\pi_*}(s) = v_*(s) \tag{6.6.2a}</script></li><li><p>所有的最优策略具有相同的最优动作价值函数</p><script type="math/tex; mode=display">q_{\pi_*}(s,a) = q_*(s,a) \tag{6.6.2b}</script></li></ul><h4 id="6-7-寻找最优策略"><a href="#6-7-寻找最优策略" class="headerlink" title="6.7 寻找最优策略"></a>6.7 寻找最优策略</h4><p>可以通过最大化最优动作价值函数 $q_*(s,a)$ 来找到最优策略</p><script type="math/tex; mode=display">\pi_*(a|s) =\begin{cases}    1 & if \; a = \underset{a \in A}{\operatorname{argmax}} \; q_*(s,a) \\    0 & otherwise \\\end{cases}\tag{6.7}</script><ul><li>对任意马尔科夫决策过程，总存在一个确定性的最优策略</li><li>如果我们知道最优动作价值函数 $q_*(s,a)$ ，则表明我们找到了最优策略</li></ul><h4 id="6-8-贝尔曼最优方程（Bellman-Optimality-Equation）"><a href="#6-8-贝尔曼最优方程（Bellman-Optimality-Equation）" class="headerlink" title="6.8 贝尔曼最优方程（Bellman Optimality Equation）"></a>6.8 贝尔曼最优方程（Bellman Optimality Equation）</h4><ol><li><p>一个状态的最优价值等于从该状态出发采取的所有动作产生的动作价值中最大的那个动作价值</p><script type="math/tex; mode=display"> \begin{aligned} v_*(s) & = v_{\pi_*}(s) & \text{公式6.6.2a} \\ & = \sum_{a \in A}\pi_*(a|s) q_{\pi_*}(s,a) & \text{公式6.4.1} \\ & = \max_a q_{\pi_*}(s,a) & \text{公式6.7} \\ & = \max_a q_*(s,a) & \text{公式6.6.2b} \\ \end{aligned}</script><p> 即</p><script type="math/tex; mode=display">v_*(s) = \max_a q_*(s,a) \tag{6.8.1}</script></li><li><p>与 <strong>方程6.4.2</strong> 类似，状态 $s$ 下执行动作 $a$ 的最优价值也可以分解为 <strong>离开状态 $s$ 的立即回报</strong> 与 <strong>所有可能会进入状态的最优状态价值与对应进入概率</strong> 的乘积的和，即：</p><script type="math/tex; mode=display">q_*(s,a) = R_s^a + \gamma \sum_{s\prime \in S} P_{ss\prime}^a v_*(s\prime) \tag{6.8.2}</script></li><li><p>组合上面的 <strong>方程6.8.1</strong> 和 <strong>方程6.8.2</strong> ，可以得到</p><script type="math/tex; mode=display">q_*(s,a) = R_s^a + \gamma \sum_{s\prime \in S} P_{ss\prime}^a  \max_{a\prime} q_*(s\prime,a\prime)</script><script type="math/tex; mode=display">v_*(s) = \max_a \left(R_s^a + \gamma \sum_{s\prime \in S} P_{ss\prime}^a v_*(s\prime)\right)</script></li></ol><h4 id="6-9-贝尔曼最优方程的求解方法"><a href="#6-9-贝尔曼最优方程的求解方法" class="headerlink" title="6.9 贝尔曼最优方程的求解方法"></a>6.9 贝尔曼最优方程的求解方法</h4><ol><li>贝尔曼最优方程是非线性的</li><li>贝尔曼最优方程通常没有固定的解决方案</li><li>可以通过一些迭代的方法来解决：<ul><li>价值迭代（Value Iteration）</li><li>策略迭代（Policy Iteration）</li><li>Q-learning</li><li>Sarsa</li></ul></li></ol><h3 id="6-10-贝尔曼期望方程和贝尔曼最优方程的关系"><a href="#6-10-贝尔曼期望方程和贝尔曼最优方程的关系" class="headerlink" title="6.10 贝尔曼期望方程和贝尔曼最优方程的关系"></a>6.10 贝尔曼期望方程和贝尔曼最优方程的关系</h3><ol><li>贝尔曼期望方程中，策略是已知的，求解贝尔曼期望方程就是在评价策略的优劣</li><li>贝尔曼最优方程中，策略是未知的，求解贝尔曼最优方程就是在找最优的策略</li></ol><hr><h2 id="二、生成模式（Generating-Patterns）"><a href="#二、生成模式（Generating-Patterns）" class="headerlink" title="二、生成模式（Generating Patterns）"></a>二、生成模式（Generating Patterns）</h2><h3 id="1-确定性模式（Deterministic-Patterns）"><a href="#1-确定性模式（Deterministic-Patterns）" class="headerlink" title="1. 确定性模式（Deterministic Patterns）"></a>1. 确定性模式（Deterministic Patterns）</h3><p>环境的下一个状态可以根据上一个状态计算出来。</p><p>比如：过完生日你就长了一岁。</p><h3 id="2-非确定性模式（Non-deterministic-patterns）"><a href="#2-非确定性模式（Non-deterministic-patterns）" class="headerlink" title="2. 非确定性模式（Non-deterministic patterns）"></a>2. 非确定性模式（Non-deterministic patterns）</h3><p>环境的下一个状态不能根据上一个状态计算出来。</p><p>比如：掷骰子。</p><p>马尔可夫假设：环境当前的状态仅仅依赖于之前的几个状态。<br>$n$ 阶马尔可夫模型：环境的下一个状态只由过去的 $n$ 个状态决定，与其他状态无关。</p><h3 id="3-隐藏模式（Hidden-Patterns）"><a href="#3-隐藏模式（Hidden-Patterns）" class="headerlink" title="3. 隐藏模式（Hidden Patterns）"></a>3. 隐藏模式（Hidden Patterns）</h3><p>隐马尔可夫模型（Hidden Markov Model, HMM）</p><hr><blockquote><p>参考：<a href="https://www.youtube.com/watch?v=lfHX2hHRMVQ&amp;list=PLqYmG7hTraZDM-OYHWgPebj2MfCFzFObQ&amp;index=2&amp;ab_channel=DeepMind">RL Course by David Silver - Lecture 2: Markov Decision Process</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马尔可夫 </tag>
            
            <tag> 贝尔曼公式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决Ubuntu播放声音卡顿和爆音</title>
      <link href="jie-jue-ubuntu-bo-fang-sheng-yin-qia-dun-he-bao-yin/"/>
      <url>jie-jue-ubuntu-bo-fang-sheng-yin-qia-dun-he-bao-yin/</url>
      
        <content type="html"><![CDATA[<h2 id="播放声音卡顿"><a href="#播放声音卡顿" class="headerlink" title="播放声音卡顿"></a>播放声音卡顿</h2><p>安装完Ubuntu18.04后，用网易云音乐听歌时，声音总是每隔几秒卡顿一下，特此记录一下解决方法。</p><p>用命令<code>sudo lspci -v | grep -A7 Audio</code>查看系统的使用的声卡设备是<strong>Intel Corporation 200 Series PCH HD Audio</strong>，使用的驱动时<strong>snd_hda_intel</strong>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~ <span class="token function">sudo</span> lspci -v <span class="token operator">|</span> <span class="token function">grep</span> -A7 Audio00:1f.3 Audio device: Intel Corporation <span class="token number">200</span> Series PCH HD Audio    Subsystem: Gigabyte Technology Co., Ltd <span class="token number">200</span> Series PCH HD Audio    Flags: bus master, fast devsel, latency <span class="token number">32</span>, IRQ <span class="token number">125</span>    Memory at f7140000 <span class="token punctuation">(</span><span class="token number">64</span>-bit, non-prefetchable<span class="token punctuation">)</span> <span class="token punctuation">[</span>size<span class="token operator">=</span>16K<span class="token punctuation">]</span>    Memory at f7120000 <span class="token punctuation">(</span><span class="token number">64</span>-bit, non-prefetchable<span class="token punctuation">)</span> <span class="token punctuation">[</span>size<span class="token operator">=</span>64K<span class="token punctuation">]</span>    Capabilities: <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span> Power Management version <span class="token number">3</span>    Capabilities: <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span> MSI: Enable+ <span class="token assign-left variable">Count</span><span class="token operator">=</span><span class="token number">1</span>/1 Maskable- 64bit+    Kernel driver <span class="token keyword">in</span> use: snd_hda_intel    Kernel modules: snd_hda_intel--01:00.1 Audio device: NVIDIA Corporation GP107GL High Definition Audio Controller <span class="token punctuation">(</span>rev a1<span class="token punctuation">)</span>    Subsystem: NVIDIA Corporation GP107GL High Definition Audio Controller    Flags: bus master, fast devsel, latency <span class="token number">0</span>, IRQ <span class="token number">17</span>    Memory at f7080000 <span class="token punctuation">(</span><span class="token number">32</span>-bit, non-prefetchable<span class="token punctuation">)</span> <span class="token punctuation">[</span>size<span class="token operator">=</span>16K<span class="token punctuation">]</span>    Capabilities: <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">]</span> Power Management version <span class="token number">3</span>    Capabilities: <span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span> MSI: Enable- <span class="token assign-left variable">Count</span><span class="token operator">=</span><span class="token number">1</span>/1 Maskable- 64bit+    Capabilities: <span class="token punctuation">[</span><span class="token number">78</span><span class="token punctuation">]</span> Express Endpoint, MSI 00    Capabilities: <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> Advanced Error Reporting    Kernel driver <span class="token keyword">in</span> use: snd_hda_intel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="播放声音爆音"><a href="#播放声音爆音" class="headerlink" title="播放声音爆音"></a>播放声音爆音</h2><p>有时电脑重启后，声音就一直每隔几秒爆音一下，重启也没用。可以执行一下命令，重启一下<strong>pulseaudio</strong>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pulseaudio --kill <span class="token punctuation">\</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -r ~/.config/pulse/* <span class="token punctuation">\</span>  <span class="token operator">&amp;&amp;</span> pulseaudio --start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Effective Modern C++》读书笔记</title>
      <link href="effective-modern-c-du-shu-bi-ji/"/>
      <url>effective-modern-c-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、型别推导"><a href="#一、型别推导" class="headerlink" title="一、型别推导"></a>一、型别推导</h2><h3 id="1-理解模板型别推导"><a href="#1-理解模板型别推导" class="headerlink" title="1. 理解模板型别推导"></a>1. 理解模板型别推导</h3><ol><li>在模板型别推导过程中，具有引用型别的实参会被当成非引用型别来处理。换言之，其引用性会被忽略。</li><li>对万能引用(Universal Reference)形参进行推导时，左值实参会进行特殊处理。</li><li>对按值传递的形参进行推导时，若实参型别中带有const或volatile饰词，则它们还是会被当作不带const或volatile饰词的型别来处理。</li><li>在模板型别推导过程中，数组或函数型别的实参会退化成对应的指针，除非它们被用来初始化引用。</li></ol><h3 id="2-理解auto型别推导"><a href="#2-理解auto型别推导" class="headerlink" title="2. 理解auto型别推导"></a>2. 理解auto型别推导</h3><ol><li>在一般情况下，auto型别推导和模板型别推导是一摸一样的，但是auto型别推导会假定用大括号括起的初始化表达式代表一个std::initializer_list，但模板型别推导却不会。</li><li>在函数返回值或lambda式的形参中使用auto，意思是使用模板型别推导而非auto型别推导。</li></ol><h3 id="3-理解decltype"><a href="#3-理解decltype" class="headerlink" title="3. 理解decltype"></a>3. 理解decltype</h3><ol><li>绝大多数情况下，decltype会得出变量或表达式的型别而不作任何修改。</li><li><p>对于型别为T的左值表达式，除非该表达式仅有一个名字，decltype总是得出型别T&amp;。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>i<span class="token punctuation">;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>     <span class="token comment">// -&gt; int</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment">// -&gt; int&amp;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span>    <span class="token comment">// -&gt; int&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>C++14支持decltype(auto)，和auto一样，它会从其初始化表达式出发来推导型别，但是它的型别推导使用的是decltype的规则。</p></li></ol><h3 id="4-掌握查看型别推导结果的方法"><a href="#4-掌握查看型别推导结果的方法" class="headerlink" title="4. 掌握查看型别推导结果的方法"></a>4. 掌握查看型别推导结果的方法</h3><ol><li>利用IDE编辑器、编译器错误消息和Boost.TypeIndex库常常能够查看到推导而得的型别。</li><li>有些工具产生的结果可能会无用，或者不准确。所以，理解C++型别推导规则是必要的。</li></ol><h2 id="二、auto"><a href="#二、auto" class="headerlink" title="二、auto"></a>二、auto</h2><h3 id="5-优先选用auto，而非显示型别声明"><a href="#5-优先选用auto，而非显示型别声明" class="headerlink" title="5. 优先选用auto，而非显示型别声明"></a>5. 优先选用auto，而非显示型别声明</h3><ol><li>auto变量必须初始化，基本上对会导致兼容性和效率问题的型别不匹配现象免疫，还可以简化重构流程，通常也比显示指定型别要少打一些字。</li><li>auto型别的变量都有着<a href="#2-理解auto型别推导">条款2</a>和<a href="#6-当auto推导的型别不符合要求时，使用带显示型别的初始化物习惯用法">条款6</a>中所描述的毛病。</li></ol><h3 id="6-当auto推导的型别不符合要求时，使用带显示型别的初始化物习惯用法"><a href="#6-当auto推导的型别不符合要求时，使用带显示型别的初始化物习惯用法" class="headerlink" title="6. 当auto推导的型别不符合要求时，使用带显示型别的初始化物习惯用法"></a>6. 当auto推导的型别不符合要求时，使用带显示型别的初始化物习惯用法</h3><ol><li>“隐形”的代理型别可以导致auto根据初始化表达式推导出“错误的”型别。</li><li>带显示型别的初始化物习惯用法强制auto推导出你想要的型别。</li></ol><h2 id="三、转向现代C"><a href="#三、转向现代C" class="headerlink" title="三、转向现代C++"></a>三、转向现代C++</h2><h3 id="7-在创建对象时注意区分-和"><a href="#7-在创建对象时注意区分-和" class="headerlink" title="7. 在创建对象时注意区分()和{}"></a>7. 在创建对象时注意区分()和{}</h3><ol><li>大括号初始化可以应用的语境最为宽泛，可以阻止隐式窄化型别转换，还对最令人苦恼之解析语法免疫。</li><li>在构造函数重载决议期间，只要有任何可能，大括号初始化物就会与带有std::initializer_list型别的形参相匹配，即使其他重载版本有着貌似更加匹配的形参表。</li><li>使用小括号还是大括号，会造成结果大相径庭的一个例子是：使用两个实参创建一个std::vector&lt;数值型别&gt;对象。</li><li>在模板内容进行对象创建时，到底应该使用小括号还是大括号会成为一个棘手问题。</li></ol><h4 id="几个容易混淆的例子"><a href="#几个容易混淆的例子" class="headerlink" title="几个容易混淆的例子"></a>几个容易混淆的例子</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Widget w1<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment">// 调用默认构造函数</span>Widget <span class="token function">w2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 声明了一个名为w2的函数</span>Widget <span class="token function">w3</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用带有std::initializer_list型别形参的构造函数</span>Widget w4<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment">// 同上</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-优先选用nullptr，而非0或NULL"><a href="#8-优先选用nullptr，而非0或NULL" class="headerlink" title="8. 优先选用nullptr，而非0或NULL"></a>8. 优先选用nullptr，而非0或NULL</h3><ol><li>相对于0或NULL，优先选用nullptr。</li><li>避免在整型和指针型别之间重载。</li></ol><h3 id="9-优先选用别名声明，而非typedef"><a href="#9-优先选用别名声明，而非typedef" class="headerlink" title="9. 优先选用别名声明，而非typedef"></a>9. 优先选用别名声明，而非typedef</h3><ol><li>typedef不支持模板化，但别名声明支持。</li><li>别名模板可以让人免写“::type”后缀，并且在模板内，对于内嵌typedef的引用经常要求加上typename前缀。</li></ol><h3 id="10-优先选用限定作用域的枚举型别，而非不限作用域的枚举型别"><a href="#10-优先选用限定作用域的枚举型别，而非不限作用域的枚举型别" class="headerlink" title="10. 优先选用限定作用域的枚举型别，而非不限作用域的枚举型别"></a>10. 优先选用限定作用域的枚举型别，而非不限作用域的枚举型别</h3><ol><li>C++98风格的枚举型别，现在称为不限范围的枚举型别。</li><li>限定作用域的枚举型别仅在枚举型别内可见。它们只能通过强制型别转换以转换至其他型别。</li><li>限制作用域的枚举型别和不限范围的枚举型别都支持底层型别指定。限制作用域的枚举型别的默认底层型别是int，而不限范围的枚举型别没有默认底层型别。</li><li>限制作用域的枚举型别总是可以进行前置声明，而不限范围的枚举型别却只有在指定了默认底层型别的前提下才可以进行前置声明。</li></ol><h3 id="11-优先选用删除函数，而非private未定义函数"><a href="#11-优先选用删除函数，而非private未定义函数" class="headerlink" title="11. 优先选用删除函数，而非private未定义函数"></a>11. 优先选用删除函数，而非private未定义函数</h3><ol><li>优先选用删除函数，而非private未定义函数。</li><li>任何函数都可以删除，包括非成员函数和模板具现。</li></ol><h3 id="12-为意在改写的函数添加override声明"><a href="#12-为意在改写的函数添加override声明" class="headerlink" title="12. 为意在改写的函数添加override声明"></a>12. 为意在改写的函数添加override声明</h3><ol><li>为意在改写的函数添加override声明。</li><li>成员函数引用饰词使得对于左值和右值对象（*this）的处理能够区分开来。</li></ol><h3 id="13-优先选用const-iterator，而非iterator"><a href="#13-优先选用const-iterator，而非iterator" class="headerlink" title="13. 优先选用const_iterator，而非iterator"></a>13. 优先选用const_iterator，而非iterator</h3><ol><li>优先选用const_iterator，而非iterator。</li><li>在最通用的代码中，优先选用非成员函数版本的begin、end和rbegin等，而非其成员函数版本。</li></ol><h3 id="14-只要函数不会发射异常，就为其加上noexcept声明"><a href="#14-只要函数不会发射异常，就为其加上noexcept声明" class="headerlink" title="14. 只要函数不会发射异常，就为其加上noexcept声明"></a>14. 只要函数不会发射异常，就为其加上noexcept声明</h3><ol><li>noexcept声明是函数接口的组成部分，这意味着调用方可能会对它有依赖。</li><li>相对于不带noexcept声明的函数，带有noexcept声明的函数有更对机会得到优化。</li><li>noexcept性质对于移动操作、swap、函数释放函数和析构函数最有价值。</li><li>大多数函数都是异常中立的，不具备noexcept性质。</li></ol><h4 id="关于条款14的补充说明"><a href="#关于条款14的补充说明" class="headerlink" title="关于条款14的补充说明"></a>关于条款14的补充说明</h4><ul><li><p>在带有noexcept声明的函数中，优化器不需要在异常传出函数的前提下，将执行期栈保持在可开解状态；也不需要在异常溢出函数的前提下，保证所有其中的对象以其被构造顺序的逆序完成析构。而那些以“throw()”异常规格声明的函数就享受不到这样的优化灵活性，和没有加异常规格声明的函数一样。</p></li><li><p>在C++98中，允许内存释放函数（即operator delete或operator delete[]）和析构函数发射异常，被认为是一种差劲的编程风格。而在C++11中，这种风格规则被升级成了一条语言规则。<strong>默认地，内存释放函数和所有的析构函数（无论是用户定义的，还是编译器自动生成的）都隐式地具备noexcept性质。</strong></p></li></ul><h3 id="15-只要有可能使用constexpr，就使用它"><a href="#15-只要有可能使用constexpr，就使用它" class="headerlink" title="15. 只要有可能使用constexpr，就使用它"></a>15. 只要有可能使用constexpr，就使用它</h3><ol><li>constexpr对象都具备const属性，并由编译期已知的值完成初始化。</li><li>constexpr函数在调用时若传入的实参值是编译期已知的，则会产生出编译期结果。</li><li>比起非constexpr对象或constexpr函数而言，constexpr对象或是constexpr函数可以用在一个作用域更广的语境中。</li></ol><h4 id="关于constexpr函数的说明"><a href="#关于constexpr函数的说明" class="headerlink" title="关于constexpr函数的说明"></a>关于constexpr函数的说明</h4><ul><li>constexpr函数可以用在要求编译期常量的语境中。在这样的语境中，若你传给一个constexpr函数的实参值是在编译期已知的，则结果也会在编译期间计算出来。如果任何一个实参值在编译期未知，则你的代码将无法通过编译。</li><li>在调用constexpr函数时，若传入的值有一个或多个在编译期未知，则它的运作方式和普通函数无异，亦即它也是在运行期执行结果的计算。这意味着，如果函数执行的是同样的操作，仅仅应用的语境一个是要求编译期常量的，一个是用于所有其他值的话，那就不必写两个函数。constexpr函数就可以同时满足所有需求。</li></ul><h4 id="关于constexpr在C-11和C-14中的不同"><a href="#关于constexpr在C-11和C-14中的不同" class="headerlink" title="关于constexpr在C++11和C++14中的不同"></a>关于constexpr在C++11和C++14中的不同</h4><p>constexpr函数仅限于传入和返回字面型别（literal type），意思就是这样的型别能够持有编译期可以决议的值。在C++11中，所有的内建型别，除了void，都符合这个条件。但是用户自定义型别同样可能也是字面型别，因为它的构造函数和其他成员函数可能也是constexpr函数。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">constexpr</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">double</span> xVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">double</span> yVal <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">noexcept</span>    <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>xVal<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>yVal<span class="token punctuation">)</span>    <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">constexpr</span> <span class="token keyword">double</span> <span class="token function">xValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> x<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">constexpr</span> <span class="token keyword">double</span> <span class="token function">yValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> y<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">double</span> newX<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> newX<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">double</span> newY<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> y <span class="token operator">=</span> newY<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">double</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在C++11中，有两个限制使得Point的成员函数setX和setY无法声明为constexpr。</p><ol><li>首先，它们修改了操作对象。在C++11中，constexpr函数都隐式地被声明为const的了。<em>这里说的并非函数返回值的const属性，而是指成员函数的const饰词，这意味着该成员函数不能修改其操作对象（严格地说是不能修改其非mutable数据成员）。</em></li><li>其次，它们的返回型别是void。而在C++11中，void并不是个字面型别。</li></ol><p>不过这两个限制在C++14中都被解除了，所以在C++14中，就连设置器也可以声明为constexpr。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">setX</span><span class="token punctuation">(</span><span class="token keyword">double</span> newX<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> x <span class="token operator">=</span> newX<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// C++14</span>    <span class="token keyword">constexpr</span> <span class="token keyword">void</span> <span class="token function">setY</span><span class="token punctuation">(</span><span class="token keyword">double</span> newY<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">{</span> y <span class="token operator">=</span> newY<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment">// C++14</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="关于条款15的补充说明"><a href="#关于条款15的补充说明" class="headerlink" title="关于条款15的补充说明"></a>关于条款15的补充说明</h4><ul><li><p>所有constexpr对象都是const对象，而并非所有的const对象都是constexpr对象。如果你想让编译器提供保证，让变量拥有一个值，用于要求编译期常量的语境，那么能达到这个目的的工具是constexpr，而非const。</p></li><li><p>在C++11中，constexpr函数不得包含多于一个可执行语句，即一个return语句。在C++14中，限制条件大大地放宽了。</p></li></ul><h3 id="16-保证const成员函数的线程安全性"><a href="#16-保证const成员函数的线程安全性" class="headerlink" title="16. 保证const成员函数的线程安全性"></a>16. 保证const成员函数的线程安全性</h3><ol><li>保证const成员函数的线程安全性，除非可以确信它们不会用在并发语境中。</li><li>运用std::atomic型别的变量会比运用互斥量提供更好的性能，但前者仅适用对单个变量或内存区域的操作。</li></ol><h3 id="17-理解特种成员函数的生成机制"><a href="#17-理解特种成员函数的生成机制" class="headerlink" title="17. 理解特种成员函数的生成机制"></a>17. 理解特种成员函数的生成机制</h3><ol><li>特种成员函数是指那些C++会自行生成的成员函数：默认构造函数、析构函数、复制操作，以及移动操作。</li><li>移动操作仅当类中未包含用户显式声明的复制操作、移动操作和析构函数时才生成。</li><li>复制构造函数仅当类中不包含用户显示声明的复制构造函数时才生成，如果该类声明了移动操作则复制构造函数将被删除。复制赋值运算符仅当类中不包含用户显示声明的复制赋值运算符才生成，如果该类声明了移动操作则复制赋值运算符将被删除。在已经存在显式声明的析构函数的条件下，生成复制操作已经成为了被废弃的行为。</li><li>成员函数模板在任何情况下都不会抑制特种成员函数的生成。</li></ol><h4 id="大三律"><a href="#大三律" class="headerlink" title="大三律"></a>大三律</h4><p>如果你声明了复制构造函数、复制赋值运算符，或析构函数中的任何一个，你就得同时声明所有这三个。</p><p>它植根于这样的思想：如果有改写复制操作的需求，往往意味着该类需要执行某种资源管理，而这就意味着：</p><ol><li>在一种复制操作中进行的任何资源管理，也极有可能在另一种复制操作中也需要进行；</li><li>该类的析构函数也会参与到该资源的管理中（通常是释放之）。</li></ol><h4 id="移动操作的生成条件（如果需要生成）仅当一下三者同时成立"><a href="#移动操作的生成条件（如果需要生成）仅当一下三者同时成立" class="headerlink" title="移动操作的生成条件（如果需要生成）仅当一下三者同时成立"></a>移动操作的生成条件（如果需要生成）仅当一下三者同时成立</h4><ol><li><p>该类未声明任何复制操作</p><p> 声明复制操作（无论是复制构造还是复制赋值）的行为表明了对象的常规复制途径（按成员复制）对于该类并不适用。编译器从而判定，既然按成员复制不适用于复制操作，则按成员移动极有可能也不适用于移动操作。</p></li><li><p>该类未声明任何移动操作</p><p> 假设你声明了一个移动构造函数，你实际上表明移动操作的实现方式将会与编译器生成的默认按成员移动的移动构造函数多少有些不同。而若是按成员进行的移动构造操作有不合用之处的话，那么按成员进行的移动赋值运算符极有可能也会有不合用之处。</p></li><li><p>该类未声明任何析构函数</p><ul><li><a href="#大三律">大三律</a>的一个推论是，如果存在用户声明的析构函数，则平凡的（trivial）按成员复制的也不适用于该类。根据这个推论，又能得出进一步的结论，如果声明了析构函数，则复制操作就不该被自动生成，因为它们的行为不可能正确。不过在C++98标准被接受的时代，这样的论证过程没有得到充分的重视，所以在C++98中，用户声明的析构函数即使存在，也不会影响编译器生成复制操作的意愿。这种情况在C++11仍然得到了保持，但原因仅仅在于，如果要对复制操作的生成条件施加更严格的限制，就会破坏太多的遗留代码了。</li><li>由于<a href="#大三律">大三律</a>背后的理由仍然成立，再结合声明了复制操作就会阻止隐式生成移动操作的事实，就推动了C++11中的这样一个规定：只要用户声明了析构函数，就不会生成移动操作。</li></ul></li></ol><h4 id="关于条款17的补充说明"><a href="#关于条款17的补充说明" class="headerlink" title="关于条款17的补充说明"></a>关于条款17的补充说明</h4><ul><li>当移动操作在某个数据成员或基类部分上执行移动构造或移动赋值的时候，并不能保证移动操作真的会发生。“按成员移动”实际上更像是按成员的移动请求，因为那些不可移动的型别（即那些并未为移动操作提供特殊支持的型别，这包括了大多数C++98的遗留型别）将通过其复制操作实现“移动”。每个按成员进行的“移动”操作，其核心在于把std::move应用于每一个移动源对象，其返回值被用于函数重载决议，最终决定是执行一个移动还是复制操作，这个流程将在<a href="#23-理解std::move和std::forward">条款23</a>中详述。在本条款中，只需记住，按成员移动是由两部分组成，一部分是在支持移动操作的成员上执行移动操作，另一部分实在不支持移动操作的成员上执行复制操作。</li></ul><h2 id="四、智能指针"><a href="#四、智能指针" class="headerlink" title="四、智能指针"></a>四、智能指针</h2><h3 id="18-使用std-unique-ptr管理具备专属所有权的资源"><a href="#18-使用std-unique-ptr管理具备专属所有权的资源" class="headerlink" title="18. 使用std::unique_ptr管理具备专属所有权的资源"></a>18. 使用std::unique_ptr管理具备专属所有权的资源</h3><ol><li>std::unique_ptr是小巧、高速的、具备只移型别的智能指针，对托管资源实施专属所有权语义。</li><li>默认地，资源析构采用delete运算符来实现，但可以指定自定义删除器。有状态的删除器和采用函数指针实现的删除器会增加std::unique_ptr型别的对象尺寸。</li><li>将std::unique_ptr转换成std::shared_ptr是容易实现的。</li></ol><h3 id="19-使用std-shared-ptr管理具备共享所有权的资源"><a href="#19-使用std-shared-ptr管理具备共享所有权的资源" class="headerlink" title="19. 使用std::shared_ptr管理具备共享所有权的资源"></a>19. 使用std::shared_ptr管理具备共享所有权的资源</h3><ol><li>std::shared_ptr提供方便的手段，实现了任意资源在共享所有权语义下进行生命周期管理的垃圾回收。</li><li>与std::unique_ptr相比，std::shared_ptr的尺寸通常是裸指针尺寸的两倍，它还会带来控制块的开销，并要求原子化的引用技术操作。</li><li>默认的资源析构通过delete运算符进行，但同时也支持定制删除器。删除器的型别对std::shared_ptr的型别没有影响。</li><li>避免使用裸指针型别的变量来创建std::shared_ptr指针。</li></ol><h3 id="20-对于类似std-shared-ptr但有可能空悬的指针使用std-weak-ptr"><a href="#20-对于类似std-shared-ptr但有可能空悬的指针使用std-weak-ptr" class="headerlink" title="20. 对于类似std::shared_ptr但有可能空悬的指针使用std::weak_ptr"></a>20. 对于类似std::shared_ptr但有可能空悬的指针使用std::weak_ptr</h3><ol><li>使用std::weak_ptr来代替可能空悬的std::shared_ptr。</li><li>std::weak_ptr可能的用武之地包括缓存，观察者列表，以及避免std::shared_ptr指针环路。</li></ol><h3 id="21-优先选用std-make-unique和std-make-shared，而非直接使用new"><a href="#21-优先选用std-make-unique和std-make-shared，而非直接使用new" class="headerlink" title="21. 优先选用std::make_unique和std::make_shared，而非直接使用new"></a>21. 优先选用std::make_unique和std::make_shared，而非直接使用new</h3><ol><li>相比于直接使用new表达式，make系列函数消除了重复代码、改进了异常安全性，并且对于std::make_shared和std::allocated_shared而言，生成的目标代码会尺寸更小、速度更快。</li><li>不适于使用make系列函数的场景包括需要定制删除器，以及期望直接传递大括号初始化物。</li><li>对于std::shared_ptr，不建议使用make系列函数的额外场景包括：（1）自定义内存管理的类；（2）内存紧张的系统、非常大的对象、以及存在比指涉到相同对象的std::shared_ptr生存期更久的std::weak_ptr。</li></ol><h3 id="22-使用Pimpl习惯用法时，将特殊成员函数的定义放到实现文件中"><a href="#22-使用Pimpl习惯用法时，将特殊成员函数的定义放到实现文件中" class="headerlink" title="22. 使用Pimpl习惯用法时，将特殊成员函数的定义放到实现文件中"></a>22. 使用Pimpl习惯用法时，将特殊成员函数的定义放到实现文件中</h3><ol><li>Pimpl惯用法通过降低类的客户和类实现者之间的依赖性，减少了构建遍数。</li><li>对于采用std::unique_ptr来实现的pImpl指针，须在类的头文件中声明特种成员函数，但在实现文件中实现它们。即使默认函数实现有着正确行为，也必须这样做。</li><li>上述建议仅适用于std::unique_ptr，但并不使用std::shared_ptr。</li></ol><h2 id="五、右值引用、移动语义和完美转发"><a href="#五、右值引用、移动语义和完美转发" class="headerlink" title="五、右值引用、移动语义和完美转发"></a>五、右值引用、移动语义和完美转发</h2><p>在阅读本章中的条款时，一定要把这一点铭记在心：<strong>形参总是左值，即使其型别是右值引用。</strong>即，给定函数形如：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span>Widget<span class="token operator">&amp;&amp;</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>形参w是个左值。即使它的型别是个指涉到Widget型别对象的右值引用（如果你对此感觉意外，请参阅本书第一章就写着的关于左值和右值的概述）。</p><h3 id="23-理解std-move和std-forward"><a href="#23-理解std-move和std-forward" class="headerlink" title="23. 理解std::move和std::forward"></a>23. 理解std::move和std::forward</h3><ol><li>std::move实施的是无条件的向右值型别的强制型别转换。就其本身而言，它不会执行移动操作。</li><li>仅当传入的实参被绑定到右值时，std::forward才针对该实参实施向右值型别的强制型别转换。</li><li>在运行期，std::move和std::forward都不会做任何操作。</li></ol><h3 id="24-区分万能引用和右值引用"><a href="#24-区分万能引用和右值引用" class="headerlink" title="24. 区分万能引用和右值引用"></a>24. 区分万能引用和右值引用</h3><ol><li>如果函数模板形参具备T&amp;&amp;型别，并且T的型别系推导而来，或如果对象使用auto&amp;&amp;声明其型别，则该形参或对象就是个万能引用。</li><li>如果型别声明并不精确地具备type&amp;&amp;的形式，或者型别推导并未发生，则type&amp;&amp;就代表右值引用。</li><li>若采用右值来初始化万能引用，就会得到一个右值引用。若采用左值来初始化万能引用，就会得到一个左值引用。</li></ol><h3 id="25-针对右值引用实施std-move，针对万能引用实施std-forward"><a href="#25-针对右值引用实施std-move，针对万能引用实施std-forward" class="headerlink" title="25. 针对右值引用实施std::move，针对万能引用实施std::forward"></a>25. 针对右值引用实施std::move，针对万能引用实施std::forward</h3><ol><li>针对右值引用的最后一次使用实施std::move，针对万能引用的最后一次使用实施std::forward。</li><li>作为按值返回的函数的右值引用和万能引用，依上一条所述采取相同行为。</li><li>若局部对象可能适用于返回值优化，则请勿针对其实施std::move或std::forward。</li></ol><h4 id="RVO的条件"><a href="#RVO的条件" class="headerlink" title="RVO的条件"></a>RVO的条件</h4><ul><li><p>局部对象型别和函数返回值型别相同。</p>  <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Widget <span class="token function">makeWidget</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Widget w<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <code>std::move(w)</code>返回的不是局部对象w，而是w的引用，std::move(w)的结果。返回一个局部对象的引用并不满足实施RVO的前提条件，因此编译器必须把w移入函数的返回值存储位置。</p></li><li><p>返回的就是局部对象本身。</p></li></ul><p>即使实施RVO的前提条件满足，但编译器选择不执行复制省略的时候，返回对象必须作为右值处理。这么一来，就等于标准要求：<strong>当RVO的前提条件允许时，要么发生复制省略，要么std::move隐式地被实施于返回的局部对象上。</strong></p><h3 id="26-避免依万能引用型型别进行重载"><a href="#26-避免依万能引用型型别进行重载" class="headerlink" title="26. 避免依万能引用型型别进行重载"></a>26. 避免依万能引用型型别进行重载</h3><ol><li>把万能引用作为重载候选型别，几乎总会让该重载版本在始料未及的情况下被调用到。</li><li>完美转发构造函数的问题尤其严重，因为对于非常量的左值型别而言，它们一般都会形成相对于复制构造函数的更佳匹配，并且它们还会劫持派生类中对基类的复制和移动构造函数的调用。</li></ol><h3 id="27-熟悉依万能引用型别进行重载的替代方案"><a href="#27-熟悉依万能引用型别进行重载的替代方案" class="headerlink" title="27. 熟悉依万能引用型别进行重载的替代方案"></a>27. 熟悉依万能引用型别进行重载的替代方案</h3><ol><li>如果不使用万能引用和重载的组合，则替代方案包括使用彼此不同的函数名字、传递const T&amp;型别的形参、传值和标签分派。</li><li>经由std::enable_if对模板施加限制，就可以将万能引用和重载一起使用，不过这种技术控制了编译器可以调用到接受万能引用的重载版本的条件。</li><li>万能引用形参通常在性能方面具备优势，但在易用性方面一般会有劣势。</li></ol><h3 id="28-理解引用折叠"><a href="#28-理解引用折叠" class="headerlink" title="28. 理解引用折叠"></a>28. 理解引用折叠</h3><ol><li>引用折叠会在四种语境中发生：模板实例化，auto型别生成、创建和运用typedef和别名声明，以及decltype。</li><li>当编译器在引用折叠的语境下生成引用的引用时，结果会变成单个引用。如果原始的引用中有任一引用为左值引用，则结果为左值引用。否则，结果为右值引用。</li><li>万能引用就是在型别推导的过程中会区别左值和右值，以及会发生引用折叠的语境中的右值引用。</li></ol><h3 id="29-假定移动操作不存在、成本高、未使用"><a href="#29-假定移动操作不存在、成本高、未使用" class="headerlink" title="29. 假定移动操作不存在、成本高、未使用"></a>29. 假定移动操作不存在、成本高、未使用</h3><ol><li>假定移动操作不存在、成本高、未使用。</li><li>对于那些型别或对于移动语义的支持情况已知的代码，则无需作以上假定。</li></ol><h3 id="30-熟悉完美转发的失败情形"><a href="#30-熟悉完美转发的失败情形" class="headerlink" title="30. 熟悉完美转发的失败情形"></a>30. 熟悉完美转发的失败情形</h3><ol><li>完美转发的失败情形，是源于模板型别推导失败，或推导结果是错误的型别。</li><li>会导致完美转发失败的实参种类有大括号初始化物、以值0或NULL表达的空指针、仅有声明的整型static const成员变量、模板或重载的函数名字，以及位域。</li></ol><h2 id="六、lambda表达式"><a href="#六、lambda表达式" class="headerlink" title="六、lambda表达式"></a>六、lambda表达式</h2><h3 id="31-避免默认捕获模式"><a href="#31-避免默认捕获模式" class="headerlink" title="31. 避免默认捕获模式"></a>31. 避免默认捕获模式</h3><ol><li>按引用的默认捕获会导致空悬指针问题。</li><li>按值的默认捕获极易受空悬指针影响（尤其是this），并会误导人们认为lambda式是自洽的。</li></ol><h3 id="32-使用初始化捕获将对象移入闭包"><a href="#32-使用初始化捕获将对象移入闭包" class="headerlink" title="32. 使用初始化捕获将对象移入闭包"></a>32. 使用初始化捕获将对象移入闭包</h3><ol><li>使用C++14的初始化捕获将对象移入闭包。</li><li>在C++11中，经由手工实现的类或std::bind去模拟初始化捕获。</li></ol><h3 id="33-对auto-amp-amp-型别的形参使用decltype，以std-forward之"><a href="#33-对auto-amp-amp-型别的形参使用decltype，以std-forward之" class="headerlink" title="33. 对auto&amp;&amp;型别的形参使用decltype，以std::forward之"></a>33. 对auto&amp;&amp;型别的形参使用decltype，以std::forward之</h3><ol><li><p>对auto&amp;&amp;型别的形参使用decltype，以std::forward之。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> f <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token function">normalize</span><span class="token punctuation">(</span>std<span class="token operator">::</span>forward<span class="token operator">&lt;</span><span class="token keyword">decltype</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="34-优先选用lambda式，而非std-bind"><a href="#34-优先选用lambda式，而非std-bind" class="headerlink" title="34. 优先选用lambda式，而非std::bind"></a>34. 优先选用lambda式，而非std::bind</h3><ol><li>lambda式比起使用std::bind而言，可读性更好、表达力更强，可能运行效率也更高。</li><li>仅在C++11中，std::bind在实现移动捕获，或是绑定到具备模板化的函数调用运算符的对象的场合中，可能尚有余热可以发挥。</li></ol><h2 id="七、并发API"><a href="#七、并发API" class="headerlink" title="七、并发API"></a>七、并发API</h2><h3 id="35-优先选用基于任务而非基于线程的程序设计"><a href="#35-优先选用基于任务而非基于线程的程序设计" class="headerlink" title="35. 优先选用基于任务而非基于线程的程序设计"></a>35. 优先选用基于任务而非基于线程的程序设计</h3><ol><li>std::thread的API未提供直接获取异步运行函数返回值的途径，而且如果那些函数抛出异常，程序就会终止。</li><li>基于线程的程序设计要求手动管理线程耗尽、超订、负载均衡，以及新平台适配。</li><li>经由应用了默认启动策略的std::async进行基于任务的程序设计，大部分这类问题都能找到解决知道。</li></ol><h3 id="36-如果异步是必要的，则指定std-launch-async"><a href="#36-如果异步是必要的，则指定std-launch-async" class="headerlink" title="36. 如果异步是必要的，则指定std::launch::async"></a>36. 如果异步是必要的，则指定std::launch::async</h3><ol><li>std::async的默认启动策略既允许任务异步方式执行，也允许任务以同步方式执行。</li><li>如此的弹性会导致使用thread_local变量时的不确定性，隐含着任务可能永远不会执行，还会影响运用了基于超时的wait调用的程序逻辑。</li><li>如果异步是必要的，则指定std::launch::async。</li></ol><h3 id="37-使std-thread型别对象在所有路径皆不可联结（unjoinable）"><a href="#37-使std-thread型别对象在所有路径皆不可联结（unjoinable）" class="headerlink" title="37. 使std::thread型别对象在所有路径皆不可联结（unjoinable）"></a>37. 使std::thread型别对象在所有路径皆不可联结（unjoinable）</h3><ol><li>使std::thread型别对象在所有路径皆不可联结。</li><li>在析构时调用join可能导致难以调试的性能异常。</li><li>在析构时调用detach可能导致难以调试的未定义行为。</li><li>在成员列表的最后声明std::thread型别对象。</li></ol><h4 id="不可联结的std-thread型别对象"><a href="#不可联结的std-thread型别对象" class="headerlink" title="不可联结的std::thread型别对象"></a>不可联结的std::thread型别对象</h4><ol><li><strong>默认构造的std::thread。</strong> 此类std::thread没有可以执行的函数，因此也没有对应的底层执行线程。</li><li><strong>已移动的std::thread。</strong> 移动操作的结果是，一个std::thread所对应的底层执行线程（若有）被对应到另一个std::thread。</li><li><strong>已联结的std::thread。</strong> 联结后，std::thread型别对象不在对应至已结束运行的底层执行线程。</li><li><strong>已分离的std::thread。</strong> 分离操作会把std::thread型别对象和它对应的底层执行线程之间的连接断开。</li></ol><h4 id="关于条款37的补充说明"><a href="#关于条款37的补充说明" class="headerlink" title="关于条款37的补充说明"></a>关于条款37的补充说明</h4><ul><li>如果可联结线程对象的析构函数被调用，则程序的执行就终止了。</li></ul><h3 id="38-对变化多端的线程句柄析构函数行为保持关注"><a href="#38-对变化多端的线程句柄析构函数行为保持关注" class="headerlink" title="38. 对变化多端的线程句柄析构函数行为保持关注"></a>38. 对变化多端的线程句柄析构函数行为保持关注</h3><ol><li>期值（std::future/std::shared_future）的析构函数在常规情况下，仅会析构期值的成员变量。</li><li>指涉到经由std::async启动的未推迟任务的共享状态的最后一个期值会保持阻塞，直至该任务结束。</li></ol><h3 id="39-考虑针对一次性事件通信使用以void为模板型别实参的期值"><a href="#39-考虑针对一次性事件通信使用以void为模板型别实参的期值" class="headerlink" title="39. 考虑针对一次性事件通信使用以void为模板型别实参的期值"></a>39. 考虑针对一次性事件通信使用以void为模板型别实参的期值</h3><ol><li>如果仅为了实现平凡事件通信，基于条件变量的设计会要求多余的互斥量，这会给相互关联的检测和反应任务带来约束，并要求反应任务校验事件确已发生。</li><li>使用标志位的设计可以避免上述问题，但这一设计基于轮训而非阻塞。</li><li>条件变量和标志位可以一起使用，但这样的通信机制设计结果不甚自然。</li><li>使用std::promise型别对象和期值就可以回避这些问题，但是一来这个途径为了共享状态需要使用堆内存，而且仅限于一次性通信。</li></ol><h3 id="40-对并发使用std-atomic，对特种内存使用volatile"><a href="#40-对并发使用std-atomic，对特种内存使用volatile" class="headerlink" title="40. 对并发使用std::atomic，对特种内存使用volatile"></a>40. 对并发使用std::atomic，对特种内存使用volatile</h3><ol><li>std::atomic用于多线程访问的数据，且不用互斥量。它是撰写并发软件的工具。</li><li><p>volatile用于读写操作不可以被优化掉的内存。它是在面对特种内存时使用的工具。</p><p> 给y加上volatile可以避免编译器将代码：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">y</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p> 优化成：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">register</span> <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>std<span class="token operator">::</span>atomic<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token keyword">register</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y<span class="token punctuation">.</span><span class="token function">store</span><span class="token punctuation">(</span><span class="token keyword">register</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="八、微调"><a href="#八、微调" class="headerlink" title="八、微调"></a>八、微调</h2><h3 id="41-针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传递"><a href="#41-针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传递" class="headerlink" title="41. 针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传递"></a>41. 针对可复制的形参，在移动成本低并且一定会被复制的前提下，考虑将其按值传递</h3><ol><li>对于可复制的、在移动成本低廉的并且一定会被复制的形参而言，按值传递可能会和按引用传递的具备相近的效率，并且可能生成更少量的目标代码。</li><li>经由构造复制形参的成本可能比经由赋值复制形参高出很多。</li><li>按值传递肯定会导致切片问题，所以基类型别特别不适用于按值传递。</li></ol><h3 id="42-考虑置入而非插入"><a href="#42-考虑置入而非插入" class="headerlink" title="42. 考虑置入而非插入"></a>42. 考虑置入而非插入</h3><ol><li>从原理上说，置入函数（如：emplace_back）应该有时比对应的插入函数（如：push_back）高效，而且不应该有更低效的可能。</li><li>从实践上说，置入函数在以下几个前提成立时，极有可能会运行得更快：（1）待添加的值是以构造而非赋值方式加入容器；（2）传递的实参型别与容器持有之物的型别不同；（3）容器不会由于存在重复值而拒绝待添加的值。</li><li><p>置入函数可能会执行在插入函数中会被拒绝的型别转换。</p><p> 复制初始化是不允许调用带有explicit声明饰词的构造函数的，但直接初始化就允许。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token operator">::</span>regex r1 <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">// 错误！无法通过编译 （复制初始化）</span>std<span class="token operator">::</span>regex <span class="token function">r2</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 能编译 （直接初始化）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP模型协议状态机速览</title>
      <link href="tcp-mo-xing-xie-yi-zhuang-tai-ji-su-lan/"/>
      <url>tcp-mo-xing-xie-yi-zhuang-tai-ji-su-lan/</url>
      
        <content type="html"><![CDATA[<h2 id="一、OSI模型"><a href="#一、OSI模型" class="headerlink" title="一、OSI模型"></a>一、OSI模型</h2><p><img src="/images/TCP模型协议状态机速览/计算机网络体系结构.png" alt="计算机网络体系结构"></p><div class="table-container"><table><thead><tr><th>层级</th><th>名字</th><th>说明</th><th>数据包名</th><th>常用格式协议</th></tr></thead><tbody><tr><td>7</td><td>应用层</td><td>各种应用程序协议。</td><td></td><td>HTTP、FTP、TELNET、DNS、BT、NTP、DHCP、SNMP</td></tr><tr><td>6</td><td>表示层</td><td>信息的语法语义以及它们的关联，如加密解密，转换翻译、压缩解压缩。</td><td></td><td>JPEG、ASCll、EBCDIC</td></tr><tr><td>5</td><td>会话层</td><td>不同机器上的用户之间建立及管理会话。</td><td></td><td>SSL、TLS、RPC</td></tr><tr><td>4</td><td>传输层</td><td>接受会话层的数据，在必要时把数据进行分割，并将这些数据交给网络层，且保证这些数据段有效到达对端。</td><td>Segment</td><td>TCP, UDP</td></tr><tr><td>3</td><td>网络层</td><td>控制子网的运行，如逻辑编址、分组传输、路由选择。</td><td>Packet</td><td>IP, ICMP, IGMP</td></tr><tr><td>2</td><td>数据链路层</td><td>物理寻址（MAC地址），并将原始比特流转变为逻辑传输线路。</td><td>Frame</td><td>ARP</td></tr><tr><td>1</td><td>物理层</td><td>机械、电子、定时接口通信。信道上的原始比特流传输。</td><td></td><td>光纤</td></tr></tbody></table></div><blockquote><p>参考：<a href="http://www.colasoft.com.cn/download/protocols_map.php">网络通讯协议图</a></p></blockquote><hr><h2 id="二、常用协议"><a href="#二、常用协议" class="headerlink" title="二、常用协议"></a>二、常用协议</h2><h3 id="ICMP协议头格式"><a href="#ICMP协议头格式" class="headerlink" title="ICMP协议头格式"></a>ICMP协议头格式</h3><p><img src="/images/TCP模型协议状态机速览/ICMP协议头.png" alt="ICMP协议头"></p><h3 id="IPv4协议头格式"><a href="#IPv4协议头格式" class="headerlink" title="IPv4协议头格式"></a>IPv4协议头格式</h3><p><img src="/images/TCP模型协议状态机速览/IPv4协议头格式.png" alt="IPv4协议头格式"></p><h3 id="TCP协议头格式"><a href="#TCP协议头格式" class="headerlink" title="TCP协议头格式"></a>TCP协议头格式</h3><p><img src="/images/TCP模型协议状态机速览/TCP协议头格式.png" alt="TCP协议头格式"></p><h3 id="UDP协议头格式"><a href="#UDP协议头格式" class="headerlink" title="UDP协议头格式"></a>UDP协议头格式</h3><p><img src="/images/TCP模型协议状态机速览/UDP协议头格式.png" alt="UDP协议头格式"></p><blockquote><p>图片来源：<a href="https://nmap.org/book/tcpip-ref.html">TCP/IP Reference</a></p></blockquote><hr><h2 id="三、TCP状态机"><a href="#三、TCP状态机" class="headerlink" title="三、TCP状态机"></a>三、TCP状态机</h2><h3 id="完整TCP连接和断开状态图"><a href="#完整TCP连接和断开状态图" class="headerlink" title="完整TCP连接和断开状态图"></a>完整TCP连接和断开状态图</h3><p><img src="/images/TCP模型协议状态机速览/完整TCP连接和断开状态图.png" alt="完整TCP连接和断开状态图"></p><blockquote><p>图片来源：<a href="http://www.tcpipguide.com/free/t_TCPOperationalOverviewandtheTCPFiniteStateMachineF-2.htm">TCP Operational Overview and the TCP Finite State Machine (FSM) 2</a></p></blockquote><h3 id="TCP断开状态图"><a href="#TCP断开状态图" class="headerlink" title="TCP断开状态图"></a>TCP断开状态图</h3><p><img src="/images/TCP模型协议状态机速览/TCP断开状态图.png" alt="TCP断开状态图"></p><blockquote><p>图片来源：<a href="http://www.tcpipguide.com/free/t_TCPConnectionTermination-2.htm">TCP Connection Termination 2</a></p></blockquote><h3 id="TCP双方同时断开状态图"><a href="#TCP双方同时断开状态图" class="headerlink" title="TCP双方同时断开状态图"></a>TCP双方同时断开状态图</h3><p><img src="/images/TCP模型协议状态机速览/TCP双方同时断开状态图.png" alt="TCP双方同时断开状态图"></p><blockquote><p>图片来源：<a href="http://www.tcpipguide.com/free/t_TCPConnectionTermination-4.htm">TCP Connection Termination 4</a></p></blockquote><h3 id="实际操作和截图"><a href="#实际操作和截图" class="headerlink" title="实际操作和截图"></a>实际操作和截图</h3><h4 id="1-TCP连接发送数据断开的Wireshark截图"><a href="#1-TCP连接发送数据断开的Wireshark截图" class="headerlink" title="1. TCP连接发送数据断开的Wireshark截图"></a>1. TCP连接发送数据断开的Wireshark截图</h4><p><img src="/images/TCP模型协议状态机速览/TCP连接发送数据断开的Wireshark截图.png" alt="TCP连接发送数据断开的Wireshark截图"></p><ul><li><p>让Wireshark显示绝对的sequence numbers</p><p>  在菜单栏依次点击 <code>编译</code> -&gt; <code>首选项</code> -&gt; <code>Protocols</code> -&gt; <code>TCP</code> 中，取消选项 <code>Relative sequence numbers</code> 前的复选框。</p></li><li><p>如何显示截图的界面</p><p>  在菜单栏依次点击 <code>统计</code> -&gt; <code>流量图</code>，然后点击右键，在弹出的选项中选择<code>放大</code>/<code>缩小</code>调整图形。</p></li></ul><h4 id="2-环境及操作"><a href="#2-环境及操作" class="headerlink" title="2. 环境及操作"></a>2. 环境及操作</h4><p>两台机器分别是：</p><ul><li>A: 192.168.81.88（Windows 10）</li><li>B: 192.168.20.122（CentOS 7.7）</li></ul><p>操作步骤：</p><ol><li>B在9999端口监听TCP连接。</li><li>A连接B的9999端口。</li><li>A向B发送4个字节的数据。</li><li>B向A发送4个字节的数据。</li><li>B主动断开连接。</li></ol><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-TIME-WAIT会在什么情况下出现"><a href="#1-TIME-WAIT会在什么情况下出现" class="headerlink" title="1. TIME_WAIT会在什么情况下出现"></a>1. TIME_WAIT会在什么情况下出现</h4><p>首先，TIME_WAIT状态只会出现在主动断开TCP的那一方。</p><p>其次，当断开TCP的主动方收到了被动方发来的FIN包并回复对应的ACK包给被动方后，主动方就进入了TIME_WAIT状态。然后等待<code>2 * MSL</code>时间（此时间段内如果再次收到被动方发来的FIN消息，说明之前回复的ACK包丢失，需要重新发送给被动方，并重新开始计时）后，再进入CLOSED状态，此时才能完成的释放相关的资源。</p><h4 id="2-什么是MSL"><a href="#2-什么是MSL" class="headerlink" title="2. 什么是MSL"></a>2. 什么是MSL</h4><p><a href="https://en.wikipedia.org/wiki/Maximum_segment_lifetime">MSL, Maximum Segment Lifetime</a>，TCP Segment在网络上的最长存活时间。</p><p><a href="www.rfc-editor.org/rfc/rfc793.txt">RFC793</a>将MSL定义为2分钟。Linux下MSL默认是30秒，Windows下MSL默认是240秒。Linux下可以通过下面的命令查看实际的MSL值。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sysctl net.ipv4.tcp_fin_timeout<span class="token function">cat</span> /proc/sys/net/ipv4/tcp_fin_timeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-为什么不直接进入CLOSED状态，还需要等待2-MSL时间"><a href="#3-为什么不直接进入CLOSED状态，还需要等待2-MSL时间" class="headerlink" title="3. 为什么不直接进入CLOSED状态，还需要等待2 * MSL时间"></a>3. 为什么不直接进入CLOSED状态，还需要等待<code>2 * MSL</code>时间</h4><p>主要原因有两个：</p><ol><li><p>进入TIME_WAIT状态并等待<code>2 * MSL</code>，保证了如果被动方没有收到主动方回复的ACK，被动方至少有时间能重发一次之前FIN包。一回一重发，正好<code>2 * MSL</code>。</p><blockquote><p>如果主动方回的ACK包丢失，被动方重发的FIN包也丢失，那么就不管了。</p></blockquote></li><li><p>避免断开的TCP连接不影响后面新建立的TCP连接。</p><blockquote><p>如果主动方不等待<code>2*MSL</code>直接进入CLOSED状态，然后再重新建立TCP连接，如果此时收到了之前关闭的被动方重发FIN消息，那么重新建立的TCP连接就会被断开。</p></blockquote></li></ol><hr><h2 id="四、TCP滑动窗口"><a href="#四、TCP滑动窗口" class="headerlink" title="四、TCP滑动窗口"></a>四、TCP滑动窗口</h2><h3 id="1-什么是滑动窗口"><a href="#1-什么是滑动窗口" class="headerlink" title="1. 什么是滑动窗口"></a>1. 什么是滑动窗口</h3><p>滑动窗口（Sliding Window），也叫发送窗口（Send Window），滑动窗口表明接收方有多少空间来接收数据。在TCP连接建立的过程中协商滑动窗口的大小，当连接成功建立后，双方的滑动窗口的大小都协商好了。在通信的过程中也可以动态的修改滑动窗口的大小。</p><p>滑动窗口主要用来做流控（Flow Control），它主要受TCP连接双方内存大小的影响，并不直接关心网速等问题。所以完整的TCP控制除了流控（Flow Control）外，还有需要拥塞处理（Congestion Handling）来处理网络相关的问题。</p><p><img src="/images/TCP模型协议状态机速览/什么是滑动窗口.png" alt="什么是滑动窗口"></p><ol><li>已经收到ACK确认的数据。字节1-31。</li><li>在滑动窗口中，已经发送出去了，但是还没收到ACK确认的数据。字节32-45。</li><li>在滑动窗口中，还没发送出去的数据（接收方还有空间接收）。字节46-51。</li><li>待发送的数据（接收方没有空间接收）。字节52及以上。</li></ol><blockquote><p>图片来源：<a href="http://www.tcpipguide.com/free/t_TCPSlidingWindowAcknowledgmentSystemForDataTranspo-6.htm">TCP Sliding Window Acknowledgment System For Data Transport, Reliability and Flow Control 6</a></p></blockquote><h3 id="2-滑动窗口怎么工作"><a href="#2-滑动窗口怎么工作" class="headerlink" title="2. 滑动窗口怎么工作"></a>2. 滑动窗口怎么工作</h3><ol><li><p>当上图中所有滑动窗口内的数据都发送出后，滑动窗口内的状态变成了下图的状态：</p><p> <img src="/images/TCP模型协议状态机速览/滑动窗口内的数据都已被发送但未被确认.png" alt="滑动窗口内的数据都已被发送但未被确认"></p><blockquote><p>图片来源：<a href="http://www.tcpipguide.com/free/t_TCPSlidingWindowAcknowledgmentSystemForDataTranspo-7.htm">TCP Sliding Window Acknowledgment System For Data Transport, Reliability and Flow Control 7</a></p></blockquote><ol><li>已经收到ACK确认的数据。字节1-31。</li><li>在滑动窗口中，已经发送出去了，但是还没收到ACK确认的数据。字节32-51。</li><li>在滑动窗口中，还没发送出去的数据（接收方还有空间接收）。无。</li><li>待发送的数据（接收方没有空间接收）。字节52及以上。</li></ol></li><li><p>如果一段时间后，收到了32-36字节的ACK确认消息，那么滑动窗口就会向后面滑动，并可以发送字节52-56。如下图：</p><p> <img src="/images/TCP模型协议状态机速览/滑动窗口收到确认后向后滑动.png" alt="滑动窗口收到确认后向后滑动"></p><blockquote><p>图片来源：<a href="http://www.tcpipguide.com/free/t_TCPSlidingWindowAcknowledgmentSystemForDataTranspo-8.htm">TCP Sliding Window Acknowledgment System For Data Transport, Reliability and Flow Control 8</a></p></blockquote><ol><li>已经收到ACK确认的数据。字节1-36。</li><li>在滑动窗口中，已经发送出去了，但是还没收到ACK确认的数据。字节37-51。</li><li>在滑动窗口中，还没发送出去的数据（接收方还有空间接收）。字节52-56。</li><li>待发送的数据（接收方没有空间接收）。字节57及以上。</li></ol></li><li><p>循环上面的步骤就能够一直发送数据了。如下图（下图中滑动窗口没有向后滑动，所以最后滑动窗口的大小会变成0）：</p><p> <img src="/images/TCP模型协议状态机速览/滑动窗口完整工作流程.png" alt="滑动窗口完整工作流程"></p><blockquote><p>图片来源：<a href="http://www.tcpipguide.com/free/t_TCPWindowSizeAdjustmentandFlowControl-2.htm">TCP Window Size Adjustment and Flow Control 2</a></p></blockquote></li></ol><h3 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3. 常见问题"></a>3. 常见问题</h3><h4 id="1-如果滑动窗口变成了0会发生什么"><a href="#1-如果滑动窗口变成了0会发生什么" class="headerlink" title="1. 如果滑动窗口变成了0会发生什么"></a>1. 如果滑动窗口变成了0会发生什么</h4><p>当滑动窗口减少到0后，就不能再发送数据给对方了。此时可以发送<code>Zero Window Probe</code>包给对方，这样在对方回复此包的ACK的同时，可以更新滑动窗口的大小。</p><h4 id="2-什么是“糊涂窗口综合症”"><a href="#2-什么是“糊涂窗口综合症”" class="headerlink" title="2. 什么是“糊涂窗口综合症”"></a>2. 什么是“糊涂窗口综合症”</h4><p>如果发送方每次都发送很少的字节，或者接受方每次都处理很少的字节时，或者双方都有的情况下，就叫<code>糊涂窗口综合症（Silly Window Syndrome）</code>。因为每次发送出去的字节数很少，比如几个字节，明显小于了TCP/IP的协议头的大小（TCP+IP头有40个字节），此时网络传输的效率就很低。</p><p>一个解决办法就是使用<a href="https://en.wikipedia.org/wiki/Nagle%27s_algorithm">纳格算法，Nagle’s algorithm</a>，这个算法默认是启用的。该算法的伪代码如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">if there is new data to send then    if the window size ≥ MSS and available data is ≥ MSS then        send complete MSS segment now    else        if there is unconfirmed data still in the pipe then            enqueue data in the buffer until an acknowledge is received        else            send data immediately        end if    end ifend if<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="五、TCP拥塞处理"><a href="#五、TCP拥塞处理" class="headerlink" title="五、TCP拥塞处理"></a>五、TCP拥塞处理</h2><h3 id="1-为什么需要拥塞处理"><a href="#1-为什么需要拥塞处理" class="headerlink" title="1. 为什么需要拥塞处理"></a>1. 为什么需要拥塞处理</h3><p>如果网络延时突然增大丢包严重，TCP发送出去的数据包，很久都没收到对应包的ACK，那么TCP就只能选择重传该数据包。但是不能无限制不间断的重发数据包，因为这会增加网络的负担，导致更大的网络延迟和更多的网络丢包，所以需要拥塞处理（Congestion Handling）来控制数据包的重发。</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP状态机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《深度探索C++对象模型》读书笔记</title>
      <link href="shen-du-tan-suo-c-dui-xiang-mo-xing-du-shu-bi-ji/"/>
      <url>shen-du-tan-suo-c-dui-xiang-mo-xing-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、关于对象"><a href="#一、关于对象" class="headerlink" title="一、关于对象"></a>一、关于对象</h2><p>关于菱形继承对象的内存分布，可以查看<a href="https://kibazen.cn/c-ling-xing-ji-cheng-nei-cun-bu-ju-fen-xi/">C++菱形继承内存布局分析</a>了解。</p><h2 id="二、构造函数语义学"><a href="#二、构造函数语义学" class="headerlink" title="二、构造函数语义学"></a>二、构造函数语义学</h2><ol><li><p>四种情况下，编译器会为未声明 contructor 的 class 合成一个 default constructor。</p><ul><li><p>带有 Default Constructor 的 Member Class Object</p><blockquote><p>如果一个 class 没有任何的 constructor， 但是它含有一个拥有 default constructor 的 member object，那么这个 class 的 <strong>implicit default constructor</strong> 就是 nontrivial，编译器需要为此 class 合成一个 default constructor。此 class 的 default constructor 会调用每个 member object 的 default constructor。</p></blockquote></li><li><p>带有 Default Constructor 的 Base Class</p><blockquote><p>类似的道理，一个没有任何 constructor 的 class 派生自一个带有 default constructor 的 base class，这个 derived class 的 default constructor 会被视为 nontrivial，并需要被合成出来。它将调用上一层 base class 的 default constructor （根据它们的声明次序）。对这个 derived class 来说，合成出来的 constructor 和一个明确提供的 default constructor 一样。</p></blockquote></li><li><p>带有一个Virtual Function 的 Class</p><blockquote><p>另外两种情况，也需要合成出 default constructor：</p><ol><li>class 声明（或继承）一个 virtual function。</li><li>class 派生自一个继承串链，其中有一个或更多的 virtual base classes。</li></ol></blockquote></li><li><p>带有一个 Virtual Base Class 的 Class</p><p>这些合成的 constructor 叫 <strong>implicit nontrivial default constructor</strong>。不满足上面四种情况且没有声明任何 constructor 的 class， 他们的 constructor 叫 <strong>implicit trivial default constructor</strong>，编译不会为这些 class 合成 constructor。</p><p>在合成的 default constructor 中，只有 <strong>base class subojects</strong> 和 <strong>member class objects</strong> 会被初始化。所有其他的 nonstatic data member，如整数、整数指针、整数数组等都不会被初始化。</p></li></ul></li><li><p>和 default constructor 一样，如果 class 没有声明一个 copy constructor，编译器就会隐式的声明（implicitly declared）或隐式的定义（implicitly defined）一个。copy constructor 也分为 trivial 和 nontrivial 两种。只有 nontrivial 的实体才会被合成于程序中。决定一个 copy constructor 是否为 trivial 的标准在于 class 是否展现出所谓的“bitwise copy semantic”。</p></li><li><p>四种情况下，class 不展现出“bitwise copy semantic”。</p><ul><li><p>当 class 内含一个 member object 而后者的 class 声明中有一个 copy constructor。</p></li><li><p>当 class 继承自一个 base class 而后者存在有一个 copy constructor 时（不能是被明确声明或是被合成而得）。</p></li><li><p>当 class 声明一个或多个 virtual functions 时。</p></li><li><p>当 class 派生自一个继承串链，其中有一个或多个 virtual base classes 时。</p></li></ul></li></ol><h2 id="三、Data-语意学"><a href="#三、Data-语意学" class="headerlink" title="三、Data 语意学"></a>三、Data 语意学</h2><ol><li><p>上古时期，下面代码中，类A的成员函数返回的是全局x，而不是成员变量x。这个问题已经修复了，现在总数返回成员变量x。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>下面的代码中，val_t的类型是使用全局的val_t的定义，即x，而不是类中声明的val_t，所以需注意。</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> val_t <span class="token operator">=</span> <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">FuncA</span><span class="token punctuation">(</span>val_t v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(val_t) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = sizeof(int) = 4</span>    <span class="token punctuation">}</span>    <span class="token keyword">using</span> val_t <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">FuncB</span><span class="token punctuation">(</span>val_t v<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(val_t) = %d\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// = sizeof(char) = 1</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    A a<span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">FuncA</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">FuncB</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> 运行结果</p> <pre class="line-numbers language-text" data-language="text"><code class="language-text">sizeof(val_t) = 4sizeof(val_t) = 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="四、Function-语意学"><a href="#四、Function-语意学" class="headerlink" title="四、Function 语意学"></a>四、Function 语意学</h2><h2 id="五、构造、解构、拷贝语意学"><a href="#五、构造、解构、拷贝语意学" class="headerlink" title="五、构造、解构、拷贝语意学"></a>五、构造、解构、拷贝语意学</h2><h2 id="六、执行期语意学"><a href="#六、执行期语意学" class="headerlink" title="六、执行期语意学"></a>六、执行期语意学</h2><h2 id="七、站在对象模型的尖端"><a href="#七、站在对象模型的尖端" class="headerlink" title="七、站在对象模型的尖端"></a>七、站在对象模型的尖端</h2>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++菱形继承内存布局分析</title>
      <link href="c-ling-xing-ji-cheng-nei-cun-bu-ju-fen-xi/"/>
      <url>c-ling-xing-ji-cheng-nei-cun-bu-ju-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编译环境"><a href="#一、编译环境" class="headerlink" title="一、编译环境"></a>一、编译环境</h2><ul><li>Visual Studio 2017</li><li>G++ (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0</li><li>Clang++ 6.0.0-1ubuntu2</li></ul><hr><h2 id="二、非虚继承"><a href="#二、非虚继承" class="headerlink" title="二、非虚继承"></a>二、非虚继承</h2><h3 id="2-1-测试代码"><a href="#2-1-测试代码" class="headerlink" title="2.1 测试代码"></a>2.1 测试代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// filename: nonvirtual.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">0x1111111111111111LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token number">0x2222222222222222LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">A</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">0x3333333333333333LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">0x4444444444444444LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    A a<span class="token punctuation">;</span>    B b<span class="token punctuation">;</span>    C c<span class="token punctuation">;</span>    D d<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(void*) = %zu\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a) = %zu, &amp;a = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b) = %zu, &amp;b = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %zu, &amp;c = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(d) = %zu, &amp;d = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-编译方式"><a href="#2-2-编译方式" class="headerlink" title="2.2 编译方式"></a>2.2 编译方式</h3><ul><li>vs2017</li></ul><blockquote><p>Debug x64</p></blockquote><ul><li>G++</li></ul><blockquote><p>g++ -std=c++11 -ggdb -o gcc-nv.out nonvirtual.cpp</p></blockquote><ul><li>Clang++</li></ul><blockquote><p>clang++ -std=c++11 -ggdb -o clang-nv.out nonvirtual.cpp</p></blockquote><h3 id="2-3-执行结果"><a href="#2-3-执行结果" class="headerlink" title="2.3 执行结果"></a>2.3 执行结果</h3><p><strong>3个编译环境下执行的结果都类似的。</strong></p><h4 id="2-3-1-VS2017"><a href="#2-3-1-VS2017" class="headerlink" title="2.3.1 VS2017"></a>2.3.1 VS2017</h4><ul><li>执行结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sizeof<span class="token punctuation">(</span>void*<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span>sizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">16</span>, <span class="token operator">&amp;</span>a <span class="token operator">=</span> 000000204193F818sizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span>, <span class="token operator">&amp;</span>b <span class="token operator">=</span> 000000204193F848sizeof<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span>, <span class="token operator">&amp;</span>c <span class="token operator">=</span> 000000204193F878sizeof<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">56</span>, <span class="token operator">&amp;</span>d <span class="token operator">=</span> 000000204193F8A8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类D的内存DUMP</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x000000204193F8A8  00007ff7c032b1e8 <span class="token number">1111111111111111</span> <span class="token number">2222222222222222</span> 00007ff7c032ae18 <span class="token number">1111111111111111</span> <span class="token number">3333333333333333</span>0x000000204193F8D8  <span class="token number">4444444444444444</span>0x00007FF7C032B1E8  00007ff7c0321302 00007ff7c03211b8 00007ff7c032105a0x00007FF7C032AE18  00007ff7c0321302 00007ff7c03212e4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-G"><a href="#2-3-2-G" class="headerlink" title="2.3.2 G++"></a>2.3.2 G++</h4><ul><li>执行结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sizeof<span class="token punctuation">(</span>void*<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span>sizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">16</span>, <span class="token operator">&amp;</span>a <span class="token operator">=</span> 0x7fffffffe350sizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span>, <span class="token operator">&amp;</span>b <span class="token operator">=</span> 0x7fffffffe360sizeof<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span>, <span class="token operator">&amp;</span>c <span class="token operator">=</span> 0x7fffffffe380sizeof<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">56</span>, <span class="token operator">&amp;</span>d <span class="token operator">=</span> 0x7fffffffe3a0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类D的内存DUMP</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x /7a <span class="token operator">&amp;</span>d0x7fffffffe3a0: 0x555555755ca8 <span class="token operator">&lt;</span>_ZTV1D+1<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>      0x11111111111111110x7fffffffe3b0: 0x2222222222222222      0x555555755cd0 <span class="token operator">&lt;</span>_ZTV1D+5<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>0x7fffffffe3c0: 0x1111111111111111      0x33333333333333330x7fffffffe3d0: 0x4444444444444444<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x /3a 0x555555755ca80x555555755ca8 <span class="token operator">&lt;</span>_ZTV1D+1<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:     0x555555554b96 <span class="token operator">&lt;</span>A::FA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>        0x555555554ba2 <span class="token operator">&lt;</span>B::FB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>0x555555755cb8 <span class="token operator">&lt;</span>_ZTV1D+3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>:     0x555555554bba <span class="token operator">&lt;</span>D::FD<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x /2a 0x555555755cd00x555555755cd0 <span class="token operator">&lt;</span>_ZTV1D+5<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:     0x555555554b96 <span class="token operator">&lt;</span>A::FA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>        0x555555554bae <span class="token operator">&lt;</span>C::FC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-3-Clang"><a href="#2-3-3-Clang" class="headerlink" title="2.3.3 Clang++"></a>2.3.3 Clang++</h4><ul><li>执行结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sizeof<span class="token punctuation">(</span>void*<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span>sizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">16</span>, <span class="token operator">&amp;</span>a <span class="token operator">=</span> 0x7fffffffe3c0sizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span>, <span class="token operator">&amp;</span>b <span class="token operator">=</span> 0x7fffffffe3a8sizeof<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">24</span>, <span class="token operator">&amp;</span>c <span class="token operator">=</span> 0x7fffffffe390sizeof<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">56</span>, <span class="token operator">&amp;</span>d <span class="token operator">=</span> 0x7fffffffe358<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类D的内存DUMP</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x /7a <span class="token operator">&amp;</span>d0x7fffffffe358: 0x400a88 <span class="token operator">&lt;</span>_ZTV1D+1<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>    0x11111111111111110x7fffffffe368: 0x2222222222222222      0x400ab0 <span class="token operator">&lt;</span>_ZTV1D+5<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>0x7fffffffe378: 0x1111111111111111      0x33333333333333330x7fffffffe388: 0x4444444444444444<span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x /3a 0x400a880x400a88 <span class="token operator">&lt;</span>_ZTV1D+1<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:   0x400880 <span class="token operator">&lt;</span>A::FA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>      0x400890 <span class="token operator">&lt;</span>B::FB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>0x400a98 <span class="token operator">&lt;</span>_ZTV1D+3<span class="token operator"><span class="token file-descriptor important">2</span>&gt;</span>:   0x4008b0 <span class="token operator">&lt;</span>D::FD<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>gdb<span class="token punctuation">)</span> x /2a 0x400ab00x400ab0 <span class="token operator">&lt;</span>_ZTV1D+5<span class="token operator"><span class="token file-descriptor important">6</span>&gt;</span>:   0x400880 <span class="token operator">&lt;</span>A::FA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>      0x4008a0 <span class="token operator">&lt;</span>C::FC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-类D的内存布局"><a href="#2-4-类D的内存布局" class="headerlink" title="2.4 类D的内存布局"></a>2.4 类D的内存布局</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">         D+----------------+|                || +------------+ || |            | |      +---------+| | +--------+ | |      |         || | | A.vptr+----------&gt;+ A::FA() || | | A::a   | | |      | B::FB() || | +--------+ | |      | D::FD() || |   B::b     | |      |         || +------------+ |      +---------+|                || +------------+ || |            | |      +---------+| | +--------+ | |      |         || | | A.vptr+----------&gt;+ A::FA() || | | A::a   | | |      | C::FC() || | +--------+ | |      |         || |   C::c     | |      +---------+| +------------+ ||                ||     D::d       ||                |+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="三、虚继承"><a href="#三、虚继承" class="headerlink" title="三、虚继承"></a>三、虚继承</h2><h3 id="3-1-测试代码"><a href="#3-1-测试代码" class="headerlink" title="3.1 测试代码"></a>3.1 测试代码</h3><p>与<a href="#二、非虚继承">非虚拟继承</a>的测试代码类似，只是将非虚拟继承改成了虚拟继承。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// filename: virtual.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">0x1111111111111111LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token number">0x2222222222222222LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token keyword">public</span> <span class="token class-name">A</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> c <span class="token operator">=</span> <span class="token number">0x3333333333333333LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">D</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token class-name">C</span></span><span class="token punctuation">{</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">FD</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> d <span class="token operator">=</span> <span class="token number">0x4444444444444444LL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    A a<span class="token punctuation">;</span>    B b<span class="token punctuation">;</span>    C c<span class="token punctuation">;</span>    D d<span class="token punctuation">;</span>    <span class="token keyword">auto</span> pba <span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>A<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> pda <span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>A<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> pdb <span class="token operator">=</span> <span class="token keyword">dynamic_cast</span><span class="token operator">&lt;</span>B<span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(void*) = %zu\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(a) = %zu, &amp;a = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(b) = %zu, &amp;b = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(c) = %zu, &amp;c = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(d) = %zu, &amp;d = %p\n"</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-编译方式"><a href="#3-2-编译方式" class="headerlink" title="3.2 编译方式"></a>3.2 编译方式</h3><ul><li>vs2017</li></ul><blockquote><p>Debug x64</p></blockquote><ul><li>G++</li></ul><blockquote><p>g++ -std=c++11 -ggdb -o gcc-v.out virtual.cpp</p></blockquote><ul><li>Clang++</li></ul><blockquote><p>clang++ -std=c++11 -ggdb -o clang-v.out virtual.cpp</p></blockquote><h3 id="3-3-执行结果"><a href="#3-3-执行结果" class="headerlink" title="3.3 执行结果"></a>3.3 执行结果</h3><p><strong>VS2017的执行结果与G++和Clang++不同。</strong></p><h4 id="3-3-1-VS2017"><a href="#3-3-1-VS2017" class="headerlink" title="3.3.1 VS2017"></a>3.3.1 VS2017</h4><ul><li>执行结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sizeof<span class="token punctuation">(</span>void*<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span>sizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">16</span>, <span class="token operator">&amp;</span>a <span class="token operator">=</span> 00000002F65FF658sizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">40</span>, <span class="token operator">&amp;</span>b <span class="token operator">=</span> 00000002F65FF688sizeof<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">40</span>, <span class="token operator">&amp;</span>c <span class="token operator">=</span> 00000002F65FF6C8sizeof<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">72</span>, <span class="token operator">&amp;</span>d <span class="token operator">=</span> 00000002F65FF710<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-1-1-对类B的分析"><a href="#3-3-1-1-对类B的分析" class="headerlink" title="3.3.1.1 对类B的分析"></a>3.3.1.1 对类B的分析</h5><ul><li>类B的内存DUMP</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x00000002F65FF688  00007ff6cd4eadb0 00007ff6cd4eb1e0 <span class="token number">2222222222222222</span> 00007ff6cd4eadc8 <span class="token number">1111111111111111</span>0x00007FF6CD4EADB0  00007ff6cd4e11b8 <span class="token operator">&lt;</span>B::FB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>0x00007FF6CD4EB1E0  fffffff8 000000100x00007FF6CD4EADC8  00007ff6cd4e1302 <span class="token operator">&lt;</span>A::FA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类B的内存分布</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">                        B                 +--------------+                 |              |+---------+      | +----------+ || B::FB() +&lt;--------+B.vptr   | |      +--------------------++---------+      | | B.offset+--------&gt;+ offset2ptr    = -8 |                 | | B::b     | |      | offset2A.vptr = 16 |                 | +----------+ |      +--------------------+                 |              |+---------+      | +----------+ || A::FA() +&lt;--------+A.vptr   | |+---------+      | | A::a     | |                 | +----------+ |                 |              |                 +--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-1-2-对类D的分析"><a href="#3-3-1-2-对类D的分析" class="headerlink" title="3.3.1.2 对类D的分析"></a>3.3.1.2 对类D的分析</h5><ul><li>类D的内存DUMP</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">0x00000002F65FF710  00007ff6cd4eb098 00007ff6cd4eac10 <span class="token number">2222222222222222</span> 00007ff6cd4eae70 00007ff6cd4eac18 <span class="token number">3333333333333333</span>0x00000002F65FF740  <span class="token number">4444444444444444</span> 00007ff6cd4eae90 <span class="token number">1111111111111111</span>0x00007FF6CD4EB098  00007ff6cd4e11b8 <span class="token operator">&lt;</span>B::FB<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> 00007ff6cd4e105a <span class="token operator">&lt;</span>D::FD<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>0x00007FF6CD4EAC10  fffffff8 00000030 fffffff8 000000180x00007FF6CD4EAE70  00007ff6cd4e12e4 <span class="token operator">&lt;</span>C::FC<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>0x00007FF6CD4EAC18  fffffff8 000000180x00007FF6CD4EAE90  00007ff6cd4e1302 <span class="token operator">&lt;</span>A::FA<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类D的内存布局</li></ul><blockquote><p>tips: offset中，offset2ptr的数据是没使用的。</p></blockquote><pre class="line-numbers language-text" data-language="text"><code class="language-text">                        D                 +--------------+                 |              |+---------+      | +----------+ || B::FB() +&lt;--------+B.vptr   | |      +--------------------+| D::FD() |      | | B.offset+--------&gt;+ offset2ptr    = -8 |+---------+      | | B::b     | |      | offset2A.vptr = 48 |                 | +----------+ |      | offset2vptr   = -8 |                 |              |      | offset2C.vptr = 24 |+---------+      | +----------+ |      +--------------------+| C::FC() +&lt;--------+C.vptr   | |      +--------------------++---------+      | | C.offset+--------&gt;+ offset2vptr   = -8 |                 | | C::c     | |      | offset2A.vptr = 24 |                 | +----------+ |      +--------------------+                 |              |                 |   D::d       |                 |              |+---------+      | +----------+ || A::FA() +&lt;--------+A.vptr   | |+---------+      | | A::a     | |                 | +----------+ |                 |              |                 +--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-2-G"><a href="#3-3-2-G" class="headerlink" title="3.3.2 G++"></a>3.3.2 G++</h4><ul><li>执行结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sizeof<span class="token punctuation">(</span>void*<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span>sizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">16</span>, <span class="token operator">&amp;</span>a <span class="token operator">=</span> 0x7fffffffe360sizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">32</span>, <span class="token operator">&amp;</span>b <span class="token operator">=</span> 0x7fffffffe370sizeof<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">32</span>, <span class="token operator">&amp;</span>c <span class="token operator">=</span> 0x7fffffffe390sizeof<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">56</span>, <span class="token operator">&amp;</span>d <span class="token operator">=</span> 0x7fffffffe3b0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-2-1-对类B的分析"><a href="#3-3-2-1-对类B的分析" class="headerlink" title="3.3.2.1 对类B的分析"></a>3.3.2.1 对类B的分析</h5><ul><li>类B的内存DUMP</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&gt;&gt;&gt; x /4a &amp;b0x7fffffffe370: 0x555555755cc8 &lt;_ZTV1B+24&gt;      0x22222222222222220x7fffffffe380: 0x555555755ce8 &lt;_ZTV1B+56&gt;      0x1111111111111111&gt;&gt;&gt; x /1a 0x555555755cc80x555555755cc8 &lt;_ZTV1B+24&gt;:     0x555555554dc4 &lt;B::FB()&gt;&gt;&gt;&gt; x /1a 0x555555755ce80x555555755ce8 &lt;_ZTV1B+56&gt;:     0x555555554db8 &lt;A::FA()&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类B的内存布局</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">       B+------------+|            || +--------+ |     +---------+| | B.vptr+-------&gt;+ B::FB() || | B::b   | |     +---------+| +--------+ || +--------| |     +---------+| | A.vptr+-------&gt;+ A::FA() || | A::a   | |     +---------+| +--------+ ||            |+------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-2-2-对类D的分析"><a href="#3-3-2-2-对类D的分析" class="headerlink" title="3.3.2.2 对类D的分析"></a>3.3.2.2 对类D的分析</h5><ul><li>类D的内存DUMP</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&gt;&gt;&gt; x /7a &amp;d0x7fffffffe3b0: 0x555555755b58 &lt;_ZTV1D+24&gt;      0x22222222222222220x7fffffffe3c0: 0x555555755b80 &lt;_ZTV1D+64&gt;      0x33333333333333330x7fffffffe3d0: 0x4444444444444444      0x555555755ba0 &lt;_ZTV1D+96&gt;0x7fffffffe3e0: 0x1111111111111111&gt;&gt;&gt; x /2a 0x555555755b580x555555755b58 &lt;_ZTV1D+24&gt;:     0x555555554dc4 &lt;B::FB()&gt;        0x555555554ddc &lt;D::FD()&gt;&gt;&gt;&gt; x /1a 0x555555755b800x555555755b80 &lt;_ZTV1D+64&gt;:     0x555555554dd0 &lt;C::FC()&gt;&gt;&gt;&gt; x /1a 0x555555755ba00x555555755ba0 &lt;_ZTV1D+96&gt;:     0x555555554db8 &lt;A::FA()&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类D的内存布局</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">         D+----------------+|                || +------------+ || |            | || | +--------+ | |      +---------+| | | B.vptr+----------&gt;+ B::FB() || | | B::b   | | |      | D::FD() || | +--------+ | |      +---------+| | +--------| | |      +---------+| | | C.vptr+----------&gt;+ C::FC() || | | C::c   | | |      +---------+| | +--------+ | || |            | || +------------+ ||                ||     D::d       ||                ||   +--------+   |      +---------+|   | A.vptr+----------&gt;+ A::FA() ||   | A::a   |   |      +---------+|   +--------+   ||                |+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-Clang"><a href="#3-3-3-Clang" class="headerlink" title="3.3.3 Clang++"></a>3.3.3 Clang++</h4><p>Clang++的结果和G++的一样。</p><ul><li>执行结果</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sizeof<span class="token punctuation">(</span>void*<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span>sizeof<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">16</span>, <span class="token operator">&amp;</span>a <span class="token operator">=</span> 0x7fffffffe3c0sizeof<span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">32</span>, <span class="token operator">&amp;</span>b <span class="token operator">=</span> 0x7fffffffe3a0sizeof<span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">32</span>, <span class="token operator">&amp;</span>c <span class="token operator">=</span> 0x7fffffffe380sizeof<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">56</span>, <span class="token operator">&amp;</span>d <span class="token operator">=</span> 0x7fffffffe348<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-3-1-对类B的分析"><a href="#3-3-3-1-对类B的分析" class="headerlink" title="3.3.3.1 对类B的分析"></a>3.3.3.1 对类B的分析</h5><ul><li>类B的内存DUMP</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&gt;&gt;&gt; x /4a &amp;b0x7fffffffe3a0: 0x400b60 &lt;_ZTV1B+24&gt;    0x22222222222222220x7fffffffe3b0: 0x400b80 &lt;_ZTV1B+56&gt;    0x1111111111111111&gt;&gt;&gt; x /1a 0x400b600x400b60 &lt;_ZTV1B+24&gt;:   0x400960 &lt;B::FB()&gt;&gt;&gt;&gt; x /1a 0x400b800x400b80 &lt;_ZTV1B+56&gt;:   0x400950 &lt;A::FA()&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类B的内存布局</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">       B+------------+|            || +--------+ |     +---------+| | B.vptr+-------&gt;+ B::FB() || | B::b   | |     +---------+| +--------+ || +--------| |     +---------+| | A.vptr+-------&gt;+ A::FA() || | A::a   | |     +---------+| +--------+ ||            |+------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-3-3-2-对类D的分析"><a href="#3-3-3-2-对类D的分析" class="headerlink" title="3.3.3.2 对类D的分析"></a>3.3.3.2 对类D的分析</h5><ul><li>类D的内存DUMP</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">&gt;&gt;&gt; x /7a &amp;d0x7fffffffe348: 0x400c60 &lt;_ZTV1D+24&gt;    0x22222222222222220x7fffffffe358: 0x400c88 &lt;_ZTV1D+64&gt;    0x33333333333333330x7fffffffe368: 0x4444444444444444      0x400ca8 &lt;_ZTV1D+96&gt;0x7fffffffe378: 0x1111111111111111&gt;&gt;&gt; x /2a 0x400c600x400c60 &lt;_ZTV1D+24&gt;:   0x400960 &lt;B::FB()&gt;      0x400a00 &lt;D::FD()&gt;&gt;&gt;&gt; x /1a 0x400c880x400c88 &lt;_ZTV1D+64&gt;:   0x400970 &lt;C::FC()&gt;&gt;&gt;&gt; x /1a 0x400ca80x400ca8 &lt;_ZTV1D+96&gt;:   0x400950 &lt;A::FA()&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>类D的内存布局</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">         D+----------------+|                || +------------+ || |            | || | +--------+ | |      +---------+| | | B.vptr+----------&gt;+ B::FB() || | | B::b   | | |      | D::FD() || | +--------+ | |      +---------+| | +--------| | |      +---------+| | | C.vptr+----------&gt;+ C::FC() || | | C::c   | | |      +---------+| | +--------+ | || |            | || +------------+ ||                ||     D::d       ||                ||   +--------+   |      +---------+|   | A.vptr+----------&gt;+ A::FA() ||   | A::a   |   |      +---------+|   +--------+   ||                |+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="四、分析结论"><a href="#四、分析结论" class="headerlink" title="四、分析结论"></a>四、分析结论</h2><h3 id="4-1-菱形非虚继承时-VS2017-、-G-7-5-和-Clang-6-编译生成的类的内存布局相同"><a href="#4-1-菱形非虚继承时-VS2017-、-G-7-5-和-Clang-6-编译生成的类的内存布局相同" class="headerlink" title="4.1 菱形非虚继承时 VS2017 、 G++ 7.5 和 Clang++ 6 编译生成的类的内存布局相同"></a>4.1 菱形非虚继承时 VS2017 、 G++ 7.5 和 Clang++ 6 编译生成的类的内存布局相同</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">+----------------+|                || +------------+ || |            | |      +---------+| | +--------+ | |      |         || | | A.vptr+----------&gt;+ A::FA() || | | A::a   | | |      | B::FB() || | +--------+ | |      | D::FD() || |   B::b     | |      |         || +------------+ |      +---------+|                || +------------+ || |            | |      +---------+| | +--------+ | |      |         || | | A.vptr+----------&gt;+ A::FA() || | | A::a   | | |      | C::FC() || | +--------+ | |      |         || |   C::c     | |      +---------+| +------------+ ||                ||     D::d       ||                |+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-菱形虚拟继承时-VS2017-编译生成类的内存布局与-G-7-5-和-Clang-6-的结果不同"><a href="#4-2-菱形虚拟继承时-VS2017-编译生成类的内存布局与-G-7-5-和-Clang-6-的结果不同" class="headerlink" title="4.2 菱形虚拟继承时 VS2017 编译生成类的内存布局与 G++ 7.5 和 Clang++ 6 的结果不同"></a>4.2 菱形虚拟继承时 VS2017 编译生成类的内存布局与 G++ 7.5 和 Clang++ 6 的结果不同</h3><ul><li>VS2017生成的类的内存布局：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">                        D                 +--------------+                 |              |+---------+      | +----------+ || B::FB() +&lt;--------+B.vptr   | |      +--------------------+| D::FD() |      | | B.offset+--------&gt;+ offset2ptr    = -8 |+---------+      | | B::b     | |      | offset2A.vptr = 48 |                 | +----------+ |      | offset2vptr   = -8 |                 |              |      | offset2C.vptr = 24 |+---------+      | +----------+ |      +--------------------+| C::FC() +&lt;--------+C.vptr   | |      +--------------------++---------+      | | C.offset+--------&gt;+ offset2vptr   = -8 |                 | | C::c     | |      | offset2A.vptr = 24 |                 | +----------+ |      +--------------------+                 |              |                 |   D::d       |                 |              |+---------+      | +----------+ || A::FA() +&lt;--------+A.vptr   | |+---------+      | | A::a     | |                 | +----------+ |                 |              |                 +--------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>G++ 7.5 和 Clang++ 6 生成的类的内存布局相同：</li></ul><pre class="line-numbers language-text" data-language="text"><code class="language-text">         D+----------------+|                || +------------+ || |            | || | +--------+ | |      +---------+| | | B.vptr+----------&gt;+ B::FB() || | | B::b   | | |      | D::FD() || | +--------+ | |      +---------+| | +--------| | |      +---------+| | | C.vptr+----------&gt;+ C::FC() || | | C::c   | | |      +---------+| | +--------+ | || |            | || +------------+ ||                ||     D::d       ||                ||   +--------+   |      +---------+|   | A.vptr+----------&gt;+ A::FA() ||   | A::a   |   |      +---------+|   +--------+   ||                |+----------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《左耳听风》学习笔记</title>
      <link href="zuo-er-ting-feng-xue-xi-bi-ji/"/>
      <url>zuo-er-ting-feng-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、程序员如何用技术变现"><a href="#一、程序员如何用技术变现" class="headerlink" title="一、程序员如何用技术变现"></a>一、程序员如何用技术变现</h2><h3 id="（一）一些学习经验"><a href="#（一）一些学习经验" class="headerlink" title="（一）一些学习经验"></a>（一）一些学习经验</h3><ol><li>要去经历大多数人经历不到的，要把学习时间花在那些比较难的地方。</li><li>要写文章就要写没有人写过的，或是别人写过，但我能写得更好的。</li><li>更重要的是，技术和知识完全是可以变现的。</li></ol><h3 id="（二）如何保持竞争力"><a href="#（二）如何保持竞争力" class="headerlink" title="（二）如何保持竞争力"></a>（二）如何保持竞争力</h3><p>一个是技术和技能的领先，二是对技术本质和趋势的敏感度。</p><h3 id="（三）如何让自己的技能变现"><a href="#（三）如何让自己的技能变现" class="headerlink" title="（三）如何让自己的技能变现"></a>（三）如何让自己的技能变现</h3><h4 id="1-千里之行，积于跬步"><a href="#1-千里之行，积于跬步" class="headerlink" title="1.千里之行，积于跬步"></a>1.千里之行，积于跬步</h4><p>掌握大多数人不能掌握的技能或技术，需要你更多地学习，并要有更多的别人没有的经验和经历。</p><h4 id="2-关注有价值的东西"><a href="#2-关注有价值的东西" class="headerlink" title="2.关注有价值的东西"></a>2.关注有价值的东西</h4><ul><li>关于市场需求。你要看清市场，就需要看看各个公司都在做什么，他们的难题是什么。</li><li>关于技术趋势。要看一个新的技术是否顺应技术发展趋势，你需要将一些老技术的本质吃得很透。</li></ul><p>因此，在学习技术的过程一定要多问自己两个问题：</p><ul><li>一，这个技术解决什么问题？为什么别的同类技术做不到？</li><li>二，为什么是这样解决的？有没有更好的方式？</li></ul><p>另外，还有一个简单的判断方法，如果一个新的技术顺应技术发展趋势，那么在这个新的技术出现时，后面一定会有大型的商业公司支持，这类公司支持得越多，就说明你越需要关注。</p><h4 id="3-找到能体现价值的地方"><a href="#3-找到能体现价值的地方" class="headerlink" title="3.找到能体现价值的地方"></a>3.找到能体现价值的地方</h4><ul><li>在一家高速发展的公司中，技术人员的价值可以达到最大化。</li><li>在一家大公司中，技术架构和业务已经定型，基本上没有什么太多的事可以做的。而且对于已经发展起来的大公司来说，往往稳定的重要性超过了创新。</li><li>而刚起步的公司，业务还没有跑顺，公司的主要精力会放在业务拓展上，这个时候也不太需要高精尖的技术，所以，技术人员的价值也体现不出来。</li><li>比较好的成长路径是，先进入大公司学习大公司的技术和成功的经验方法，然后再找到高速成长的公司，这样你就可以实现自己更多的价值。</li></ul><h4 id="4-动手能力很重要"><a href="#4-动手能力很重要" class="headerlink" title="4.动手能力很重要"></a>4.动手能力很重要</h4><ul><li>在解决任何一个具体问题的时候，有没有动手能力就成为了关键。</li><li>代码里全是细节，细节是魔鬼，只有了解了细节，你才能提出更好或是更靠谱、可以落地的解决方案。而不是一些笼统和模糊的东西。</li></ul><h4 id="5-关注技术付费点"><a href="#5-关注技术付费点" class="headerlink" title="5.关注技术付费点"></a>5.关注技术付费点</h4><p>技术付费点基本体现在两个地方:</p><ul><li>能帮别人“挣钱”的地方；</li><li>能帮别人“省钱”的地方。</li></ul><h4 id="6-提升自己的能力和经历"><a href="#6-提升自己的能力和经历" class="headerlink" title="6.提升自己的能力和经历"></a>6.提升自己的能力和经历</h4><ul><li>参与知名的开源项目。</li><li>成为公司核心项目的开发人员。</li></ul><h4 id="7-找到有价值的信息源"><a href="#7-找到有价值的信息源" class="headerlink" title="7.找到有价值的信息源"></a>7.找到有价值的信息源</h4><ul><li>如果你的信息来自朋友圈、微博、知乎、百度或是今日头条，那么我觉得你完蛋了。这些渠道有价值的信息不多。</li><li>用好 Google，比如你在 Google 搜索引擎里输入 “XXX Best Practice”，或是 “Best programming resource”……你就会找到很多。</li></ul><h4 id="8-输出观点和价值观"><a href="#8-输出观点和价值观" class="headerlink" title="8.输出观点和价值观"></a>8.输出观点和价值观</h4><h4 id="9-朋友圈很重要"><a href="#9-朋友圈很重要" class="headerlink" title="9.朋友圈很重要"></a>9.朋友圈很重要</h4><p>优质的朋友圈基本上都有这样的特性：</p><ul><li>这些人都比较有想法、有观点，经验也比较丰富；</li><li>这些人涉猎的面比较广；</li><li>这些人都有或多或少的成功；</li><li>这些人都是喜欢折腾喜欢搞事的人；</li><li>这些人都对现状有些不满，并想做一些改变；</li><li>这些人都有一定的影响力。</li></ul><p>最后有个关键的问题是，物以类聚，人以群分。如果你不做到这些，你怎么能进入到这样的朋友圈呢？</p><p>总之，就一句话，<strong>会挣钱的人一定是会投资的人。我一直认为，最宝贵的财富并不是钱，而是你的时间，时间比钱更宝贵，因为钱你不用还在那里，而时间你不用就浪费掉了。你把你的时间投资在哪些地方，就意味着你未来会走什么样的路。所以，利用好你的时间，投到一些有意义的地方吧。</strong></p><h3 id="（四）如何技术变现套路总结-来自评论"><a href="#（四）如何技术变现套路总结-来自评论" class="headerlink" title="（四）如何技术变现套路总结(来自评论)"></a>（四）如何技术变现套路总结(来自评论)</h3><ol><li>程序员用手艺、技术养活自己，不依靠公司；</li><li>提高工作效率，去研究那些难的，公司内外的核心技术；</li><li>注重输出，输出技术、价值观，帮助更多的人，提高影响力。</li></ol><hr><h2 id="二、何为技术领导力"><a href="#二、何为技术领导力" class="headerlink" title="二、何为技术领导力"></a>二、何为技术领导力</h2><h3 id="（一）人类社会的发展阶段"><a href="#（一）人类社会的发展阶段" class="headerlink" title="（一）人类社会的发展阶段"></a>（一）人类社会的发展阶段</h3><ol><li>野蛮开采。这个阶段的主要特点是资源过多，只需要开采就好了。</li><li>资源整合。在这个阶段，资源已经被不同的人给占有了，但是需要对资源整合优化，提高利用率。这时通过管理手段就能实现。</li><li>精耕细作。这个阶段基本上是对第二阶段的精细化运作，并且通过科学的手段来达到。</li><li>发明创造。在这个阶段，人们利用已有不足的资源来创造更好的资源，并替代已有的马上要枯竭的资源。这就需要采用高科技来达到了。</li></ol><p>这也是为什么像亚马逊、Facebook 这样的公司，最终都会去发展自己的核心技术，提高自己的技术领导力，从早期的业务型公司转变成为技术型公司的原因。那些本来技术很好的公司，比如雅虎、百度，在发展到一定程度时，将自己定位成了一个广告公司，然后开始变味、走下坡路。</p><h3 id="（二）几次工业革命改变本质"><a href="#（二）几次工业革命改变本质" class="headerlink" title="（二）几次工业革命改变本质"></a>（二）几次工业革命改变本质</h3><ol><li>关键技术。蒸汽机、电、化工、原子能、炼钢、计算机，如果只看这些东西的话，似乎没什么用。但这些核心技术的突破，可以让我们建造很多更牛的工具，而这些工具能让人类干出以前干不出来的事。</li><li>自动化。这其中最重要的事就是自动化。三次革命中最重要的事就是用机器来自动化。通信、交通、军事、教育、金融等各个领域都是在拼命地自动化，以提高效率——用更低的成本来完成更多的事。</li><li>解放生产力。把人从劳动密集型的工作中解放出来，去做更高层次的知识密集型的工作。说得难听一点，就是取代人类，让人失业。值得注意的是，今天的 AI 在开始取代人类的知识密集型的工作……</li></ol><h3 id="（三）技术领导力"><a href="#（三）技术领导力" class="headerlink" title="（三）技术领导力"></a>（三）技术领导力</h3><p>回顾几次工业革命改变本质，我们可以看到的技术领导力是：</p><ul><li>尊重技术，追求核心基础技术。</li><li>追逐自动化的高效率的工具和技术，同时避免无效率的组织架构和管理。</li><li>解放生产力，追逐人效的提高。开发抽象和高质量的可以重用的技术组件。</li><li>坚持高于社会主流的技术标准和要求。</li></ul><h3 id="（四）如何拥有技术领导力"><a href="#（四）如何拥有技术领导力" class="headerlink" title="（四）如何拥有技术领导力"></a>（四）如何拥有技术领导力</h3><p>作为一个软件工程师怎样才算是拥有“技术领导力”：</p><ul><li>能够发现问题。能够发现现有方案的问题。</li><li>能够提供解决问题的思路和方案，并能比较这些方案的优缺点。</li><li>能够做出正确的技术决定。用什么样的技术、什么解决方案、怎样实现来完成一个项目。</li><li>能够用更优雅，更简单，更容易的方式来解决问题。</li><li>能够提高代码或软件的扩展性、重用性和可维护性。</li><li>能够用正确的方式管理团队。所谓正确的方式，一方面是，让正确的人做正确的事，并发挥每个人的潜力；另一方面是，可以提高团队的生产力和人效，找到最有价值的需求，用最少的成本实现之。并且，可以不断地提高自身和团队的标准。</li><li>创新能力。能够使用新的方法新的方式解决问题，追逐新的工具和技术。</li></ul><p>总结一下，就是：</p><ul><li>扎实的基础技术；</li><li>非同一般的学习能力；</li><li>坚持做正确的事；</li><li>不断提高对自己的要求标准；</li></ul><hr><h2 id="三、如何才能拥有技术领导力"><a href="#三、如何才能拥有技术领导力" class="headerlink" title="三、如何才能拥有技术领导力"></a>三、如何才能拥有技术领导力</h2><h3 id="（一）、吃透基础技术"><a href="#（一）、吃透基础技术" class="headerlink" title="（一）、吃透基础技术"></a>（一）、吃透基础技术</h3><p>基础技术是各种上层技术共同的基础。吃透基础技术是为了更好地理解程序的运行原理，并基于这些基础技术进化出更优化的产品。</p><p>基础技术主要分成两个部分：编程和系统。</p><p>编程部分</p><ul><li>C语言</li><li>编程范式</li><li>算法和数据结构</li></ul><p>系统部分</p><ul><li>计算机系统原理</li><li>操作系统原理和基础</li><li>网络基础</li><li>数据库原理</li><li>分布式技术架构</li></ul><h3 id="（二）、提高学习能力"><a href="#（二）、提高学习能力" class="headerlink" title="（二）、提高学习能力"></a>（二）、提高学习能力</h3><p>所谓学习能力，就是能够很快地学习新技术，又能在关键技术上深入的能力。只有在掌握了上述的基础原理之上，你才能拥有好的学习能力。如何提高呢？</p><ul><li>学习的信息源。信息源很重要，有好的信息源就可以更快速地获取有价值的信息，并提升学习效率。常见的信息源有 Google 等搜索引擎，Stack Overflow、Quora 等社区，图书，API 文档，论文和博客等。</li><li>与高手交流。程序员可以通过技术社区以及参加技术会议与高手交流，也可以通过参加开源项目来和高手切磋。</li><li>举一反三的思考。比如，了解了操作系统的缓存和网页缓存以后，你要思考其相同点和不同点。</li><li>不怕困难的态度。</li><li>开放的心态。实现一个目的通常有多种办法。带有开放的心态，不拘泥于一个平台、一种语言，往往能带来更多思考，也能得到更好的结果。而且，能在不同的方法和方案间做比较，比较它们的优缺点，那么你会知道在什么样的场景下用什么样的方案，你就会比一般人能够有更全面和更完整的思路。</li></ul><h3 id="（三）、坚持做正确的事"><a href="#（三）、坚持做正确的事" class="headerlink" title="（三）、坚持做正确的事"></a>（三）、坚持做正确的事</h3><p>做正确的事，比用正确的方式做事更重要，因为这样才始终会向目的地靠拢。哪些是正确的事呢？</p><ul><li>提高效率的事。你要学习和掌握良好的时间管理方式，管理好自己的时间，能显著提高自己的效率。</li><li>自动化的事。程序员要充分利用自己的职业特质，当看见有可以自动化的步骤时，编写程序来自动化操作，可以显著提高效率。</li><li>掌握前沿技术的事。掌握前沿的技术，有利于拓展自己的眼界，也有利于找到更好的工作。需要注意的是，有些技术虽然当下很火，但未必前沿，而是因为它比较易学易用，或者性价比高。由于学习一门技术需要花费不少时间，你应该选择自己最感兴趣的，有的放矢地去学习。</li><li>知识密集型的事。知识密集型是相对于劳动密集型来说的。基本上，劳动密集型的事都能通过程序和机器来完成，而知识密集型的事却仍需要人来完成，所以人的价值此时就显现出来了。</li><li>技术驱动的事。不仅是指用程序驱动的事，而且还包括一切技术改变生活的事。比如自动驾驶、火星登陆等。就算自己一时用不着，你也要了解这些，以便将来这些技术来临时能适应它们。</li></ul><h4 id="（四）、高标准要求自己"><a href="#（四）、高标准要求自己" class="headerlink" title="（四）、高标准要求自己"></a>（四）、高标准要求自己</h4><p>只有不断地提高标准，你才可能越走越高，所以，要以高标准要求自己，不断地反思、总结和审视自己，才能够提升自己。</p><ul><li>Google 的自我评分卡。</li><li>敏锐的技术嗅觉。这是一个相对综合的能力，你需要充分利用信息源，GET 到新的技术动态，并通过参与技术社区的讨论，丰富自己了解技术的角度。</li><li>强调实践，学以致用。学习知识，一定要实际用一用，可以是工作中的项目，也可以是自己的项目，不仅有利于吸收理解，更有利于深入到技术的本质。并可以与现有技术对比一下，同样的问题，用新技术解决有什么不同，带来了哪些优势，还有哪些有待改进的地方。</li><li>Lead by Example。永远在编程。不写代码，你就对技术细节不敏感，你无法做出可以实践的技术决策和方案。</li></ul><hr><h2 id="四、如何成为一个大家愿意追随的-Leader"><a href="#四、如何成为一个大家愿意追随的-Leader" class="headerlink" title="四、如何成为一个大家愿意追随的 Leader"></a>四、如何成为一个大家愿意追随的 Leader</h2><h3 id="（一）、Leader-和-Boss-的不同"><a href="#（一）、Leader-和-Boss-的不同" class="headerlink" title="（一）、Leader 和 Boss 的不同"></a>（一）、Leader 和 Boss 的不同</h3><p>再或者用通俗的话说，Leader 是大家跟我一起上，而 Boss 则是大家给我上，一个在团队的前面，一个在团队的后面。</p><p>具体来说，这两者的不同点如下：</p><ul><li><p>Boss 是驱动员工，Leader 是指导员工。</p><p>  在面对项目的时候，Boss 制定时间计划，并且推动（push）和鞭策员工完成工作，而 Leader 则是和员工一起讨论工作细节，指导员工关注工作的重点，和员工一起规划出（work out）工作的方向和计划，并且在工作中和员工一起解决细节难题，帮助员工完成工作。</p></li><li><p>Boss制造畏惧，Leader制造热情。</p><p>  Boss 在工作中是用工作职位级别压人，用你的绩效考核来制造威慑，让员工畏惧他，从而推行工作。而 Leader 是通过描绘远景，制造激动人心的目标来鼓舞和触发团队的热情和斗志。</p></li><li><p>Boss面对错误喜欢使用人事惩罚的手段，而Leader面对错误喜欢寻找解决问题的技术或管理方法。</p><p>  惩罚员工和解决问题完全是两码事，Boss因为并不懂技术也并不懂问题的细节，所以他们只能使用惩罚这样的手段，而Leader通常是喜欢解决问题的技术型人才，所以，他们会深入技术细节，从技术上找到既治标又治本的技术方案或管理方式。</p></li><li><p>Boss 只是知道怎么做，而 Leader 则是展示怎么做。</p><p>  一个好 Leader 的最大特点就是 Lead by Example，以身作则，用身教而不是言传。而 Boss 只是在说教，总是在大道理上说的一套又一套，但从来不管技术细节。</p></li><li><p>Boss 是用人，而 Leader 是发展人。</p><p>  Boss 不关心人的发展，把人当成劳动力。而 Leader 则会看到人的潜力和特长，通过授权、指导和给员工制定成长计划让员工成长，从而发展员工。所以，我们通常可以看到 Boss 总是说自己的员工有这个问题有那个问题，而 Leader 总是说，如何让员工成长以解决员工个人的各种问题。</p></li><li><p>Boss 从团队收割成绩，而 Leader 则是给予团队成绩。</p><p>  Boss 通常都会把团队的成绩占为己有，虽然 Boss 会说这是团队的功劳，但基本上是一句带过。而 Leader 则是让团队成功，让团队的成员站在台前，自己甘当绿叶和铺路石。Leader 知道只有团队的每个人成功了，团队才会成功，所以，Leader 会帮助团队中的每个人更好更流畅地走向成功。</p></li><li><p>Boss 喜欢命令和控制（ Command + Control ），而 Leader 喜欢沟通和协作（ Communication + Cooperation ）。</p><p>  Boss 喜欢通过命令来控制员工的行为，从而实现团队的有效运转，而 Leader 喜欢通过沟通和协作来增加员工的参与感，从而让员工觉得这是自己的事，愿意为之付出。</p></li><li><p>Boss 喜欢说“给我上”，而 Leader 喜欢说“跟我上”。</p><p>  Boss 总是躲在团队后面，让团队冲锋陷阵，而 Leader 总是冲在前面用自己的行动领着团队浴血奋战。</p></li></ul><h3 id="（二）、如何成为众人愿意追随的-Leader"><a href="#（二）、如何成为众人愿意追随的-Leader" class="headerlink" title="（二）、如何成为众人愿意追随的 Leader"></a>（二）、如何成为众人愿意追随的 Leader</h3><ul><li><p>帮人解决问题。</p><p>  团队或身边大多数人都在问：“这个问题怎么办？”，而你总是能站出来告诉大家该怎么办。</p></li><li><p>被人依赖。</p><p>  团队或身边大多数人在做比较关键的决定时，都会来找你咨询意见和想法。</p></li></ul><p>要有能够做到上面的要求，你需要有技术领导力。有没有技术领导力（Leadership），是成为一个 Leader 非常关键的因素。因为人们想要跟随的人通常都是比自己强比自己出色的人，或是能够跟他学到东西，能够跟他成长的人。</p><p>但是，有了技术领导力可能并不够，下面是我罗列的一些比较关键的除了技术领导力之外的一个 Leader 需要的素质：</p><ul><li><p>赢得他人的信任。</p><p>  对于信任来说，并不完全是别人相信你能做到某个事，还有别人愿意向你打开心扉，和你说他心里面最柔软的东西。而后者才是真正的信任。</p></li><li><p>开放的心态 + 倾向性的价值观。</p><ol><li><p>对于新生事物要有开放的心态，对于每个人的观点都有开放的心态，但并不是要认同所有的观点和事情，成为一个油腔滑调的人。</p></li><li><p>就价值观来说，还是需要有倾向性的，比如，我就倾向于不加班的文化，倾向于全栈，倾向于按职责分工而不是按技能分工，倾向于做一个 Leader 而不是 Boss，倾向于技术是第一生产力，倾向于 OKR 而不是 KPI……</p></li></ol></li></ul><p>我的这些倾向性可以让别人更清楚地知道我是一个什么样的人，而不会对我琢磨不透，一会东一会西只会让人觉得你太油了，反而会产生距离感和厌恶感。我认为，倾向性的价值观是别人是否可以跟随你的一个基础。</p><ul><li><p>Lead by Example。</p><ol><li>用自己的行为来向大家展示你的 Leadership。这就是说，你需要给大家做示范。很多时候，道理人人都知道，但未必人人都会做，知易行难，以身示范，一个示例会比讲一万遍道理都管用。</li><li>所以我认为，对于软件开发来说，不写代码的架构师是根本不靠谱的。要做一个有人愿意跟随的技术 Leader，你需要终身写代码，也就是所谓的 ABC – Always Be Coding。这样，你会得到更多的实际经验，能够非常明白一个技术方案的优缺点，实现复杂度，知道什么是 Best Practice，你的方案才会更具执行力和实践性。当有了执行力，你就会获得更多的成就，而这些成就反过来会让更多的人来跟随你。</li></ol></li><li><p>能够抓住重点，看透事物的本质。</p><p>  作为一个 Leader，能够抓住主要矛盾，看清事物的本质，给出清楚的观点或方向，简化复杂的事情，传道解惑、开启民智，让人豁然开朗、醍醐灌顶，才会让人追随之。</p></li><li><p>描绘令人激动的方向，提供令人向住的环境。</p><p>  一个好的 Leader 一定会把每个人心中最真善美的东西呼唤出来，并且还能让人相信这是有机会有可能做到的。</p></li><li><p>甘当铺路石，为他人创造机会。</p><p>  别人愿意跟随你，愿意和你共事，有一部分原因是你能够给别人带来更多的可能性和机会，别人觉得和你在一起能够成长，能够进步，你能够带着大家到达更远的地方。帮助别人其实就是帮助自己，成就他人其实也是在成就自己，这就像一个好的足球队一样，球队中的人都互相给队友创造机会，整个团队成功了，球队的每个人也就成功了。作为一个好的 Leader，你一定要在团队中创造好这样的文化和风气。</p></li></ul><hr><h2 id="五、时间管理：同扭曲时间的事儿抗争"><a href="#五、时间管理：同扭曲时间的事儿抗争" class="headerlink" title="五、时间管理：同扭曲时间的事儿抗争"></a>五、时间管理：同扭曲时间的事儿抗争</h2><h3 id="（一）、主动管理"><a href="#（一）、主动管理" class="headerlink" title="（一）、主动管理"></a>（一）、主动管理</h3><p>无论什么事情，如果你发现你持续处于被动的状态下，那么你一定要停下来想一想如何把被动变为主动。因为在被动的方式下工作，你是不可能做好工作的，无论什么事。</p><p><strong>你要主动管理的不是你的时间，而是管理你的同事，管理你的信息。</strong></p><h3 id="（二）、学会说“不”"><a href="#（二）、学会说“不”" class="headerlink" title="（二）、学会说“不”"></a>（二）、学会说“不”</h3><ul><li><p>当你面对做不到的需求时，你不要说这个需求做不到，尤其是，你不要马上说做不到。</p><p>  你要先想一下，这样让别人觉得你是想做的，但是，在认真思考过后，你觉得做不到，并且给出一个你觉得能做到的方案。这里的诀窍是——<strong>给出另一个你可以做到的方案，而不是把对方的方案直接回绝掉。</strong></p></li><li><p>当你面对过于复杂的需求时，你不要说不。</p><p>  你要反问一下，为什么要这样做？这样做的目的是什么？当了解完目的以后，你可以给出一个自己的方案，或是和对方讨论一个性价比更好的方案。你可以回复说，这个需求好复杂，我们能不能先干这个，再做那个，这样会更经济一些。这里的诀窍是——<strong>我不说我不能完全满足你，但我说我可以部分满足你。</strong></p></li><li><p>当你面对时间完全不够的需求时，你也不要说不。</p><p>  既然对方把压力给你，你要想办法把这个压力还回去，或是让对方来和你一同分担这个压力。</p></li></ul><p>惯用的方式是给回三个选择：</p><ul><li>我可以加班加点完成，但是我不保证好的质量，有 bug 你得认，而且事后你要给我 1 个月的时间还债。</li><li>我可以加班加点，还能保证质量，但我没办法完成这么多需求，能不能减少一些？</li><li>我可以保质保量地完成所有的需求，但是，能不能多给我 2 周时间？</li></ul><h3 id="（三）、加班和开会"><a href="#（三）、加班和开会" class="headerlink" title="（三）、加班和开会"></a>（三）、加班和开会</h3><p><strong>如果怎么做都要受伤害，那么两害相权取其轻</strong>。你要学会比较是项目延期的伤害大，还是线上故障的伤害大，是先苦后甜好，还是积压问题好，聪明的你应该能做出正确的判断。</p><p><strong>开会，不是讨论问题，而是讨论方案，开会不是要有议题，而是要有议案。</strong></p><hr><h2 id="六、时间管理：如何利用好自己的时间"><a href="#六、时间管理：如何利用好自己的时间" class="headerlink" title="六、时间管理：如何利用好自己的时间"></a>六、时间管理：如何利用好自己的时间</h2><h3 id="（一）、投资自己的时间"><a href="#（一）、投资自己的时间" class="headerlink" title="（一）、投资自己的时间"></a>（一）、投资自己的时间</h3><ul><li><p>花时间学习基础知识，花时间读文档。</p><p>  系统地学习一门技术是非常关键的，所以这个时间是值得投资的。</p></li><li><p>花时间在解放自己生产力的事上。</p><p>  在自动化、可配置、可重用、可扩展上要多花时间。花时间在解放自己的事上是最有意义的了。</p></li><li><p>花时间在让自己成长的事上。</p><p>  注意，晋升并不代表成长，成长不应该只看在一个公司内，而是要看在行业内，在行业内的成长才是真正的成长。所以，把时间花在能让自己成长，能让自己有更强的竞争力，能让自己有更大的视野，能让自己有更多可能性的事情上。</p></li><li><p>花时间在建立高效的环境上。</p><p>  不仅仅是工具上，花些时间在影响你身边的人上，比如你的同事，你的产品经理，你的老板，去影响他们，让他们理解你，让他们配合你来建立更好的流程和管理方法。在这个方向上花时间也是很值得的。</p></li></ul><h3 id="（二）、规划自己的时间"><a href="#（二）、规划自己的时间" class="headerlink" title="（二）、规划自己的时间"></a>（二）、规划自己的时间</h3><ul><li><p>定义好优先级。</p><p>  无论你写不写出来，你一定都会有一个自己的 to-do list。知道什么事是重要的，什么事是紧急的，什么事重要但不紧急，什么事又重要又紧急。这有利于你划分优先级。</p></li><li><p>最短作业优先。</p><p>  对于相同优先级的事，我个人喜欢的是“最短作业优先”的调度算法。</p></li><li><p>想清楚再做。</p><p>  对于一些没想清楚的事，或是自己不太有信心的事，还是先看看有没有已有的成熟解决方案，或是找更牛的人来给你把把关，帮你出出主意，看看有没有更好、更简单的方式。</p></li><li><p>关注长期利益规划。</p><p>  要多关注长远可以节省多少时间，而不是当前会花费多少时间。长期成本会比短期成本大得多。所以，宁可在短期延期，也不要透支未来。这里的逻辑是，工作上的事你永远也做不完的，长痛不如短痛。</p></li></ul><p><strong>你要学会规划自己的行动计划，不是短期的，而是一个中长期的。我个人建议是按季度来规划，这个季度做什么，达到什么目标，一年往前走四步，而不是只考虑眼下。</strong></p><h3 id="（三）、用好自己的时间"><a href="#（三）、用好自己的时间" class="headerlink" title="（三）、用好自己的时间"></a>（三）、用好自己的时间</h3><ul><li><p><strong>将军赶路不追小兔</strong>。</p><p>  能专注地把时间投入到一个有价值的事上是非常重要的。确定自己的目标，专注达到这个目标，而不是分心。将军的目标是要攻城，而不是追兔子。所以，你要学会过滤掉与自己目标无关的事，不要让那些无关的事控制自己。</p></li><li><p>形成习惯。</p><p>  在讲述完如何争取时间，及如何使用时间之后，我想分享一下如何将这些时间管理方法形成习惯，因为我坚信：<strong>“做”比“做好”更重要</strong>。养成一个好习惯通常需要 30 天左右的时间，尤其在最初的几天就更为重要了。这时，不妨将文章中提到的方法和几个要点，写在某本书或者笔记本的扉页上，方便查看，时刻提醒自己。</p></li><li><p>形成正反馈。</p><p>  要有正反馈，也就是成就感，有助于完成一些看似难以完成的事儿。比如，我们说过，学习是逆人性的事儿，但如果在学习过程中不断地有正反馈，就更利于我们坚持下去。要让自己有正反馈，那就需要把时间花在有价值的地方，比如，解决自己和他人的痛点，这样你会收获别人的赞扬和鼓励。</p></li><li><p>反思和举一反三。</p><p>  可以尝试每周末花上点时间思考一下，本周做了哪些事儿？时间安排是否合理？还有哪些可以优化提高的地方？有点儿类似于我们常说的“复盘”。然后思考一下，下周的主要任务是什么？并根据优先级规划一下完成这些任务的顺序，也就是做一些下周的工作规划。</p></li></ul><hr><h2 id="七、程序员面试攻略：面试前的准备"><a href="#七、程序员面试攻略：面试前的准备" class="headerlink" title="七、程序员面试攻略：面试前的准备"></a>七、程序员面试攻略：面试前的准备</h2><h3 id="（一）、怎样写简历"><a href="#（一）、怎样写简历" class="headerlink" title="（一）、怎样写简历"></a>（一）、怎样写简历</h3><p><strong>我们知道真正的好简历是要用自己的经历去写的。</strong></p><p>写简历的最佳实践——用自己的经历聊，而不是用文字写。</p><p>基本上来说，简历上的信息不要写太多，信息太多相当于没有信息，不要单纯地罗列，要突出自己的长处和技能。一般来说，简历需要包括以下几项内容：</p><ul><li><p>自我简介。</p><p>  用最简单的话来说明自己的情况，不超过 200 字。比如：10+ 年的软件开发经验（说明你的主业），4+ 年的团队 leader 经验（说明你的领导力），擅长高可用高性能的分布式架构（说明你的专业和专攻），多年互联网和金融行业背景（说明你的行业背景），任职于 XXX 公司的 XX 职位（说明你的职业），负责 XXX 平台或系统（说明你的业务场景）……</p></li><li><p>个人信息。</p><ol><li>基本信息。电子邮箱建议用 Gmail，千万不要用 QQ 邮箱，要让人感觉职业化一些。</li><li>个人网站。如果你有个人主页、博客、GitHub 或是 Stack Overflow，请一定附上，这是加分项。如果个人主页或博客有独立域名，那更好，这会给人一种你爱动手做事的感觉。页面也要干净有美感，这样会让人感觉你有品味。</li><li>网站内容。一般来说这些项都会被面试官点看浏览，所以，里面的内容你需要小心组织和呈现，千万不要造假。另外，除了技术上的一些知识总结（不要太初级，要有深度的、原理型的、刨根问底型的文章），你也可以秀一秀自己的技术价值观（比如，对代码整洁的追求，对一些技术热点事件的看法），这会让你更容易获得面试官的好感。面试官的好感很重要。</li><li>作品展。如果你有一些作品展现，会更好。当然，对于前端程序员来说，这是比较容易的。而对于后端程序员来说，这会比较难一些，只能展示一下自己的 GitHub 了。如果你有一些比较不错的证书或奖项（如微软的认证、Oracle 的认证），也可以展示一下。</li></ol></li></ul><p><strong>对应于你的简历，如果能和应聘职位的需求看齐有相类似的描述，这样可以快速地让人觉得你和要应聘的职位很匹配。</strong></p><ul><li><p>工作经历和教育经历。</p><ol><li>列一下你的工作经历。每份工作完成的主要项目（不要列一大堆项目，挑重要的），主要突出项目的难度、规模、挑战、职责，以及获得的认可和荣誉。</li><li>工作经历和教育经历，主要是对上述的个人技能的印证。不要东拉西扯，要紧紧地围绕着你的技能、特长和亮点来展开。</li></ol></li></ul><p>一般来说，你简历中的内容最好控制在两页 A4 纸以内，最好有中英文版，简历不要是 Word 版的，最好是 PDF 版，然后简历的格式和风格请参考 LinkedIn 上的（在 微软的 Office 模板网站 上也能找到一些不错的简历模板）。简历的内容不要太多，内容太多，重点就不明显了。写简历的目的是呈现自己的特长、亮点和特点。只要你能呈现出 2-3 个亮点和特长，就可以吸引到人了。</p><p>如果简历上的经历和技术亮点不足的话，那么你可以在简历的版式和形式的制作上花些心思，以及在简历的自我描述中加上一些“虚”的东西。</p><p>比如“工作态度积极，不分份内和份外的事，只要对公司和个人有利，都会努力做好；勤奋踏实，热爱学习，喜欢做一个全栈工程师；善于发现问题，并解决问题……”表示我虽然现在的经历和技能不足以打动你，但是我的态度端正，潜力巨大，你不能错过……</p><h3 id="（二）、技术知识准备"><a href="#（二）、技术知识准备" class="headerlink" title="（二）、技术知识准备"></a>（二）、技术知识准备</h3><p>一般来说，你的简历上写什么，面试官就会问什么，所以，不要打自己的脸，精通就是精通，熟悉就是熟悉，了解就是了解。然后对于你列出来的这些技术，你一定要把其最基本的技术细节给掌握了。你不见得要记住所有的知识点，但是 80% 以上的关键知识点，你多少得知道吧。面试官一般也会逐步加大问题的难度和深度，看看你到底在哪个层次上。所以，你还是需要系统地看看书，才能应对面试官的问题。比如：</p><ul><li>你写上了 Java，那么 Java 的基本语法都要了解，并发编程、NIO、JVM 等，你多少要有点儿了解，Spring、Netty 这些框架也要了解。</li><li>你写上了 Go，那么至少得把官网上的 Effective Go 给看了。</li><li>你写上了 Redis，那么除了 Redis 的数据结构，Redis 的性能优化、高可用配置、分布式锁什么的，你多少也要把官网上的那几篇文章读一读。</li><li>你写上了面向对象，那么怎么着也得把《设计模式》中的 23 个模式了解一下。</li><li>你写上了分布式架构，那么 CAP 理论、微服务架构、弹力设计、Spring Cloud、Cloud Native 这些架构就要做到心里有数。</li><li>你写上网络编程，那么 TCP/IP 的三次握手，四次挥手，两端的状态变化你得知道吧，Socket 编程的那几个系统调用，还有 select、poll、epoll 这些异步 IO 多路复用的东西，你得知道。</li></ul><h3 id="（三）、算法题准备"><a href="#（三）、算法题准备" class="headerlink" title="（三）、算法题准备"></a>（三）、算法题准备</h3><p>面试前去LeetCode练练。<a href="https://www.geeksforgeeks.org/top-20-dynamic-programming-interview-questions/">Top 20 的动态规划题的列表</a>。</p><h3 id="（四）、工作项目准备"><a href="#（四）、工作项目准备" class="headerlink" title="（四）、工作项目准备"></a>（四）、工作项目准备</h3><p><strong>无论什么公司的面试，都会让你说一个你做过的项目，或是你过去解决过的一个难题。</strong> 一般来说，会有下面这样的几个经典的面试问题：</p><ol><li>说一个你做过的最自豪的项目，或是最近做过的一个项目。</li><li>说一个你解决过的最难的技术问题，或是最有技术含量的问题。</li><li>说一个你最痛苦的项目，或最艰难的项目。</li><li>说一个犯过的最大的技术错误，或是引发的技术故障。</li></ol><p>对于上面这四个问题：第一个问题，主要是想看看你过去工作中做过的最高级的事是什么，还有你的兴趣点和兴奋点是什么；第二和第三个问题，主要是想看看你解决难题的能力，以及面对压力和困难时的心态；第四个问题，主要是想了解一下你面对错误时的态度，还要了解你是否会对错误有所总结和改进。</p><p>怎样准备这样的题，我这里有几个提示：</p><ul><li><p>要有框架。</p><p>  讲故事要学会使用 STAR 。Situation - 在什么样的环境和背景下，Task - 你要干什么样的事，Action - 你采取了什么样的行动和努力，Result - 最终得到了什么样的效果。这是整个语言组织的框架，不要冗长啰嗦。</p></li><li><p>要有细节。</p><p>  没有细节的故事听起来就很假，所以，其中要有很多细节。因为是技术方面的，所以，一定要有很多技术细节。</p></li><li><p>要有感情。</p><p>  讲这些故事一定要带感情。要让面试官感受到你的热情、骄傲、坚韧和顽强。一定要是真实的，只有真实的事才会有真实的感情。</p></li><li><p>要有思考。</p><p>  只有细节和故事还不够，还要有自己的思考和得失总结，以及后续的改进。</p></li></ul><p>对此，如果你想有一个比较好的面试回答效果，<strong>这不是你能临时准备出来的，工夫都是花在平时的。而训练这方面能力的最好方式就是在工作中写文档 ，在工作之余写博客。</strong> 只有写得多了，写得好了，你这样的能力才能训练出来。</p><hr><h2 id="八、程序员面试攻略：面试中的技巧"><a href="#八、程序员面试攻略：面试中的技巧" class="headerlink" title="八、程序员面试攻略：面试中的技巧"></a>八、程序员面试攻略：面试中的技巧</h2><h3 id="（一）、形象和谈吐"><a href="#（一）、形象和谈吐" class="headerlink" title="（一）、形象和谈吐"></a>（一）、形象和谈吐</h3><ul><li>着装让人感到干净、整洁。</li><li>保持微笑，表现得热情、开朗和幽默。</li><li>说话的时候，要看着对方，一方面这是对对方的尊重和礼貌，另一方面，这也是一种自信。</li><li>面试官问的问题，你要给出充足的细节，千万不要让面试官不断地追问，那样就被动了。</li></ul><h3 id="（二）、答不出来"><a href="#（二）、答不出来" class="headerlink" title="（二）、答不出来"></a>（二）、答不出来</h3><p>面试中有一些问题很难，但是不要放弃，要不断尝试。很多时候，面试官并不期待你能在很短的时候内解出一道难题，他只是想看一下你遇到难题时的态度和思维方式。如果你能证明给面试官看，你解决问题的方向和方法是正确的，就算是没有找到答案，也是很不错的。因为只要方向走对了，剩下的就是时间问题了。</p><p>如果实在解不出来，或是被问了不懂的知识性问题，那么就直接说不懂就好了。记下来，回去多看多练，下次记住了就好。</p><p>另外，对于没有答上来的问题，有的人会在面试后请教一下面试官。但是我觉得更好的方式是，问面试官要个他的邮箱或微信，回去后，努力搞懂，举一反三，然后写个东西再发回去。这样做是有可能让你起死回生的。多少可以暗示对方：“你看，我有不懂的，但是我能下工夫很快就搞懂了，你看我的学习能力还不错哦。你就不再考虑一下了吗？”</p><h3 id="（三）、尖锐问题"><a href="#（三）、尖锐问题" class="headerlink" title="（三）、尖锐问题"></a>（三）、尖锐问题</h3><ul><li><p>你为什么要离开现在的公司？</p><p>  一般来说，永远不要说之前公司的坏话。说客观原因。</p></li><li><p>说一下你的缺点？</p><ol><li>真实的回答。</li><li>最后还要补一句，我知道我的缺点，我也在努力改正，我正在通过什么样的方式改正。这非常关键，因为这基本上是面试官最喜欢看到的答案了，就是你不仅能正视自己的缺点，而且还能不断地改正。</li></ol></li><li><p>说一下你的优点？</p><ol><li>真实的回答。优点是需要用证据来说明的。</li><li>比如，我通常的回答是，我的优点就是学习能力强，因为我掌握的技术面很广，而且，我什么样的技术都学，比如最新的 Cloud Native 技术。作为后端人员我还学前端方面的技术如 React.js 和 Vue.js，这一切都来源于我扎实的基础知识……</li><li>回答这个问题的时候，一般都会反衬出你的价值观，HR 就是想了解你的价值观。比如，我比较踏实，我想把技术一直做到老。再比如，我有韧性，我受过哪些挫折、失败、不公、无奈和无助，我没有当逃兵……</li></ol></li><li><p>你为什么换工作换得这么勤？</p><ol><li>给出合理的解释，以消除用人方的疑惑。</li><li>一方面，你还是需要诚恳一点儿，另一方面，你在解释时需要承认频繁换工作也不是自己想的，自己何尝不想在一份工作上干得时间长一点儿。无奈，要么是公司有变化，要么就是自己没选好。一方面表达自己也厌倦了频繁换工作这种事，另一方面，你要把这个话题引到另外一个方向上——什么样的工作自己可以干很久？自己所期望的工作内容和工作环境是什么样的？这样就转而去谈你所向往的工作内容和环境了，并再表达一下在这样的工作环境下，是可以很长时间做下去的，并愿意和公司一起发展。</li><li>但是，先不要说得太理想了，不然，用人方也会觉得自己是做不到的。正确的说法是，自己并不担心公司有各种各样的问题，只要有一起扛事的队友一起拼搏，这才是最关键的。</li></ol></li><li><p>你在一家公司呆了接近 10 年为什么没有做到管理层？你又是怎么保持竞争力的？</p><ol><li>一般来说，不想做管理的程序员也挺多的，在技术的方向上勤勤恳恳深耕细作，会是一个非常难得的优秀工程师。专注于技术，不分心，不断地在技术上的深度和广度上钻研，这就是保持竞争力最好的方式。</li></ol></li><li><p>你工作满 5 年了，为什么还不是一个高级程序员？</p><ol><li>对于国外的顶尖公司来说，如果你有 5 年的工作经验，但还不能胜任高级程序员（Amazon 的 SDE2）的职位，那么你这个人就基本会被 pass 掉了，包括在职的员工也是一样的。</li><li>国内的公司可能会问你这个问题，对此，我个人认为比较好的回答是要分几方面来谈。一方面，过去因为什么原因耽误了些时间（环境因素、客观条件因素），另一方面，要表示同样也有主观因素，不然显得有点找借口的感觉，不诚恳。</li><li>接下来，要表明自己心里面也比较慌（表明自己不用别人提醒可以自己意识到自己的问题），所以，近一年来一直在学习，罗列一下学过哪些东西，最好还有学习目标和学习计划（表明自己除了有意识外，还有行动）。当然，厉害的面试官会不断地追问你一些细节，以此来确定你没有说假话，对此，你要有充足的准备。</li></ol></li><li><p>你为什么换了一个方向？你觉得你有什么优势？</p><ol><li>这个问题其实并不难回答，实话实说就好了。但是不要让招聘方感受到你浮燥的内心，或是朝三暮四的性格，更不要让人感觉到你像“小猫钓鱼”那样一边不行又来搞另一边。</li><li>我觉得回答这个问题有两种方式：一种是非常自信的回答——“我从来没有改变我的方向，因为种种原因，我没能得到我想要的方向，虽然现在很残酷，但是我一直都没有放弃我的方向，我一直都在努力学习……”如果你要这么回答了，你就要真的是这样的，在新的方向有所研究和建树，不然会被识破的。</li><li>另一种回答则常规一点，首先说明一下，自己的兴趣爱好，为什么这个方向要比之前的那个方向更适合自己。可以用几个例子来说明，但其中要有一些细节，比如，自己试过这个新方向 ，发现干得比原来那边更好，更容易出成绩，自己的兴奋点更大，所以觉得新方向更适合自己。然后，承认换一个方向短期内并没有优势。但是，因为自己的某某特质，比如，学习能力强、勤奋、聪明等特质，未来一定是可以胜任的。</li><li>但是，你要用证据证明你的学习能力强，你比一般人勤奋，比一般人聪明。不然如果对方追问下去，会让你破绽百出的。总之，回答这样的问题，需要一定的证据作为补充，而且还要伴随着以降职降薪为代价。所以，一般来说，选定方向最好不要再变了，如果一定要变的话，你也要有必胜的信心和先下后上的心态，而且这些信心和心态要让招聘方看到。</li></ol></li><li><p>对于技术的热情或初心体现在你生活和工作中的哪里？</p><ol><li>你要小心回答，而且是要带感情的，但一定要是真实的。</li><li>总结一下，对技术的热情或初心，需要表现在这么几个特质上：执着、坚持、坚韧、不服输、担当、不妥协、不浮燥……我说一句，我相信每个人或多或少都会有这些特质，这是你的亮点，要小心呵护。不然，你跟一条咸鱼就没什么两样了。</li></ol></li></ul><h3 id="（四）、结尾问题"><a href="#（四）、结尾问题" class="headerlink" title="（四）、结尾问题"></a>（四）、结尾问题</h3><ul><li><p>如果你面得比较好</p><ol><li>这个时候可以问几个尖锐的问题，这样有利于后面谈 offer 和岗位（抓住机会反转被动为主动）。比如：</li><li>你们公司有多少一线开发经理还在写代码？你们的一线经理都没有时间来写代码了，不知道细节怎么做好管理？另外是不是说明你们公司有大量的内耗？</li><li>任何公司都有好的有不好的，你能不能分享一下你最喜欢这个公司的地方和最不喜欢的地方？</li></ol></li><li><p>如果你面得一般</p><ol><li>这个时候你也可以问些加分的问题。</li><li>比如：目前贵公司或是贵团队最需要解决什么样的问题？我能帮贵公司做些什么？能不能给我一些资料我先了解一下，这样我后面如果能进来，就能上手更快一些了。因为你面得一般的话，面试官会比较犹豫和纠结，此时你需要让面试官不要犹豫，所以，你可以表现得更加热情和主动一点。你看，竟然一副通过面试明天就要上班的“无耻嘴脸”也会为你加点分的……（哈哈哈）</li></ol></li><li><p>如果你面得很不行，基本挂掉了</p><p>  这个时候，也要问问题。但最好问一下面试官对你的评价，并且让他指出你的不足和需要改进的地方。面试本来就是一次经历和一次学习，你也可以把其当作是一种受教育的过程。所以，不要放过自己可以成长的机会。通过面试官给你的评价，你日后就知道自己需要努力的地方和方向了。这是多好的一件事儿啊。</p></li></ul><hr><h2 id="九、高效学习：端正学习态度"><a href="#九、高效学习：端正学习态度" class="headerlink" title="九、高效学习：端正学习态度"></a>九、高效学习：端正学习态度</h2><h3 id="（一）、主动学习和被动学习"><a href="#（一）、主动学习和被动学习" class="headerlink" title="（一）、主动学习和被动学习"></a>（一）、主动学习和被动学习</h3><p>人的学习分为「被动学习」和「主动学习」两个层次。</p><ul><li>被动学习：如听讲、阅读、视听、演示，学习内容的平均留存率为 5%、10%、20% 和 30%。</li><li>主动学习：如通过讨论、实践、教授给他人，会将原来被动学习的内容留存率从 5% 提升到 50%、75% 和 90%。</li></ul><p><strong>学习不是努力读更多的书，盲目追求阅读的速度和数量，这会让人产生低层次的勤奋和成长的感觉，这只是在使蛮力。要思辨，要践行，要总结和归纳，否则，你只是在机械地重复某件事，而不会有质的成长的。</strong></p><h3 id="（二）、浅度学习和深度学习"><a href="#（二）、浅度学习和深度学习" class="headerlink" title="（二）、浅度学习和深度学习"></a>（二）、浅度学习和深度学习</h3><p>老实说，对于当前这个社会：</p><ul><li>大多数人的信息渠道都被微信朋友圈、微博、知乎、今日头条、抖音占据着。这些信息渠道中有营养的信息少之又少。</li><li>大多数公司都是实行类似于 996 这样的加班文化，在透支和消耗着下一代年轻人，让他们成长不起来。</li><li>因为国内互联网访问不通畅，加上英文水平受限，所以，大多数人根本没法获取到国外的第一手信息。</li><li>快餐文化盛行，绝大多数人都急于速成，心态比较浮燥，对事物不求甚解。</li></ul><p>只要你注意观察，就会发现，少数的精英人士，他们在训练自己获取知识的能力，他们到源头查看第一手的资料，然后，深度钻研，并通过自己的思考后，生产更好的内容。而绝大部分受众享受轻度学习，消费内容。</p><p>你有没有发现，在知识的领域也有阶层之分，那些长期在底层知识阶层的人，需要等着高层的人来喂养，他们长期陷于各种谣言和不准确的信息环境中，于是就导致错误或幼稚的认知，并习惯于那些不费劲儿的轻度学习方式，从而一点点地丧失了深度学习的独立思考能力，从而再也没有能力打破知识阶层的限制，被困在认知底层翻不了身。</p><p>可见深度学习十分重要，但应该怎样进行深度学习呢？下面几点是关键。</p><ul><li>高质量的信息源和第一手的知识。</li><li>把知识连成地图，将自己的理解反述出来。</li><li>不断地反思和思辨，与不同年龄段的人讨论。</li><li>举一反三，并践行之，把知识转换成技能。</li></ul><p>换言之，学习有三个步骤。</p><ul><li>知识采集。信息源是非常重要的，<strong>获取信息源头、破解表面信息的内在本质、多方数据印证</strong>，是这个步骤的关键。</li><li>知识缝合。所谓缝合就是把信息组织起来，成为结构体的知识。这里，<strong>连接记忆，逻辑推理，知识梳理</strong>是很重要的三部分。</li><li>技能转换。通过<strong>举一反三、实践和练习，以及传授教导</strong>，把知识转化成自己的技能。这种技能可以让你进入更高的阶层。</li></ul><h3 id="（三）、学习是为了找到方法"><a href="#（三）、学习是为了找到方法" class="headerlink" title="（三）、学习是为了找到方法"></a>（三）、学习是为了找到方法</h3><p><strong>学习不仅仅是为了找到答案，而更是为了找到方法。</strong></p><p>只有掌握解题的思路和方法，你才算得上拥有解决问题的能力。所有的练习，所有的答案，其实都是在引导你去寻找一种“以不变应万变”的方法或能力。</p><p><strong>学习是为了找到通往答案的路径和方法，是为了拥有无师自通的能力。</strong></p><h3 id="（四）、学习是为了找到原理"><a href="#（四）、学习是为了找到原理" class="headerlink" title="（四）、学习是为了找到原理"></a>（四）、学习是为了找到原理</h3><p><strong>学习不仅仅是为了知道，而更是为了思考和理解。</strong> 在学习的过程中，我们不是为了知道某个事的表面是什么，而是要通过表象去探索其内在的本质和原理。</p><p>问题会驱使你像一个侦探一样去探索背后的事实和真相，并在不断的思考中一点一点地理解整个事情的内在本质、逻辑和原理。 <strong>一旦理解和掌握了这些本质的东西，你就会发现，整个复杂多变的世界在变得越来越简单。你就好像找到了所有问题的最终答案似的，一通百通了。</strong></p><h3 id="（五）、学习是为了了解自己"><a href="#（五）、学习是为了了解自己" class="headerlink" title="（五）、学习是为了了解自己"></a>（五）、学习是为了了解自己</h3><p><strong>学习不仅仅是为了开拓眼界，而更是为了找到自己的未知，为了了解自己。</strong> 英文中有句话叫：You do not know what you do not know，可以翻译为：你不知道你不知道的东西。也就是说，你永远不会去学习你不知道其存在的东西。就好像你永远 Google 不出来你不知道的事，因为对于你不知道的事，你不知道用什么样的关键词，你不知道关键词，你就找不到你想要的知识。</p><p><strong>开拓眼界的目的就是发现自己的不足和上升空间，从而才能让自己成长。</strong></p><h3 id="（六）、学习是为了改变自己"><a href="#（六）、学习是为了改变自己" class="headerlink" title="（六）、学习是为了改变自己"></a>（六）、学习是为了改变自己</h3><p><strong>学习不仅仅是为了成长，而更是为了改变自己。</strong> 很多时候，我们觉得学习是为了自己的成长，但是其实，学习是为了改变自己，然后才能获得成长。为什么这么说呢？我们知道，人都是有直觉的，但如果人的直觉真的靠谱，那么我们就不需要学习了。而学习就是为了告诉我们，我们的很多直觉或是思维方式是不对的，不好的，不科学的。</p><p><strong>学习是为了改变自己的思考方式，改变自己的思维方式，改变自己与生俱来的那些垃圾和低效的算法。总之，学习让我们改变自己，行动和践行，反思和改善，从而获得成长。</strong></p><hr><h2 id="十、高效学习：源头、原理和知识地图"><a href="#十、高效学习：源头、原理和知识地图" class="headerlink" title="十、高效学习：源头、原理和知识地图"></a>十、高效学习：源头、原理和知识地图</h2><h3 id="（一）、挑选知识和信息源"><a href="#（一）、挑选知识和信息源" class="headerlink" title="（一）、挑选知识和信息源"></a>（一）、挑选知识和信息源</h3><p>信息源要有下面几个特质：</p><ul><li>应该是第一手资料，不是被别人理解过、消化过的二手资料。尤其对于知识性的东西来说，更是这样。应该是原汁原味的，不应该是被添油加醋的。</li><li>应该是有佐证、有数据、有引用的，或是有权威人士或大公司生产系统背书的资料。应该是被时间和实践检验过的，或是小心求证过的，不是拍脑袋野路子或是道听途说出来的资料。</li><li>应该是加入了一些自己的经验和思考，可以引发人深思的，是所谓信息的密集很大的文章。</li></ul><h3 id="（二）、注重基础和原理"><a href="#（二）、注重基础和原理" class="headerlink" title="（二）、注重基础和原理"></a>（二）、注重基础和原理</h3><p><strong>基础知识和原理性的东西和技术，都是经历过长时间的考验的，所以，这些基础技术也有很多人类历史上的智慧结晶，会给你很多启示和帮助。</strong> 比如：TCP 协议的状态机，可以让你明白，如果你要设计一个异步通信协议，状态机是一件多么重要的事，还有 TCP 拥塞控制中的方式，让你知道，设计一个以响应时间来限流的中件间是什么样的。</p><h3 id="（三）、使用知识图"><a href="#（三）、使用知识图" class="headerlink" title="（三）、使用知识图"></a>（三）、使用知识图</h3><p>联想记忆法。比如，在学习 C++ 的时候，面对《C++ Primer》这种厚得不行的书，我就使用联想记忆法。</p><p>我把 C++ 分成三部分：</p><ul><li>第一部分是 C++ 是用来解决 C 语言的问题的，那么 C 语言有什么问题呢？指针、宏、错误处理、数据拷贝…… C++ 用什么技术来解决这些问题呢？</li><li>第二部分是 C++ 的面向对象特性：封装、继承、多态。封装，让我想到了构造函数、析构函数等。构造函数让我想到了初始化列表，想到了默认构造函数，想到了拷贝构造函数，想到了 new……多态，让我想到了虚函数，想到了 RTTI，RTTI 让我想到了 dynamic_cast 和 typeid 等。</li><li>第三部分是 C++ 的泛型编程。我想到了 template，想到了操作符重载，想到了函数对象，想到 STL，想到数据容器，想到了 iterator，想到了通用算法，等等。</li></ul><p>于是，我通过“顺藤摸瓜”的方式，从知识树的主干开始做广度或是深度遍历，于是我就得到了一整棵的知识树。这种“顺藤摸瓜”的记忆方式让我记住了很多知识。<strong>最重要的是，当出现一些我不知道的知识点时，我就会往这棵知识树上挂，而这样一来，也使得我的学习更为系统和全面。</strong></p><p>这种画知识图的方式可以让你从一个技术最重要最主干的地方出发开始遍历所有的技术细节，也就是画地图的方式。如果你不想在知识的海洋中迷路，你需要有一份地图，所以，<strong>学习并不是为了要记忆那些知识点，而是为了要找到一个知识的地图，你在这个地图上能通过关键路径找到你想要的答案。</strong></p><hr><h2 id="十一、高效学习：深度，归纳和坚持实践"><a href="#十一、高效学习：深度，归纳和坚持实践" class="headerlink" title="十一、高效学习：深度，归纳和坚持实践"></a>十一、高效学习：深度，归纳和坚持实践</h2><h3 id="（一）、系统地学习"><a href="#（一）、系统地学习" class="headerlink" title="（一）、系统地学习"></a>（一）、系统地学习</h3><p>当然学习一门技术时，Go 语言也好，Docker 也好，我都有一个学习模板。只有把这个学习模板中的内容都填实了，我才罢休。这个模板如下：</p><ol><li><p>这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题。</p><p> 这个问题非常关键，也就是说，你在学习一个技术的时候，需要知道这个技术的成因和目标，也就是这个技术的灵魂。如果不知道这些的话，那么你会看不懂这个技术的一些设计理念。</p></li><li><p>这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off 是什么。</p><p> 任何技术都有其好坏，在解决一个问题的时候，也会带来新的问题。另外，一般来说，任何设计都有 trade-off（要什么和不要什么），所以，你要清楚这个技术的优势和劣势，以及带来的挑战。</p></li><li><p>这个技术适用的场景。</p><p> 任何技术都有其适用的场景，离开了这个场景，这个技术可能会有很多槽点，所以学习技术不但要知道这个技术是什么，还要知道其适用的场景。没有任何一个技术是普适的。注意，所谓场景一般分别两个，一个是业务场景，一个是技术场景。</p></li><li><p>技术的组成部分和关键点。</p><p> 这是技术的核心思想和核心组件了，也是这个技术的灵魂所在了。学习技术的核心部分是快速掌握的关键。</p></li><li><p>技术的底层原理和关键实现。</p><p> 任何一个技术都有其底层的关键基础技术，这些关键技术很有可能也是其它技术的关键基础技术。所以，学习这些关键的基础底层技术，可以让你未来很快地掌握其它技术。可以参看我在 CoolShell 上写的 Docker 底层技术那一系列文章。</p></li><li><p>已有的实现和它之间的对比。</p><p> 一般来说，任何一个技术都会有不同的实现，不同的实现都会有不同的侧重。学习不同的实现，可以让你得到不同的想法和思路，对于开阔思维，深入细节是非常重要的。</p></li></ol><h3 id="（二）、举一反三"><a href="#（二）、举一反三" class="headerlink" title="（二）、举一反三"></a>（二）、举一反三</h3><p>我觉得一个人的举一反三能力，可以分解成如下三种基本能力：</p><ol><li><p>联想能力。</p><p> 这种能力的锻炼需要你平时就在不停地思考同一个事物的不同的用法，或是联想与之有关的其他事物。对于软件开发和技术学习也一样。</p></li><li><p>抽象能力。</p><p> 抽象能力是举一反三的基本技能。平时你解决问题的时候，如果你能对这个问题进行抽象，你就可以获得更多的表现形式。抽象能力需要找到解决问题的通用模型，比如数学就是对现实世界的一种抽象。只要我们能把现实世界的各种问题建立成数据模型（如，建立各种维度的向量），我们就可以用数学来求解，这也是机器学习的本质。</p></li><li><p>自省能力。</p><p> 所谓自省能力就是自己找自己的难看。当你得到一个解的时候，要站在自己的对立面来找这个解的漏洞。有点像左右手互博。这种自己和自己辩论的能力又叫思辨能力。将自己分裂成正反方，左右方，甚至多方，站在不同的立场上来和自己辩论，从而做到不漏过一个 case，从而获得完整全面的问题分析能力。</p></li></ol><p>在这方面，我对自己的训练如下：</p><ul><li>对于一个场景，制造出各种不同的问题或难题。</li><li>对于一个问题，努力寻找尽可能多的解，并比较这些解的优劣。</li><li>对于一个解，努力寻找各种不同的测试案例，以图让其健壮。</li></ul><h3 id="（三）、总结和归纳"><a href="#（三）、总结和归纳" class="headerlink" title="（三）、总结和归纳"></a>（三）、总结和归纳</h3><p>对自己的知识进行总结和归纳是提高学习能力的一个非常重要的手段。这是把一个复杂问题用简单的语言来描述的能力。也就是说，我们把学到的东西用自己的语言和理解重新组织并表达出来，本质上是对信息进行消化和再加工的过程，这个过程可能会有信息损失，但也可能会有新信息加入，本质上是信息重构的过程。</p><p>不过，我们需要注意的是，如果只学了部分知识或者还没有学透，就开始对知识进行总结归纳，那么总结归纳出来的知识结构也只能是混乱和幼稚的。因此， <strong>学习的开始阶段，可以不急于总结归纳，不急于下判断，做结论，而应该保留部分知识的不确定性，保持对知识的开放状态。</strong> 当对整个知识的理解更深入，自己站的位置更高以后，总结和归纳才会更有条理。总结归纳更多是在复习中对知识的回顾和重组，而不是一边学习一边就总结归纳。</p><p>我们来总结一下做总结归纳的方法：<strong>把你看到和学习到的信息，归整好，排列好，关联好，总之把信息碎片给结构化掉，然后在结构化的信息中，找到规律，找到相通之处，找到共同之处，进行简化、归纳和总结，最终形成一种套路，一种模式，一种通用方法。</strong></p><p>要训练自己这方面的能力，你需要多看一些经典的方法论图书，看看别人是怎样总结和归纳知识的。你可以在一开始模仿并把自己的理解的知识给写出来，写博客会是一种很好的方式。另外一种更好的方式是讲一遍给别人听。总之，你需要把你总结归纳的知识公开出来，给别人看，接受别人的批评和反馈，这样你才能成长得更快。其实，我也在锻炼这样的能力。</p><h3 id="（四）、实践出真知"><a href="#（四）、实践出真知" class="headerlink" title="（四）、实践出真知"></a>（四）、实践出真知</h3><p>所谓实践出真知，也就是学以致用，不然只是纸上谈兵，误国误民。只有实践过，你才能对学到的东西有更深的体会。</p><p>多写多用。</p><h3 id="（五）、坚持不懈"><a href="#（五）、坚持不懈" class="headerlink" title="（五）、坚持不懈"></a>（五）、坚持不懈</h3><p>一方面你要把你的坚持形成成果晒出来，让别人来给你点赞，另一方面，你还要把坚持变成一种习惯，就像吃饭喝水一样，你感觉不到太多的成本付出。只有做到这两点，你才能够真正坚持。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职业规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《C语言程序设计：现代方法(第2版)》读书笔记</title>
      <link href="c-yu-yan-cheng-xu-she-ji-xian-dai-fang-fa-di-2-ban-du-shu-bi-ji/"/>
      <url>c-yu-yan-cheng-xu-she-ji-xian-dai-fang-fa-di-2-ban-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>主要是备忘C99标准中的一些变化。</p><h2 id="允许代码段与声明混合"><a href="#允许代码段与声明混合" class="headerlink" title="允许代码段与声明混合"></a>允许代码段与声明混合</h2><p>允许在程序块中任何地方声明变量，只要在第一次调用该变量之前声明就可以。</p><h2 id="支持-风格注释"><a href="#支持-风格注释" class="headerlink" title="支持//风格注释"></a>支持//风格注释</h2><h2 id="变量不再隐式声明为int类型"><a href="#变量不再隐式声明为int类型" class="headerlink" title="变量不再隐式声明为int类型"></a>变量不再隐式声明为int类型</h2><h2 id="不支持隐式声明函数"><a href="#不支持隐式声明函数" class="headerlink" title="不支持隐式声明函数"></a>不支持隐式声明函数</h2><h2 id="更准确的整型除法"><a href="#更准确的整型除法" class="headerlink" title="更准确的整型除法"></a>更准确的整型除法</h2><p>C89中i/j的两个整数操作数中有负数时，除法的结果既可以向上取整，也可以向下取整，在C99中总是向0取整。C89中如果i或j为负数，i%j结果与实现有关，在c99中结果符号总与i的符号相同。</p><h2 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h2><p>新的布尔类型<code>_Bool</code>，本质是无符号的整型。<code>_Bool</code>类型的变量只能存储0或1，所以，将非0的值赋值给<code>_Bool</code>类型的变量都会导致变量的值变为1。同时还提供了新的头文件<stdbool.h>，内容如下：</stdbool.h></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">__bool_true_false_are_defined   <span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">bool    <span class="token keyword">_Bool</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">false   <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">true    <span class="token number">1</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="for语句的变化"><a href="#for语句的变化" class="headerlink" title="for语句的变化"></a>for语句的变化</h2><p>在C99中，for语言的第一个表达式可以替换为一个声明，下面的代码也是合法的了：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="64位整数和扩展整数类型的支持"><a href="#64位整数和扩展整数类型的支持" class="headerlink" title="64位整数和扩展整数类型的支持"></a>64位整数和扩展整数类型的支持</h2><p>C99提供了两个额外的标准整数类型：<code>long long int</code>和<code>unsigned long long int</code>，大小至少64位宽。同时，以<code>LL</code>或<code>ll</code>（所有字母的大小写要一致）结尾的整数常量是<code>long long int</code>类型的，以<code>ULL</code>或<code>ull</code>（所有字母的大小写要一致）结尾的整数常量是<code>unsigned long long int</code>类型的。</p><p>除了标准的整数类型外，C99标准还允许在具体实现时定义<code>扩展的数类整数</code>（包括有符号的和无符号的）。比如：128位的整数类型。</p><h2 id="隐式转换的变化"><a href="#隐式转换的变化" class="headerlink" title="隐式转换的变化"></a>隐式转换的变化</h2><p>因为C99中增加了一些类型（_Bool、long long类型、扩展的整数类型和复数类型）。新的隐式转换规则略有变化（这里忽略了扩展整数类型和枚举类型）：</p><ol><li>long long int、unsigned long long int</li><li>long int、unsigned long int</li><li>int、unsigned int</li><li>short int、unsigned short int</li><li>char、signed char、unsigned char（这里要注意char类型和signed char类型是不同的类型）</li><li>_Bool</li></ol><p>C99用整数提升（integer promotion）取代了C89中的整值提升（integral promotion），可以将任何等级低于int和unsigned int的类型转换为int（只要该类型的所有值都可以用int类型表示）或unsigned int。</p><p>和C89一样类似，C99中执行常用的算术转换的规则可以划分为两种情况：</p><ul><li><p><code>任一操作数的类型是浮点数类型的情况。</code>只要两个操作数都不是复数型，规则如下(下面的内容摘录自<a href="https://book.douban.com/subject/1139336/">C程序设计语言(第2版_新版)</a>)：</p><ol><li>如果任何一个操作数为long double类型，将另一个操作数转换为long double类型，过程结束。</li><li>如果任何一个操作数为double类型，将另一个操作数转换为double类型，过程结束。</li><li>如果任何一个操作数为float类型，将另一个操作数转换为float类型，过程结束。</li></ol></li><li><p><code>两个操作数的类型都不是浮点类型的情况。</code>首先对两个操作数进行整数提升。如果这时两个操作数的类型相同，过程结束。否则，依次尝试下面的规则，一旦遇到可应用的规则就不再考虑别的规则：</p><ol><li>如果两个操作数都是有符号型或都是无符号型，将整数转换等级低的操作数转换为等级较高的操作数的类型。</li><li>如果无符号操作数的等级<code>高于或等于</code>有符号操作数的等级，将有符号操作数转换为无符号操作数的类型。</li><li>如果有符号操作数类型可以表示无符号操作数类型的所有值，将无符号操作数转换为有符号操作数的类型。</li><li>否则，将两个操作数都转换为与有符号操作数的类型相对应的无符号类型。</li></ol></li></ul><p>另外，所有算术类型都可以转换为_Bool类型。如果原始值为0则转换结果为0，否则结果为1。</p><h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><blockquote><p>这条C99中没有变化，只是C和C++略有不同。</p></blockquote><p>如果数组的初始化式比数组短，那么数组中剩余的元素赋值为0：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">/* initial value of a is {1, 2, 0} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>但是在C中初始化式完全为空是非法的，如果想要把数组全部初始化为0，必须要在大括号中放一个0。这点要求在C++中是没有的。</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// inital value of a to {0, 0, 0}</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// invalid in c but valid in c++</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="数组指定初始化式"><a href="#数组指定初始化式" class="headerlink" title="数组指定初始化式"></a>数组指定初始化式</h2><p>C99中，提供了指定下标的方式来初始化数组中指定位置的值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">/* a is {0, 1, 0, 3, 0} */</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时，初始化式中老方法（逐个元素初始化）和新方法（指定初始化式）可以同时使用。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">/* b is {1, 0, 2} */</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">/* b us {0, 0, 2, 1}*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="变长数组"><a href="#变长数组" class="headerlink" title="变长数组"></a>变长数组</h2><p>下面的代码在C99标准下是合法的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* C99 only*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>变长数组的长度是在程序执行时计算的，而不是在编译时计算的。变长数组的主要限制是它们没有静态存储时限（因为它是放在栈上面的），另一个限制是变长数组没有初始化式。</p><h2 id="变长数组形式参数"><a href="#变长数组形式参数" class="headerlink" title="变长数组形式参数"></a>变长数组形式参数</h2><p>下面的代码在C99标准下是合法的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum_2d_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：参数的顺序很重要。<code>int m</code>和<code>int n</code>必须要在<code>int arr[m][n]</code>的左边。</p></blockquote><p>在声明包含有变长数组形式的函数时，可以使用<code>*</code>，比如上面的函数可以声明为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum_2d_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sum_2d_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sum_2d_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">sum_2d_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>变长数组参数对编译器来说，只是提示性的，编译器并不进行额外的错误检测，只是方便编译优化等。所以实际上变长数组的大小和变长数组的参数可能是无关的。</code></p><h2 id="在数组参数声明中使用static"><a href="#在数组参数声明中使用static" class="headerlink" title="在数组参数声明中使用static"></a>在数组参数声明中使用static</h2><p>C99允许在数组参数声明中使用关键字static。在下面的代码中，将static放在数字3之前表示数组a的长度至少可以保证为3：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">sum_array</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token keyword">static</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这样使用static对程序的行为不会有任何影响。static的存在只是提示编译器，方便编译器根据此提示优化指令。</p><p>最后，如果数组参数是多维的，static仅可用于第一维（比如，指定二维数组的行数）。</p><h2 id="数组复合字面量"><a href="#数组复合字面量" class="headerlink" title="数组复合字面量"></a>数组复合字面量</h2><p>代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>total <span class="token operator">=</span> <span class="token function">sum_array</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在C99中，可以简化为：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">total <span class="token operator">=</span> <span class="token function">sum_array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>(int []){3, 0, 3, 4, 1}</code>就是<code>复合字面量</code>。</p><p>复合字面量是通过指定其包含的元素而创建的没有名字的数组。其格式为：先在一对圆括号内给定类型名，随后在一对花括号内设定所包括元素的值。</p><p>复合字面量类似于应用于数组初始化式的强制转换。事实上，复合字面量和数组初始化式遵守同样的规则。复合字面量可以包含指示符，就像指定初始化式一样；可以不提供数组完全的初始化（未初始化的元素默认被初始化为0）。例如：复合字面量<code>(int[10]){8,6}</code>有10个元素，前面两个元素的值为8和6，剩下的元素值为0。</p><p>函数内部创建的复合字面量可以包含任意表达式，不限于常量。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">total <span class="token operator">=</span> <span class="token function">sum_array</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token punctuation">,</span> i<span class="token operator">+</span>j<span class="token punctuation">,</span> j<span class="token operator">*</span>k<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中i、j、k都是变量。</p><p>复合字面量为左值，所以其元素的值可以改变。如果要求其值为“只读”，可以在类型前面加上<code>const</code>，如<code>(const int[]){5,4}</code>。</p><h2 id="指向常量数组复合字面量的指针"><a href="#指向常量数组复合字面量的指针" class="headerlink" title="指向常量数组复合字面量的指针"></a>指向常量数组复合字面量的指针</h2><p>指针指向复合字面量创建的数组中的某个元素是合法的。下面两段代码都是合法的，并且意义相同。</p><p>代码一：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码二：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="C99中的指针和变长数组"><a href="#C99中的指针和变长数组" class="headerlink" title="C99中的指针和变长数组"></a>C99中的指针和变长数组</h2><p>指针可以指向变长数组中的元素。如果变长数组是多维的，指针的类型取决于除第一维外每一维的长度。下面是二维的情况：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为p的类型依赖于n，而n不是常量，所以说p具有可改变类型。需要注意的是，编译器并非总能确定<code>p = a</code>这样的赋值语句的合法性，例如，下面的代码可以通过编译，但只有当<code>m = n</code>是才正确：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">;</span>p <span class="token operator">=</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>如果<code>m != n</code>，后续对p的使用都将导致未定义的行为。</p><p>与变长数组一样，可改变类型也具有特定的限制，其中最重要的限制是，可改变类型的声明必须出现在函数体内部或者在函数原型中。</p><h2 id="C99中新增的预定义宏"><a href="#C99中新增的预定义宏" class="headerlink" title="C99中新增的预定义宏"></a>C99中新增的预定义宏</h2><div class="table-container"><table><thead><tr><th style="text-align:center">名字</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>__STDC_HOSTED__</code></td><td style="text-align:center">如果是托管式实现，值为1；如果是独立式实现，值为0</td></tr><tr><td style="text-align:center"><code>__STDC_VERSION__</code></td><td style="text-align:center">支持的C标准版本</td></tr><tr><td style="text-align:center"><code>__STDC_IEC_559__</code></td><td style="text-align:center">如果支持IEC 60559浮点算术运算，则定义该宏，且值为1</td></tr><tr><td style="text-align:center"><code>__STDC_IEC_559_COMPLEX</code></td><td style="text-align:center">如果支持IEC 60559复数算术运算，则定义该宏，且值为1</td></tr><tr><td style="text-align:center"><code>__STDC_ISO_10646__</code></td><td style="text-align:center">如果wchar_t类型的值由ISO/IEC 10646标准中的码值表示，则定义该宏，且值的格式是yyyymmL（表示修订的年月）</td></tr></tbody></table></div><h2 id="空的宏参数"><a href="#空的宏参数" class="headerlink" title="空的宏参数"></a>空的宏参数</h2><p>C99允许宏调用中的任意或所有参数为空。但是这样的调用需要有和一般调用一样多的逗号（方便看出哪些参数被省略了）。</p><p>在大多数情况下，实际参数为空的效果是显而易见的。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ADD</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span></span></span>i <span class="token operator">=</span> <span class="token function">ADD</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token function">ADD</span><span class="token punctuation">(</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>经过预处理后变成：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">i <span class="token operator">=</span> <span class="token punctuation">(</span>j<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当空参数是#或##运算符的操作数时，用法有特殊规定。例如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">MK_STR</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> #x</span></span><span class="token keyword">char</span> empty_string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">MK_STR</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">JOIN</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span> x</span><span class="token punctuation">##</span><span class="token expression">y</span><span class="token punctuation">##</span><span class="token expression">z</span></span><span class="token keyword">int</span> <span class="token function">JOIN</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">JOIN</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">JOIN</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">JOIN</span><span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过预处理后变成：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> empty_string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> abc<span class="token punctuation">,</span> ab<span class="token punctuation">,</span> ac<span class="token punctuation">,</span> c<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="参数个数可变的宏"><a href="#参数个数可变的宏" class="headerlink" title="参数个数可变的宏"></a>参数个数可变的宏</h2><p>在C89中，如果宏有参数，那么参数的个数是固定的。在C99中，这个条件被适当放宽了，允许宏具有可变长度的参数列表。</p><p>宏具有可变参数个数的主要原因是：它可以将参数传递给具有可变参数个数的函数。比如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">TEST</span><span class="token punctuation">(</span>cond<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>cond<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">printf</span><span class="token punctuation">(</span></span><span class="token string">"pass test: %s\n"</span><span class="token expression"><span class="token punctuation">,</span> #cond<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">printf</span><span class="token punctuation">(</span>__VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>...</code>记号（省略号）出现在宏参数列表的最后，前面是普通参数。<code>__VA_ARGS__</code>是一个专用的标识符，只能出现在具有可变参数个数的宏的替换列表中，代表所有与省略号相对应的参数。（至少有一个与省略号相对应的参数，但该参数可以为空。）</p><h2 id="func标识符"><a href="#func标识符" class="headerlink" title="func标识符"></a><strong>func</strong>标识符</h2><p>每个函数都可以访问<code>__func__</code>标识符，它的行为很像一个存储当前正在执行的函数的名字的字符串变量。作用相当于在函数体的一开始包含了如下声明：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token constant">__func__</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"function-name"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>__func__</code>的另一个用法：作为参数传递给函数，让函数知道调用它的函数的名字。</p><h2 id="Pragma运算符"><a href="#Pragma运算符" class="headerlink" title="_Pragma运算符"></a>_Pragma运算符</h2><p>C99引入了与#pragma指令一起使用的_Pragma运算符。其具有如下形式：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">_Pragma</span> <span class="token punctuation">(</span>字符串字面量<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>遇到该表达式时，预处理器通过移除字符串两端的双引号并分别用字符<code>"</code>和<code>\</code>代替转义序列<code>\"</code>和<code>\\</code>来实现对字符串字面量的“去字符串化”。下面的两行代码意义相同：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">_Pragma</span><span class="token punctuation">(</span><span class="token string">"data(heap_size =&gt; 1000, stack_size =&gt; 2000)"</span><span class="token punctuation">)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression"><span class="token function">data</span><span class="token punctuation">(</span>heap_size <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">1000</span><span class="token punctuation">,</span> stack_size <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="结构指定初始化式"><a href="#结构指定初始化式" class="headerlink" title="结构指定初始化式"></a>结构指定初始化式</h2><p>与数组指定初始化式类似，结构也可以使用指定初始化式。下面两行初始化代码意义相同：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">KibaZen</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">int</span> c<span class="token punctuation">;</span>    <span class="token keyword">int</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">kibaZen</span> k <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">KibaZen</span> z <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构复合字面量"><a href="#结构复合字面量" class="headerlink" title="结构复合字面量"></a>结构复合字面量</h2><p>和数组复合字面量类似，结构也有复合字面量。下面的代码是合法的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">KibaZen</span> kz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">kibaZen</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="受限指针"><a href="#受限指针" class="headerlink" title="受限指针"></a>受限指针</h2><p>在C99中，用restrict声明的指针叫做受限指针（restricted pointer）。它向编译器保证，在这个指针的生命周期内，任何通过该指针访问的内存，都只能被这个指针改变。目的是为了是给编译器提供额外的信息帮助编译器进行代码优化。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> restrict dst<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> restrict src<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">memmove</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> dst<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> src<span class="token punctuation">,</span> size_t n<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>C99标准下，<code>memcpy</code>中的dst和src都使用了restrict，说明复制源和目的地不应互相重叠（但不能确保不重叠）。而<code>memmove</code>中的dst和src没有使用restrict，说明即使在重叠时也能正常复制。</p><h2 id="灵活数组成员"><a href="#灵活数组成员" class="headerlink" title="灵活数组成员"></a>灵活数组成员</h2><p>在存储字符串时我们可能会定义下面的结构：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">vstring</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">char</span> chars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">vstring</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vstring</span><span class="token punctuation">)</span> <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token operator">-&gt;</span>nlen <span class="token operator">=</span> n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用了一种“欺骗”的方法，分配比该结构声明时应具有的内存更多的内存，然后使用这些内存来存储chars数组额外的元素。这种方法称为“struct hack”。C89标准并不能保证struct hack技术工作，也不允许数组长度为0(GCC允许)。</p><p>C99提供了灵活数组成员（flexible array member）来达到同样的目的。当结构的最后一个成员是数组时，其长度可以省略：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">vstring</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> len<span class="token punctuation">;</span>    <span class="token keyword">char</span> chars<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">/* flexible array member - c99 only */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">vstring</span><span class="token operator">*</span> str <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">vstring</span><span class="token punctuation">)</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token operator">-&gt;</span>len <span class="token operator">=</span> n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具有灵活数组成员的结构是不完整类型（incomplete type）。不完整类型缺少用于确定所需内存大小的信息。</p><h2 id="内链函数"><a href="#内链函数" class="headerlink" title="内链函数"></a>内链函数</h2><p>C99标准下，可以使用关键字inline创建内联函数。</p><h2 id="新的头文件"><a href="#新的头文件" class="headerlink" title="新的头文件"></a>新的头文件<stdbool.h></stdbool.h></h2><h2 id="C99对…printf转换说明的修改"><a href="#C99对…printf转换说明的修改" class="headerlink" title="C99对…printf转换说明的修改"></a>C99对…printf转换说明的修改</h2><p>C99对printf函数和fprintf函数的转换说明做了不少修改。</p><ul><li>增加了长度修饰符：hh、ll、j、z和t。</li><li>增加了转换说明符：F、a和A。</li><li>允许输出无穷数和NaN。</li><li>支持宽字符输出：<code>%lc</code>和<code>%ls</code>。</li><li>C89未定义的转换说明C99允许了。%le、%lE、%lf、%lg和%lG在C99是合法的（l长度修饰符被忽略）。</li></ul><h2 id="C99对…scanf转换说明的改变"><a href="#C99对…scanf转换说明的改变" class="headerlink" title="C99对…scanf转换说明的改变"></a>C99对…scanf转换说明的改变</h2><p>C99对scanf函数和fscanf函数的转换说明也做了一些修改。</p><ul><li>增加了长度修饰符：hh、ll、j、z和t。</li><li>增加了转换说明符：F、a和A。</li><li>具有读无穷数和NaN的能力。</li><li>支持宽字符。<code>%lc</code>转换说明用于读出单个的多字节字符或者一系列多字节字符；<code>%ls</code>用于读取由多字节字符组成的字符串（在结尾添加空字符）。<code>%l[集合]</code>和<code>%l[^集合]</code>转换说明也可以读取多字节字符串。</li></ul><p>scanf示例：</p><div class="table-container"><table><thead><tr><th style="text-align:center">代码</th><th style="text-align:center">输入</th><th style="text-align:center">变量</th></tr></thead><tbody><tr><td style="text-align:center"><code>n = scanf("%i%i%i", &amp;i, &amp;j, &amp;k);</code></td><td style="text-align:center"><code>12 012 0x12</code></td><td style="text-align:center">n=3; i=12; j=10; k=18;</td></tr><tr><td style="text-align:center"><code>n = scanf("%[0123456789]", str);</code></td><td style="text-align:center"><code>123abc</code></td><td style="text-align:center">n=1; str=”123”;</td></tr><tr><td style="text-align:center"><code>n = scanf("%[0123456789]", str);</code></td><td style="text-align:center"><code>abc123</code></td><td style="text-align:center">n=0; str的值不变;</td></tr><tr><td style="text-align:center"><code>n = scanf("%[^0123456789]", str);</code></td><td style="text-align:center"><code>abc123</code></td><td style="text-align:center">n=1; str=”abc”;</td></tr><tr><td style="text-align:center"><code>n = scanf("%*d%d%n", &amp;i, &amp;j);</code></td><td style="text-align:center"><code>10 20 30</code></td><td style="text-align:center">n=1; i=20; j=5;</td></tr></tbody></table></div><h2 id="在中增加许多类型、宏和函数"><a href="#在中增加许多类型、宏和函数" class="headerlink" title="在中增加许多类型、宏和函数"></a>在<math.h>中增加许多类型、宏和函数</math.h></h2><h2 id="通用字符名"><a href="#通用字符名" class="headerlink" title="通用字符名"></a>通用字符名</h2><p>可以用两种方式书写通用字符名（\udddd和\Udddddddd），每个d都是一个十六进制的数字。</p><p>UCS的码值可以在<a href="www.unicode.org/charts/">www.unicode.org/charts/</a>找到。</p><h2 id="支持宽字符的和函数库"><a href="#支持宽字符的和函数库" class="headerlink" title="支持宽字符的和函数库"></a>支持宽字符的<wchar.h>和<wctype.h>函数库</wctype.h></wchar.h></h2><h2 id="在和中支持vscanf族函数"><a href="#在和中支持vscanf族函数" class="headerlink" title="在和中支持vscanf族函数"></a>在<stdio.h>和<wchar.h>中支持vscanf族函数</wchar.h></stdio.h></h2><h2 id="新增整数类型"><a href="#新增整数类型" class="headerlink" title="新增整数类型"></a>新增<stdint.h>整数类型</stdint.h></h2><h2 id="新增整数类型的格式"><a href="#新增整数类型的格式" class="headerlink" title="新增整数类型的格式"></a>新增<inttypes.h>整数类型的格式</inttypes.h></h2><h2 id="新增复数算术运算"><a href="#新增复数算术运算" class="headerlink" title="新增复数算术运算"></a>新增<complex.h>复数算术运算</complex.h></h2><h2 id="新增泛型数学"><a href="#新增泛型数学" class="headerlink" title="新增泛型数学"></a>新增<tgmath.h>泛型数学</tgmath.h></h2><p><tgmath.h>提供了带参数的宏，宏的名字与<math.h>和<complex.h>中的函数名相匹配。这些泛型宏（type-generic macro）可以检测参数的类型，然后调用<math.h>或<complex.h>中相对应的函数。</complex.h></math.h></complex.h></math.h></tgmath.h></p><p>比如：sqrt函数不仅有3种复数版本（csqrt、csqrtf和csqrtl），还有double（sqrt）、float（sqrtf）以及long double版本（sqrtl）。使用<tgmath.h>后，程序员可以直接使用sqrt，而不用担心需要的到底是哪个版本：根据参数x类型的不同，函数调用sqrt(x)有可能是6个版本sqrt中的任何一个。</tgmath.h></p><p>顺便提一下，<tgmath.h>中包含了<math.h>和<complex.h>。</complex.h></math.h></tgmath.h></p><h2 id="新增浮点环境"><a href="#新增浮点环境" class="headerlink" title="新增浮点环境"></a>新增<fenv.h>浮点环境</fenv.h></h2><p>IEEE标准754在表示浮点数时使用最广泛。（C99标准把IEEE 754成为IEC 60559）。<fenv.h>的目的是使程序可以访问IEEE标准指定的浮点状态标志和控制模式。</fenv.h></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法=逻辑+控制</title>
      <link href="suan-fa-luo-ji-kong-zhi/"/>
      <url>suan-fa-luo-ji-kong-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h2><p><a href="https://en.wikipedia.org/wiki/Robert_Kowalski">Robert Kowalski</a>在其论文<a href="https://www.doc.ic.ac.uk/~rak/papers/algorithm%20=%20logic%20+%20control.pdf">Algorithm = Logic + Control</a>中指出：</p><blockquote><p>An algorithm can be regarded as consisting of a logic component, which specifies the knowledge to be used in solving problems, and a control component, which determines the problem-solving strategies by means of which that knowledge is used. The logic component determines the meaning of the algorithm whereas the control component only affects its efficiency. The efficiency of an algorithm can often be improved by improving the control component without changing the logic of the algorithm. We argue that computer programs would be more often correct and more easily improved and modified if their logic and control aspects were identified and separated in the program text.</p><p>算法可以视为由逻辑部分和控制部分组成。其中，逻辑部分指明了解决问题时需要用到的知识。而控制部分则（根据逻辑部分用到的知识来）决定解决问题时需要用到的策略。逻辑部分确定算法的含义，而控制部分只影响其效率。在不改变算法逻辑部分的条件下，通常可以通过改进算法控制部分来提升算法的效率。我们认为，如果软件代码中的逻辑部分和控制部分能够有效的识别和区分开，那么软件将会变得更加容易改进和维护。</p><p>We have argued that conventional algorithms can usefully be regarded as consisting of two components:<br>(1) a logic component which specifies what is to be done and<br>(2) a control component which determines how it is to be done.</p><p>我们认为传统的算法可以被视为由两个部分组成：<br>(1) 一个表明算法<code>做什么</code>的逻辑部分<br>(2) 和一个决定了算法<code>如何做</code>的控制部分。</p></blockquote><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p>那么如何来理解<code>算法 = 逻辑 + 控制</code>以及如何区分算法中的<code>逻辑</code>和<code>控制</code>呢？作者举例几个例子来阐述，其中一个简单易懂的例子就是阶乘。</p><p>首先，阶乘的定义是：</p><ol><li><code>0</code>的阶乘是<code>1</code>。</li><li>如果<code>x</code>的阶乘是<code>v</code>，那么<code>x+1</code>的阶乘就是<code>v*(x+1)</code>。</li></ol><p>我们一般有两种方式计算一个数n的阶乘：</p><ol><li>自底向上。首先计算<code>0</code>的阶乘，然后是<code>1</code>，然后是<code>2</code>…一直到<code>n</code>。本质就是从<code>0</code>循环计算直到<code>n</code>。</li><li>自顶向下。要计算<code>n</code>的阶乘，首先就要计算<code>n-1</code>的阶乘。要计算<code>n-1</code>的阶乘，首先就要计算<code>n-2</code>的阶乘。这样一直到需要计算0的阶乘，而我们知道<code>0</code>的阶乘是<code>1</code>。本质就是递归的求解。</li></ol><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>结合<a href="#观点">Robert Kowalski的观点</a>和上面的<a href="#举例">阶乘的例子</a>来理解。</p><p>阶乘算法可以视为由两个部分组成：</p><ol><li>逻辑部分，是阶乘的定义。<br>为什么呢？逻辑部分的定义就是<code>做什么</code>，而阶乘算法的<code>做什么</code>就是计算一个数的阶乘。其中”<em>逻辑部分指明了解决问题时需要用到的知识</em>“的知识，指的就是阶乘算法的定义。换而言之，算法的逻辑部分，指定是算法的业务逻辑。</li><li>控制部分，是阶乘的计算方法。<br>为什么呢？控制部分的定义就是<code>如何做</code>，上面例子中如何计算的阶乘的方法有两种：自底向上和自顶向下。”<em>在不改变算法逻辑部分的条件下，通常可以通过改进算法控制部分来提升算法的效率。</em>“ 我们也确实可以通过优化阶乘计算过程中的细节来提高计算的效率，比如在自底向上的方法中，缓存计算过的值，避免重复计算来提高效率。但是我们很难通过调整阶乘定义的描述方式来优化整个阶乘算法的效率。</li></ol><p>另外一个容易理解的例子是排序算法。不同的排序算法都可以实现排序的功能，而不用的排序算法的效率是不同的，比如冒泡排序，归并排序等。所以对排序算法来说，排序功能是<code>逻辑部分</code>，冒泡、归并等具体的做法则是排序算法的<code>控制部分</code>。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><a href="#观点">Robert Kowalski的观点</a>帮助我们能够更好的分解程序中的算法，将<code>做什么</code>和<code>怎么做</code>的代码分开，其实也是应用<a href="https://kibazen.cn/she-ji-mo-shi-du-shu-bi-ji/">设计模式</a>中<code>策略模式</code>的过程。</p><p>我们都知道，程序是由算法和数据结构组成的（最开始由<a href="https://en.wikipedia.org/wiki/Niklaus_Wirth">Niklaus Wirth</a>在其书<a href="http://www.ethoberon.ethz.ch/WirthPubl/AD.pdf">Algorithms + Data Structures = Programs</a>提出），即<code>算法 + 数据结构 = 程序</code>，而<a href="#观点">Robert Kowalski的观点</a>则是将这个公式进一步的细化，从而让我们能够得出：<code>算法逻辑 + 算法控制 + 数据结构 = 程序</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通俗易懂的介绍CAP定理</title>
      <link href="tong-su-yi-dong-de-jie-shao-cap-ding-li/"/>
      <url>tong-su-yi-dong-de-jie-shao-cap-ding-li/</url>
      
        <content type="html"><![CDATA[<p>本文<code>意译</code>自<a href="http://ksat.me/">Kaushik Sathupadi</a>博客中的一篇博文，该博文通俗易懂的介绍了CAP定理。<br>原文：<a href="http://ksat.me/a-plain-english-introduction-to-cap-theorem">A plain english introduction to CAP Theorem</a><br>翻译：<a href="https://kibazen.cn">kibazen</a></p><hr><p>你经常会听说CAP定理，该定理指明了在设计分布式系统时的一些上限限制。与我大多数其他的教程一样，让我们通过真实世界中的例子来理解CAP定理。</p><blockquote><p>译注：CAP指：一致性（Consistency）、可用性（Availability）、分区容忍性（Partition tolerance）。</p></blockquote><h2 id="一、新的事业“记忆公司”"><a href="#一、新的事业“记忆公司”" class="headerlink" title="一、新的事业“记忆公司”"></a>一、新的事业“记忆公司”</h2><p>昨晚，当你的妻子感谢你记得她的生日，并给她买了礼物时，你的脑海中突然冒出一个奇怪的想法。大家都不擅长记忆，但是你却擅长记忆。所以，为什么不用自己的记忆天赋来创业呢？心动不如行动，于是你z在报纸上打了一个广告：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">记忆公司 —— 即使你不记得，都不会忘记是否还在为忘记很多事而烦恼？不用担心，只需一个电话就可以解决！当你需要记住某事时，拨打电话555-55-REMEN告诉我们你想记住的事。比如：打电话告诉我们你上司的电话号码，然后就可以忘记它了。当拨打同样的电话号码555-55-REMEN，我们就会告诉你上司的电话号码。收费：每次服务仅需0.1元哦！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，你与客户典型的一次对话内容就会像下面这样：</p><ul><li>客户：你好，麻烦帮我记一下我邻居的生日？</li><li>你：好的，请问是多少？</li><li>客户：1月2日</li><li>你：（记在笔记本上）已经记录好了。当你需要时请再联系我们！</li><li>客户：谢谢！</li><li>你：没关系！本次服务收费0.1元！</li></ul><h2 id="二、业务增长"><a href="#二、业务增长" class="headerlink" title="二、业务增长"></a>二、业务增长</h2><p>因为你的想法很简单，只需要笔记本和电话就能高效的完成业务，公司发展的很顺利，也收到了YCombinator的投资。公司的业务越来越多，每天都会接到上千个电话。</p><p>但是问题也开始出现了，客户需要等待越来越久电话才会接通。一些客户甚至听烦了服务电话的铃声，直接在等待接通的过程中就挂断了电话。同时，当你生病无法工作时，就会白白的丢失了一天业务。这对当天需要服务的客户来说，体验也很不好。所以，是时候扩大公司的规模了，让你的妻子也来帮忙。</p><blockquote><p>译注：随着业务的增长，单点的服务已经不能满足业务的需求。</p></blockquote><p>一个简单的计划：</p><ol><li>你和你的妻子同时接听客户的电话。</li><li>对客户来说，还是只需要记住<code>555-55-REMEN</code>这个电话。</li><li>客户的服务电话会平均且高效的分配给你们。</li></ol><h2 id="三、服务第一次出现问题"><a href="#三、服务第一次出现问题" class="headerlink" title="三、服务第一次出现问题"></a>三、服务第一次出现问题</h2><p>实施新计划的两天后，你接到了老客户John的电话。下面是当时的通话记录：</p><ul><li>John：你好！</li><li>你：欢迎拨打记忆公司热线，有什么可以帮到你？</li><li>John：请告诉我到新泽西的飞机是几点的？</li><li>你：好的，请稍等……（翻了一下自己的笔记本，没找到相关的内容）</li><li>你：你好，你好像并没有告诉我你飞机的信息，我这里找不到相关的信息。</li><li>John：什么？我昨天不是告诉你们了吗？（电话就被挂断了）</li></ul><p>怎么回事呢？John说谎了吗？你思考了一会，然后发现了问题的所在：是不是昨天是你的妻子接到的电话？然后你看妻子的笔记本上面确实有相关信息，这时你和你的妻子才认识到出问题了。</p><p>这个电话分配计划设计的有问题啊！分配系统没有保证<code>一致性</code>！客户每次打来的电话都不一定是同一个人接到，那么客户得到的回答就可能是不对的。</p><blockquote><p>译注：一致性：同样的请求，每次处理的结果应当一致。</p></blockquote><h2 id="四、解决一致性问题"><a href="#四、解决一致性问题" class="headerlink" title="四、解决一致性问题"></a>四、解决一致性问题</h2><p>你的竞争对手可能会忽略这个问题，但是你不会。于是你思考整夜，终于在早上想出了一个不错的计划：</p><ol><li>当接到客户要求我们记录事情的电话时，在挂电话之前，都要先通知另外的人新记录事情的内容。</li><li>所有人同时将新纪录事情的内容<code>更新</code>到各自的笔记本上。</li><li>因为所有人的本子上都有最新的所有已记录的事情，所以，当客户再来问之前记录的内容时，就不用问其他人，因为自己的笔记本上就可以查到了。</li></ol><p>但是这个计划有一个问题，第2步”<code>更新</code>“会影响所有人，这样大家就不能同时工作了。比如：你接到一个记录事情的电话，然后马上告诉我也需要记录这个事，这时我就没办法接听其他客户的电话了。但是这可以接受的，因为大多数客户打来电话都是查询之前的内容（记一次，问多次）。同时，这种方法也解决了之前记了事情但是查不到的问题。</p><p>“这个系统还有一个问题你没考虑到。”你的妻子说。如果我们中有一人某天没有工作时就会出问题，我们不能再记录任何新的事情，因为无法更新那个没工作的人的笔记本。这样就会出现<code>可用性</code>的问题。比如：如果你今天没工作，而此时我又接到一个更新电话，那我就没法完成更新的工作，因为我不能更新你的笔记本。</p><blockquote><p>译注：可用性：即使系统内部某些子系统出现问题，整个系统依然能正常的对外提供服务。</p></blockquote><h2 id="五、更好的解决方法"><a href="#五、更好的解决方法" class="headerlink" title="五、更好的解决方法"></a>五、更好的解决方法</h2><p>你终于意识到了为什么分布式系统并没一开始想的那么简单了。难道就找不到一个既能保证<code>一致性</code>，同时也能保证<code>可用性</code>的解决方法了吗？于是你经过彻夜的思考，在早上又想出了一个和之前的类似，但是更好的计划：</p><ol><li>当接到客户要求我们记录事情的电话时，在挂电话之前，都要先通知另外的人新记录事情的内容。</li><li>如果其他人在正常的工作的话，那么就同时将新纪录事情的内容<code>更新</code>到各自的笔记本上。如果有人没有正常工作的话，就需要给他发邮件提醒他更新。等到他们开始正常工作时，首先需要根据所有收到的更新邮件来更新笔记本，更新完成后，才能开始接电话，为客户提供服务。</li><li>因为所有人的本子上都有最新的所有已记录的事情，所以，当客户再来问之前记录的内容时，就不用问其他人，因为自己的笔记本上就可以查到了。</li></ol><p>太好了！这下“记忆公司”提供的服务就能同时保证<code>一致性</code>和<code>可用性</code>了。</p><h2 id="六、妻子怒了"><a href="#六、妻子怒了" class="headerlink" title="六、妻子怒了"></a>六、妻子怒了</h2><p>有了上面的计划，现在公司的事情进展的很顺利。但是如果你和你的妻子都在上班，而其中一个人接收到更新电话时并没有通知其他人更新呢？比如：你惹你妻子不高兴了，她决定今天一天都不理你了，也不通知你更新笔记本了。那么今天你妻子的笔记本的所有更新你笔记本上都没有。所以，上面的计划只是保证<code>一致性</code>和<code>可用性</code>，并没有保证<code>分区容忍性</code>。<br>你也可以选择在哄好妻子之前，不接任何客户的电话来避免这个问题。但是在你哄好妻子前的这段时间，系统又是不可用的，这样又没法保证<code>可用性</code>了。</p><blockquote><p>分区容忍性：即使各个系统暂时无法正常的通信，整个系统依然能正常的对外提供服务。</p></blockquote><h2 id="七、结论"><a href="#七、结论" class="headerlink" title="七、结论"></a>七、结论</h2><p>好了，让我们来看看CAP定理到底在说什么。CAP定理说的是：当你设计分布式系统时，无法同时让系统满足<code>一致性</code>、<code>可用性</code>和<code>分区容忍性</code>。顶多只能满足其中的两个：</p><ol><li><code>一致性</code>：对你的客户来说，一旦他们更新要记住的事。无论何时，他们总是能获取到最新的记录内容。</li><li><code>可用性</code>：只要你和你的妻子中有人在上班，公司就能正常且正确运行。</li><li><code>分区容忍性</code>：即使你和你的妻子有一段时间不沟通了，公司依然能正常且正确的运行。</li></ol><h2 id="额外奖励：-请一个可以来回跑的秘书来保证最终结果的一致性"><a href="#额外奖励：-请一个可以来回跑的秘书来保证最终结果的一致性" class="headerlink" title="额外奖励： 请一个可以来回跑的秘书来保证最终结果的一致性"></a>额外奖励： 请一个可以来回跑的秘书来保证最终结果的一致性</h2><p>这里还有一个其他的解决方法。可以请一个秘书，当你或你的妻子笔记本更新时，她可以帮你们自动的更新其他人的笔记本上。这么做的最大好处就是：在有记录更新时，就不用等待其他人的笔记本更新完了才能接下一个电话了。这也是很多NoSQL系统的工作原理：数据库节点本地更新自己，然后一个后台进程再将这些修改同步到其他的数据库节点。这种方法的唯一问题就在于会在短时间内丢失一致性。比如：你的妻子接到了客户的更新电话，在秘书把你妻子笔记本上的这个变化同步到你的笔记本上之前，这个客户又打电话来问，但是是你接到了这个电话，这时他就会得到一个错误的回答。话虽如此，这种情况还是比较少的。比如：假如你的客户不会在5分钟内就来打电话问呢。</p><p>这个就是CAP和最终一致性，本文到此结束。</p>]]></content>
      
      
      <categories>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机中浮点数的表示方法</title>
      <link href="ji-suan-ji-zhong-fu-dian-shu-de-biao-shi-fang-fa/"/>
      <url>ji-suan-ji-zhong-fu-dian-shu-de-biao-shi-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="IEEE-754标准"><a href="#IEEE-754标准" class="headerlink" title="IEEE 754标准"></a>IEEE 754标准</h2><p>在C/C++等编程语言中，浮点数在计算机中的表示采用的是IEEE 754标准。该标准一共的规定了四种表示浮点数值的方式，其中常见的表示方式有两种：单精确度（32位）和双精确度（64位）。这两种表示方式在C/C++语言中分别可以用<code>float</code>和<code>double</code>关键字来定义。</p><h2 id="单精度浮点数的表示方法"><a href="#单精度浮点数的表示方法" class="headerlink" title="单精度浮点数的表示方法"></a>单精度浮点数的表示方法</h2><p>单精度浮点数的表示方法其实就是把一个32位分成了三个部分：</p><ol><li>第一个部分，占1位，表示浮点数的符号，英文Sign，简称为S。</li><li>第二个部分，占8位，表示浮点数的指数，英文Exponent，简称为E。</li><li>第三个部分，占23位，表示浮点数的尾数，英文Mantissa，简称为M。</li></ol><p>如下图所示：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"> 31         22                    0+----------------------------------+|S|EEEEEEEE|MMMMMMMMMMMMMMMMMMMMMMM|+----------------------------------+   30     23<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对应浮点数表示的值为：</p><script type="math/tex; mode=display">(-1)^S \cdot (1 + \frac{M}{2^{23}}) \cdot 2^{(E-127)}</script><p>结合上面的公式，来理解各个部分的意义就更容易了：</p><ol><li><p>符号部分，$(-1)^S$</p><p> 当S为0时，$(-1)^0 = 1$，表示浮点数的值大于0；同理，当S为1时，$(-1)^1 = -1$，表示浮点数的值小于0。</p></li><li><p>指数部分，$2^{(E-127)}$</p><p> 首先要明白：对于任何一个正实数x，都可以找到一个整数n，使得$2^n &lt;= x &lt; 2^{n+1}$。举个例子，比如5，可以找到n=2，使得$2^2 &lt;= 5 &lt; 2^3$，即$4 &lt;= 5 &lt; 8$。浮点数中的指数部分就是这里的n。</p><p> 那么为什么还要减去127呢？因为当浮点数值的绝对值小于1时，指数部分其实是小于0的。举个例子，比如0.45，只有$n=-2$时，使得$2^{-2} &lt;= 0.45 &lt; 2^{-1}$，即$0.25 &lt;= 0.45 &lt; 0.5$。而浮点数中指数部分占8位，可以表示范围[0-$2^8$)，即[0-256)，为了在指数部分能够表示负数，<code>IEEE 754规定</code>减去127，即$n = E - 127$。所以，如果浮点数的$n=-2$，那么实际的E应该是125。</p></li><li><p>尾数部分，$(1 + \frac{M}{2^{23}})$</p><p> 尾数部分占23位，可以表示范围[0-$2^{23}$)，即[0-8388608)。</p><p> 可以这样理解尾数部分：把一条线分成8388608个段，也就是把$2^n$到$2^{n+1}$分成8388608个线段。尾数部分的值M，表示从$2^n$到浮点数值的绝对值x所要经过的线段数量，也就是$2^n$到x的长度占$2^n$到$2^{n+1}$长度的比例是多少。这个比例的值就是尾数部分公式中$\frac{M}{2^{23}}$的来由，而加1则表示线段的起点$2^n$的值。</p></li></ol><h2 id="单精度浮点数举例"><a href="#单精度浮点数举例" class="headerlink" title="单精度浮点数举例"></a>单精度浮点数举例</h2><p>有了上面的说明，再结合例子来理解一下，比如浮点数3.14：</p><ol><li><p>符号部分</p><p> 因为3.14大于0，所以$S = 0$。</p></li><li><p>指数部分</p><p> $2^1 &lt;= 3.14 &lt; 2^2$，所以$n=1$，那么$E = n + 127 = 128$。</p></li><li><p>尾数部分</p><p> $2^1$到3.14的长度占$2^1$到$2^2$长度的比例是$\frac{(3.14 - 2^1)}{(2^2 - 2^1)} = 0.57$</p></li></ol><p>总线段数量为$2^{23}$，那么，从$2^1$到3.14所要经过的线段数量$M = 0.57 * 2^{23} = 4781506.56$，四舍五入，转换成整数结果为$M = 4781507$。<code>因为有四舍五入，所以浮点数保存的数据和实际数据是有误差的。</code></p><p>把S、E、M转换成二进制，就可以得到3.14的二进制表示<code>0x4048f5c3</code>：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text"> S     E             M+----------------------------------+|0|10000000|10010001111010111000011|+----------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>最后代入浮点数公式计算：</p><script type="math/tex; mode=display">(-1)^0 \cdot (1 + \frac{4781507}{2^{23}}) \cdot 2^{(128-127)} = 3.1400001049041748046875</script><p>也可以使用<a href="https://www.h-schmidt.net/FloatConverter/IEEE754.html">IEEE-754浮点数转换工具</a>来分析浮点数的表示方法。</p><h2 id="双精度浮点数的表示方法"><a href="#双精度浮点数的表示方法" class="headerlink" title="双精度浮点数的表示方法"></a>双精度浮点数的表示方法</h2><p>双精度浮点数和单精度浮点数的原理是一样的，只是各个部分长度不同而已。</p><p>双精度浮点数的表示方法其实就是把一个64位分成了三个部分：</p><ol><li>第一个部分，占1位，表示浮点数的符号，英文Sign，简称为S。</li><li>第二个部分，占11位，表示浮点数的指数，英文Exponent，简称为E。</li><li>第三个部分，占52位，表示浮点数的尾数，英文Mantissa，简称为M。</li></ol><p>对应浮点数表示的值为：</p><script type="math/tex; mode=display">(-1)^S \cdot (1 + \frac{M}{2^{52}}) \cdot 2^{(E-1023)}</script>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮点数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《重构：改善既有代码的设计(第2版)》读书笔记</title>
      <link href="chong-gou-gai-shan-ji-you-dai-ma-de-she-ji-di-2-ban-du-shu-bi-ji/"/>
      <url>chong-gou-gai-shan-ji-you-dai-ma-de-she-ji-di-2-ban-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>重构(refactoring)：在不改变代码外在行为的前提下，对代码做出修改，以改进程序的内部结构。重构的本质就是在代码写好之后改进它的设计。</li></ol><h2 id="第1章-重构，第一个示例"><a href="#第1章-重构，第一个示例" class="headerlink" title="第1章 重构，第一个示例"></a>第1章 重构，第一个示例</h2><ol><li>如果你要给程序添加一个特性，但发现代码因缺乏良好的结构而不易于进行更改，那就先重构那个程序，使其比较容易添加该特性，然后再添加该特性。</li><li>需求的变化使重构变得必要。如果一段代码能正常工作，并且不会再被修改，那么完全可以不去重构它。</li><li>重构的第一步：确保即将被修改的代码拥有一组可靠的测试。这些测试必须有自我检验能力。</li><li>无论每次重构多么简单，养成重构后即运行测试的习惯非常重要。</li><li>对于重构过程的性能问题的处理：大多数情况下可以忽略它。如果重构引入了性能损耗，先完成重构，再做性能优化。</li><li>编程时，需要遵循营地法则：保证你离开时的代码库一定比来时更健康。</li><li>好代码的检验标准就是人们是否能轻而易举地修改它。</li></ol><h2 id="第2章-重构的原则"><a href="#第2章-重构的原则" class="headerlink" title="第2章 重构的原则"></a>第2章 重构的原则</h2><ol><li>重构(名词)：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。</li><li>重构(动词)：使用一系列重构手法，在不改变软件可观察行为的前提下，调整其结构。</li><li>如果有人说他们的代码在重构过程中有一两天时间不可用，基本上可以确定，他们在做的事不是重构。</li><li>“结构调整”(restructuring)泛指对代码库进行的各种形式的重新组织或清理，重构则是特定的一类结构调整。</li><li>使用重构技术开发软件时，添加新功能和重构，同一时间，二者只能做其一。</li><li>为何重构：重构改进软件的设计；重构使软件更容易理解；重构帮助找到bug；重构提高编程速度。</li><li>何时重构：预备性重构(添加新功能之前重构)；帮助理解的重构(提升代码阅读性)；捡垃圾式重构(消除代码冗余等)；有计划的重构(固定周期对之前写过的代码重构)和见机行事的重构(写新代码过程中发现其他代码需要重构)；长期重构(更新三方库等)；代码复审时重构。</li><li>不必将重构与添加新功能在版本控制的提交中分开。原因：重构常因新功能所致，单独提交脱离重构的上下文，体现不出为何需要重构；重构的代码和新功能代码高耦合。</li><li>如果经理不能接受代码重构需要花时间，那就不要给经理说。</li><li>何时不应该重构：凌乱且不需要修改的代码；重写比重构更容易的代码。</li><li>重构的挑战：延缓新功能开发；代码所有权(代码是其他部门写的)；分支(多分支开发，最后合并代码)；测试(代码测试不完善，无法保证重构后不引入新BUG)；遗留代码；数据库(改字段值)。</li><li>重构的唯一目的就是让我们开发更快，用更少的工作量创造更大的价值。</li><li>“写代码之前就完成软件的设计和架构”这个思想是不正确的。因为需求会变，且一开始的考虑而不是完全的周全。</li><li>三大实践：自测试代码、持续集成、重构。</li><li>用性能测试工具去定位性能问题，而不是根据对代码的了解来猜测。</li><li>一些语言(Java、C#等)可以借助工具进行自动化的重构。</li></ol><h2 id="第3章-代码的坏味道"><a href="#第3章-代码的坏味道" class="headerlink" title="第3章 代码的坏味道"></a>第3章 代码的坏味道</h2><ol><li>当你”闻到”代码中有坏味道时，就表明代码需要进行重构了。</li><li>当你感觉需要撰写注释时，请先尝试重构，试着让所有注释都变得多余。</li><li>神秘命名。</li><li>重复代码。</li><li>过长函数。</li><li>过长参数列表。</li><li>全局数据。(PS：慎用单例模式)</li><li>可变数据(如在js中使用Immutable.js)。</li><li>发散式变化(违背了单一职责原则)。</li><li>霰弹式修改(需求变化是，需要在很多个地方做修改。封装性不够好)。</li><li>依恋情结(违背了依赖倒置原则)。</li><li>数据泥团(很多类中的变量名相同，考虑抽象出基类)。</li><li>基本类型偏执(针对问题域定义新的类型而不是用基本类型，比如定义坐标类，而不是用std::pair)。</li><li>重复的switch。</li><li>循环语句。</li><li>冗赘的元素(有些类结构是不必要的)。</li><li>夸夸其谈通用性。</li><li>临时字段(类内部某个字段仅为某种特定情况而设)。</li><li>过长的消息链。</li><li>中间人(过度使用委托)。</li><li>内幕交易(用委托替代继承等)。</li><li>过大的类。</li><li>异曲同工的类。</li><li>纯数据类(使用面向对象编程而不是面向过程)。</li><li>被拒绝的遗赠(子类复用了超类的实现，却又不愿意支持超类的接口，那就不要用继承)。</li><li>注释(过长的注释)。</li></ol><h2 id="第4章-构筑测试体系"><a href="#第4章-构筑测试体系" class="headerlink" title="第4章 构筑测试体系"></a>第4章 构筑测试体系</h2><ol><li>稳固的测试集合是正确地进行重构的前提条件之一。</li><li>确保所有测试都完全自动化，让它们检查自己的测试结果。</li><li>一套测试就是一个强大的bug侦测器，能够大大缩减查找bug所需的时间。</li><li>测试驱动开发的编程方式依赖于下面这个短循环：先编写一个（失败的）测试，编写代码使测试通过，然后进行重构以保证代码整洁。</li><li>总是确保测试不该通过时真的会失败。</li><li>频繁地运行测试。对于你正在处理的代码，与其对应的测试至少每隔几分钟就要运行一次，每天至少运行一次所有的测试。</li><li>编写未臻完善的测试并经常运行，好过对完美测试的无尽等待。</li><li>考虑可能出错的边界条件，把测试火力集中在那儿。</li><li>如果错误会导致脏数据在应用中到处传递，或是产生一些很难调试的失败，考虑引入断言手法，使代码不满足预设条件时快速失败。不用为这样的失败断言添加测试，它们本身就是一种测试的形式。</li><li>不要因为测试无法捕捉所有的bug就不写测试，因为测试的确可以捕捉到大多数bug。</li><li>每当你收到bug报告，请先写一个单元测试来暴露这个bug。</li></ol><h2 id="第5章-介绍重构名录"><a href="#第5章-介绍重构名录" class="headerlink" title="第5章 介绍重构名录"></a>第5章 介绍重构名录</h2><ol><li>书的剩余部分是重构方法的索引，作为参看书来使用。</li></ol><h2 id="第6章-第一组重构"><a href="#第6章-第一组重构" class="headerlink" title="第6章 第一组重构"></a>第6章 第一组重构</h2><ol><li>提炼函数 vs 内联函数。</li><li>提炼变量 vs 内联变量。</li><li>改变函数声明。</li><li>封装变量。</li><li>变量改名。</li><li>引入参数对象。</li><li>函数组合成类v</li><li>函数组合成变换。</li><li>拆分阶段。</li></ol><h2 id="第7章-封装"><a href="#第7章-封装" class="headerlink" title="第7章 封装"></a>第7章 封装</h2><ol><li>封装记录。</li><li>封装集合。</li><li>以对象取代基本类型。</li><li>以查询取代临时变量。</li><li>提炼类 vs 内联类。</li><li>隐藏委托关系 vs 移除中间人。</li><li>替换算法。</li></ol><h2 id="第8章-搬移特性"><a href="#第8章-搬移特性" class="headerlink" title="第8章 搬移特性"></a>第8章 搬移特性</h2><ol><li>搬移函数。</li><li>搬移字段。</li><li>搬移语句到函数 vs 搬移语句到调用者。</li><li>移动语句。</li><li>拆分循环。</li><li>以管道取代循环。</li><li>移除死代码。</li></ol><h2 id="第9章-重新组织数据"><a href="#第9章-重新组织数据" class="headerlink" title="第9章 重新组织数据"></a>第9章 重新组织数据</h2><ol><li>拆分变量。</li><li>字段改名。</li><li>以查询取代派生变量。</li><li>将引用对象改为值对象 vs 将值对象改为引用对象。</li></ol><h2 id="第10章-简化条件逻辑"><a href="#第10章-简化条件逻辑" class="headerlink" title="第10章 简化条件逻辑"></a>第10章 简化条件逻辑</h2><ol><li>分解条件表达式 vs 合并条件表达式。</li><li>以卫语句取代嵌套条件表达式(Replace Nested Conditional with Guard Clauses)。</li><li>以多态取代条件表达式。</li><li>引入特例。</li><li>引入断言。</li></ol><h2 id="第11章-重构API"><a href="#第11章-重构API" class="headerlink" title="第11章 重构API"></a>第11章 重构API</h2><ol><li>将查询函数和修改函数分离。</li><li>函数参数化。</li><li>移除标记参数。</li><li>保持对象完整。</li><li>以查询取代参数 vs 以参数取代查询。</li><li>移除设值函数。</li><li>以工厂函数取代构造函数。</li><li>以命令取代函数 vs 以函数取代命令。</li></ol><h2 id="第12章-处理继承关系"><a href="#第12章-处理继承关系" class="headerlink" title="第12章 处理继承关系"></a>第12章 处理继承关系</h2><ol><li>函数上移 vs 函数下移。</li><li>字段上移 vs 字段下移。</li><li>构造函数本体上移。</li><li>以子类取代类型码 vs 移除子类。</li><li>提炼超类。</li><li>折叠继承体系。</li><li>以委托取代子类。</li><li>以委托取代超类。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 重构 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《设计模式》读书笔记</title>
      <link href="she-ji-mo-shi-du-shu-bi-ji/"/>
      <url>she-ji-mo-shi-du-shu-bi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h2><h3 id="1-1-设计模式的编目"><a href="#1-1-设计模式的编目" class="headerlink" title="1.1 设计模式的编目"></a>1.1 设计模式的编目</h3><ol><li><strong>Abstract Factory</strong>: 提供了一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</li><li><strong>Adapter</strong>: 将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</li><li><strong>Bridge</strong>: 将抽象部分与它的实现部分分离，使它们都可以独立地变化。</li><li><strong>Builder</strong>: 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</li><li><strong>Chain of Responsibility</strong>: 为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</li><li><strong>Command</strong>: 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</li><li><strong>Composite</strong>: 将对象组合成树形结构以表示“部分-整体”的层次结构。Composite使得客户对单个对象和复合对象的使用具有一致性。</li><li><strong>Decorator</strong>: 动态地给一个对象添加一些额外的职责。就扩展功能而言，Decorator模式比生成子类方式更为灵活。</li><li><strong>Facade</strong>: 为子系统中的一组接口提供一个一致，Facade模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</li><li><strong>Factory Method</strong>: 定义一个用于创建对象的接口，让子类决定将哪一个类实例化。Factory Method是一个类的实例化延迟到其子类。</li><li><strong>Flyweight</strong>: 运用共享技术有效地支持大量细粒度的对象。</li><li><strong>Interpreter</strong>: 给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</li><li><strong>Iterator</strong>: 提供了一个方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</li><li><strong>Mediator</strong>: 用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li><li><strong>Memento</strong>: 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保证这个状态。这样以后就可将该对象恢复到保持的状态。</li><li><strong>Observer</strong>: 定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。</li><li><strong>Prototype</strong>: 用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</li><li><strong>Proxy</strong>: 为其他对象提供一个代理以控制对这个对象的访问。</li><li><strong>Singleton</strong>: 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li><li><strong>State</strong>: 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</li><li><strong>Strategy</strong>: 定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户。</li><li><strong>Template Method</strong>: 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</li><li><strong>Visitor</strong>: 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</li></ol><h3 id="1-2-组织编目"><a href="#1-2-组织编目" class="headerlink" title="1.2 组织编目"></a>1.2 组织编目</h3><p><img src="/images/《设计模式》读书笔记/设计模式空间.png" alt="设计模式空间.png"></p><h3 id="1-3-怎样选择设计模式"><a href="#1-3-怎样选择设计模式" class="headerlink" title="1.3 怎样选择设计模式"></a>1.3 怎样选择设计模式</h3><p><img src="/images/《设计模式》读书笔记/设计模式所支持的设计的可变方面.png" alt="设计模式所支持的设计的可变方面"></p><hr><h2 id="二、创建型模式"><a href="#二、创建型模式" class="headerlink" title="二、创建型模式"></a>二、创建型模式</h2><h3 id="2-1-Abstract-Factory-抽象工厂"><a href="#2-1-Abstract-Factory-抽象工厂" class="headerlink" title="2.1 Abstract Factory(抽象工厂)"></a>2.1 Abstract Factory(抽象工厂)</h3><h4 id="2-1-1-类图"><a href="#2-1-1-类图" class="headerlink" title="2.1.1 类图"></a>2.1.1 类图</h4><p><img src="/images/《设计模式》读书笔记/抽象工厂类图.png" alt="抽象工厂类图"></p><h4 id="2-1-2-参与者"><a href="#2-1-2-参与者" class="headerlink" title="2.1.2 参与者"></a>2.1.2 参与者</h4><p>AbstractFactory</p><ol><li>声明一个创建抽象产品对象的操作接口。</li></ol><p>ConcreteFactory</p><ol><li>实现创建具体产品对象的操作。</li></ol><p>AbstractProduct</p><ol><li>为一类产品声明一个接口。</li></ol><p>ConcreteProduct</p><ol><li>定义一个将被相应的具体工厂创建的产品对象。</li><li>实现AbstractProduct接口。</li></ol><p>Client</p><ol><li>仅使用由AbstractFactory和AbstractProduct类声明的接口。</li></ol><h4 id="2-1-3-协作"><a href="#2-1-3-协作" class="headerlink" title="2.1.3 协作"></a>2.1.3 协作</h4><ol><li>通常在运行时刻创建一个ConcreteFactory类的实例。这一具体的工厂创建具有特定实现的产品对象。为创建不同的产品对象，客户应使用不同的具体工程。</li><li>AbstractFactory将产品对象的创建延迟到它的ConcreteFactory子类。</li></ol><h3 id="2-2-Builder-生成器"><a href="#2-2-Builder-生成器" class="headerlink" title="2.2 Builder(生成器)"></a>2.2 Builder(生成器)</h3><h4 id="2-2-1-类图"><a href="#2-2-1-类图" class="headerlink" title="2.2.1 类图"></a>2.2.1 类图</h4><p><img src="/images/《设计模式》读书笔记/生成器类图.png" alt="生成器类图"></p><h4 id="2-2-2-参与者"><a href="#2-2-2-参与者" class="headerlink" title="2.2.2 参与者"></a>2.2.2 参与者</h4><p>Builder</p><ol><li>为创建一个Product对象的各个部件指定抽象接口。</li></ol><p>ConcreteBuilder</p><ol><li>实现Builder的接口以构造和装配该产品的各个部件。</li><li>定义并明确它所创建的表示。</li><li>提供一个检索产品的接口。</li></ol><p>Director</p><ol><li>构造一个使用Builder接口的对象。</li></ol><p>Product</p><ol><li>表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义它的装配过程。</li><li>包含定义组成部件的类，包括将这些部件装配成最终产品的接口。</li></ol><h4 id="2-2-3-协作"><a href="#2-2-3-协作" class="headerlink" title="2.2.3 协作"></a>2.2.3 协作</h4><ol><li>客户创建Director对象，并用它所想要的Builder对象进行配置。</li><li>一旦产品部件被生成，导向器就会通知生成器。</li><li>生成器处理导向器的请求，并将部件添加到该产品中。</li><li>客户从生成器中检索产品。</li></ol><p>交互图</p><p><img src="/images/《设计模式》读书笔记/生成器协作类图.png" alt="生成器协作类图"></p><h3 id="2-3-Factory-Method-工程方法"><a href="#2-3-Factory-Method-工程方法" class="headerlink" title="2.3 Factory Method(工程方法)"></a>2.3 Factory Method(工程方法)</h3><h4 id="2-3-1-类图"><a href="#2-3-1-类图" class="headerlink" title="2.3.1 类图"></a>2.3.1 类图</h4><p><img src="/images/《设计模式》读书笔记/工程方法类图.png" alt="工程方法类图"></p><h4 id="2-3-2-参与者"><a href="#2-3-2-参与者" class="headerlink" title="2.3.2 参与者"></a>2.3.2 参与者</h4><p>Product</p><ol><li>定义工厂方法所创建的对象的接口。</li></ol><p>ConcreteProduct</p><ol><li>实现Product接口。</li></ol><p>Creator</p><ol><li>声明工厂方法，该方法返回一个Product类型的对象。Creator也可以定义一个工厂方法的缺省实现，它返回一个缺省的ConcreteProduct对象。</li><li>也可以调用工厂方法以创建一个Product对象。</li></ol><p>ConcreteCreator</p><ol><li>重定义工厂方法以返回一个ConcreteProduct实例。</li></ol><h4 id="2-3-3-协作"><a href="#2-3-3-协作" class="headerlink" title="2.3.3 协作"></a>2.3.3 协作</h4><ol><li>Creator依赖于它的子类来定义工厂方法，所以它返回一个适当的ConcreteProduct实例。</li></ol><h3 id="2-4-Prototype-原型"><a href="#2-4-Prototype-原型" class="headerlink" title="2.4 Prototype(原型)"></a>2.4 Prototype(原型)</h3><h4 id="2-4-1-类图"><a href="#2-4-1-类图" class="headerlink" title="2.4.1 类图"></a>2.4.1 类图</h4><p><img src="/images/《设计模式》读书笔记/原型类图.png" alt="原型类图"></p><h4 id="2-4-2-参与者"><a href="#2-4-2-参与者" class="headerlink" title="2.4.2 参与者"></a>2.4.2 参与者</h4><p>Prototype</p><ol><li>声明一个克隆自身的接口。</li></ol><p>ConcretePrototype</p><ol><li>实现一个克隆自身的操作。</li></ol><p>Client</p><ol><li>让一个原型克隆自身从而创建一个新的对象。</li></ol><h4 id="2-4-3-协作"><a href="#2-4-3-协作" class="headerlink" title="2.4.3 协作"></a>2.4.3 协作</h4><ol><li>客户请求一个原型克隆自身。</li></ol><h3 id="2-5-Singleton-单件"><a href="#2-5-Singleton-单件" class="headerlink" title="2.5 Singleton(单件)"></a>2.5 Singleton(单件)</h3><h4 id="2-5-1-类图"><a href="#2-5-1-类图" class="headerlink" title="2.5.1 类图"></a>2.5.1 类图</h4><p><img src="/images/《设计模式》读书笔记/单件类图.png" alt="单件类图"></p><h4 id="2-5-2-参与者"><a href="#2-5-2-参与者" class="headerlink" title="2.5.2 参与者"></a>2.5.2 参与者</h4><p>Singleton</p><ol><li>定义一个Instance操作，允许客户访问它的唯一实例。Instance是一个类操作（C++中的一个静态成员函数）。</li><li>可能负责创建它自己的唯一实例。</li></ol><h4 id="2-5-3-协作"><a href="#2-5-3-协作" class="headerlink" title="2.5.3 协作"></a>2.5.3 协作</h4><ol><li>客户只能通过Singleton的Instance操作访问一个Singleton的实例。</li></ol><hr><h2 id="三、结构型模式"><a href="#三、结构型模式" class="headerlink" title="三、结构型模式"></a>三、结构型模式</h2><h3 id="3-1-Adapter-适配器"><a href="#3-1-Adapter-适配器" class="headerlink" title="3.1 Adapter(适配器)"></a>3.1 Adapter(适配器)</h3><h4 id="3-1-1-类图"><a href="#3-1-1-类图" class="headerlink" title="3.1.1 类图"></a>3.1.1 类图</h4><p>类版本</p><p><img src="/images/《设计模式》读书笔记/适配器类版本类图.png" alt="适配器类版本类图"></p><p>对象版本</p><p><img src="/images/《设计模式》读书笔记/适配器对象版本类图.png" alt="适配器对象版本类图"></p><h4 id="3-1-2-参与者"><a href="#3-1-2-参与者" class="headerlink" title="3.1.2 参与者"></a>3.1.2 参与者</h4><p>Target</p><ol><li>定义Client使用的与特定领域相关的接口。</li></ol><p>Client</p><ol><li>与符合Target接口的对象协同。</li></ol><p>Adaptee</p><ol><li>定义一个已经存在的接口，这个接口需要适配。</li></ol><p>Adapter</p><ol><li>对Adaptee的接口与Target接口进行适配。</li></ol><h4 id="3-1-3-协作"><a href="#3-1-3-协作" class="headerlink" title="3.1.3 协作"></a>3.1.3 协作</h4><ol><li>Client在Adapter实例上调用一些操作。接着适配器调用Adaptee的操作实现这个请求。</li></ol><h3 id="3-2-Bridge-桥接"><a href="#3-2-Bridge-桥接" class="headerlink" title="3.2 Bridge(桥接)"></a>3.2 Bridge(桥接)</h3><h4 id="3-2-1-类图"><a href="#3-2-1-类图" class="headerlink" title="3.2.1 类图"></a>3.2.1 类图</h4><p><img src="/images/《设计模式》读书笔记/桥接类图.png" alt="桥接类图"></p><h4 id="3-2-2-参与者"><a href="#3-2-2-参与者" class="headerlink" title="3.2.2 参与者"></a>3.2.2 参与者</h4><p>Abstraction</p><ol><li>定义抽象类的接口。</li><li>维护一个指向Implementor类型对象的指针。</li></ol><p>RefinedAbstraction</p><ol><li>扩充由Abstraction定义的接口。</li></ol><p>Implementor</p><ol><li>定义实现类的接口，该接口不一定要与Abstraction的接口完全一致；事实上这两个接口可以完全不同。一般来讲，Implementor接口仅提供基本操作，而Abstraction则定义了基于这些基本操作的较高层次的操作。</li></ol><p>ConcreteImplementor</p><ol><li>实现Implementor接口并定义它的具体实现。</li></ol><h4 id="3-2-3-协作"><a href="#3-2-3-协作" class="headerlink" title="3.2.3 协作"></a>3.2.3 协作</h4><ol><li>Abstraction将client的请求转发给它的Implementor对象。</li></ol><h3 id="3-3-Composite-组合"><a href="#3-3-Composite-组合" class="headerlink" title="3.3 Composite(组合)"></a>3.3 Composite(组合)</h3><h4 id="3-3-1-类图"><a href="#3-3-1-类图" class="headerlink" title="3.3.1 类图"></a>3.3.1 类图</h4><p><img src="/images/《设计模式》读书笔记/组合类图.png" alt="组合类图"></p><h4 id="3-3-2-参与者"><a href="#3-3-2-参与者" class="headerlink" title="3.3.2 参与者"></a>3.3.2 参与者</h4><p>Component</p><ol><li>为组合中的对象声明接口。</li><li>在适当的情况下，实现所有类共有接口的缺省行为。</li><li>声明一个接口用于访问和管理Component的子组件。</li><li>(可选)在递归结构中定义一个接口，用于访问一个父组件，并在合适的情况下实现它。</li></ol><p>Leaf</p><ol><li>在组合中表示叶节点对象，叶节点没有子节点。</li><li>在组合中定义图元对象的行为。</li></ol><p>Composite</p><ol><li>定义有子部件的那些部件的行为。</li><li>存储子部件。</li><li>在Component接口中实现与子部件有关的操作。</li></ol><p>Client</p><ol><li>通过Component接口操纵组合部件的对象。</li></ol><h4 id="3-3-3-协作"><a href="#3-3-3-协作" class="headerlink" title="3.3.3 协作"></a>3.3.3 协作</h4><ol><li>用户使用Component类接口与组合结构中的对象进行交互。如果接收者是一个叶节点，则直接处理请求。如果接收者是Composite，它通常将请求发送给它的子部件，在转发请求之前与/或之后可能执行一些辅助操作。</li></ol><h3 id="3-4-Decorator-装饰"><a href="#3-4-Decorator-装饰" class="headerlink" title="3.4 Decorator(装饰)"></a>3.4 Decorator(装饰)</h3><h4 id="3-4-1-类图"><a href="#3-4-1-类图" class="headerlink" title="3.4.1 类图"></a>3.4.1 类图</h4><p><img src="/images/《设计模式》读书笔记/装饰类图.png" alt="装饰类图"></p><h4 id="3-4-2-对象结构示例图"><a href="#3-4-2-对象结构示例图" class="headerlink" title="3.4.2 对象结构示例图"></a>3.4.2 对象结构示例图</h4><p><img src="/images/《设计模式》读书笔记/装饰对象结构示例图.png" alt="装饰对象结构示例图"></p><h4 id="3-4-3-参与者"><a href="#3-4-3-参与者" class="headerlink" title="3.4.3 参与者"></a>3.4.3 参与者</h4><p>Component</p><ol><li>定义一个对象接口，可以给这些对象动态地添加职责。</li></ol><p>ConcreteComponent</p><ol><li>定义一个对象，可以给这个对象添加一些职责。</li></ol><p>Decorator</p><ol><li>维持一个指向Component对象的指针，并定义一个与Component接口一致的接口。</li></ol><p>ConcreteDecorator</p><ol><li>向组件添加职责。</li></ol><h4 id="3-4-4-协作"><a href="#3-4-4-协作" class="headerlink" title="3.4.4 协作"></a>3.4.4 协作</h4><ol><li>Decorator将请求转发给它的Component对象，并有可能在转发请求前后执行一些附加的动作。</li></ol><h3 id="3-5-Facade-外观"><a href="#3-5-Facade-外观" class="headerlink" title="3.5 Facade(外观)"></a>3.5 Facade(外观)</h3><h4 id="3-5-1-类图"><a href="#3-5-1-类图" class="headerlink" title="3.5.1 类图"></a>3.5.1 类图</h4><p><img src="/images/《设计模式》读书笔记/外观类图.png" alt="外观类图"></p><h4 id="3-5-2-参与者"><a href="#3-5-2-参与者" class="headerlink" title="3.5.2 参与者"></a>3.5.2 参与者</h4><p>Facade</p><ol><li>知道哪些子系统类负责处理请求。</li><li>将客户的请求代理给适当的子系统对象。</li></ol><p>Subsystem classes</p><ol><li>实现子系统的功能。</li><li>处理由Facade对象指派的任务。</li><li>没有facade的任何相关信息；即没有指向facade的指针。</li></ol><h4 id="3-5-3-协作"><a href="#3-5-3-协作" class="headerlink" title="3.5.3 协作"></a>3.5.3 协作</h4><ol><li>客户程序通过发送请求给Facade的方式与子系统通信，Facade将这些消息转发给适当的子系统对象。尽管是子系统中的有关对象在做实际工作，但Facade模式本身也必须将它的接口转换成子系统的接口。</li><li>使用Facade的客户程序不需要直接访问子系统对象。</li></ol><h3 id="3-6-Flyweight-享元"><a href="#3-6-Flyweight-享元" class="headerlink" title="3.6 Flyweight(享元)"></a>3.6 Flyweight(享元)</h3><h4 id="3-6-1-类图"><a href="#3-6-1-类图" class="headerlink" title="3.6.1 类图"></a>3.6.1 类图</h4><p><img src="/images/《设计模式》读书笔记/享元类图.png" alt="享元类图"></p><h4 id="3-6-2-对象结构示例图"><a href="#3-6-2-对象结构示例图" class="headerlink" title="3.6.2 对象结构示例图"></a>3.6.2 对象结构示例图</h4><p><img src="/images/《设计模式》读书笔记/享元对象结构示例图.png" alt="享元对象结构示例图"></p><h4 id="3-6-3-参与者"><a href="#3-6-3-参与者" class="headerlink" title="3.6.3 参与者"></a>3.6.3 参与者</h4><p>Flyweight</p><ol><li>描述一个接口，通过这个接口flyweight可以接受并作用于外部状态。</li></ol><p>ConcreteFlyweight</p><ol><li>实现Flyweight接口，并为内部状态（如果有的话）增加存储空间。ConcreteFlyweight对象必须是可共享的。它所存储的状态必须是内部的；即，它必须独立于ConcreteFlyweight对象的场景。</li></ol><p>UnsharedConcreteFlyweight</p><ol><li>并非所有的Flyweight子类都需要被共享。Flyweight接口使共享成为可能，但它并不强制共享。在Flyweight对象结构的某些层次，UnsharedConcreteFlyweight对象通常将ConcreteFlyweight对象作为子节点。</li></ol><p>FlyweightFactory</p><ol><li>创建并管理flyweight对象。</li><li>确保合理地共享flyweight。当用户请求一个flyweight时，FlyweightFactory对象提供一个已创建的实例或者创建一个（如果不存在的话）。</li></ol><p>Client</p><ol><li>维持一个对flyweight的引用。</li><li>计算或存储一个（多个）flyweight的外部状态。</li></ol><h4 id="3-6-4-协作"><a href="#3-6-4-协作" class="headerlink" title="3.6.4 协作"></a>3.6.4 协作</h4><ol><li>flyweight执行时所需的状态必定时内部的或外部的。内部状态存储于ConcreteFlyweight对象之中；而外部对象则由Client对象存储或计算。当用户调用flyweight对象的操作时，将该状态传递给它。</li><li>用户不应直接对ConcreteFlyweight类进行实例化，而只能从FlyeightFactory对象得到ConcreteFlyweight对象，这可以保证对它们适当地进行共享。</li></ol><h3 id="3-7-Proxy-代理"><a href="#3-7-Proxy-代理" class="headerlink" title="3.7 Proxy(代理)"></a>3.7 Proxy(代理)</h3><h4 id="3-7-1-类图"><a href="#3-7-1-类图" class="headerlink" title="3.7.1 类图"></a>3.7.1 类图</h4><p><img src="/images/《设计模式》读书笔记/代理类图.png" alt="代理类图"></p><h4 id="3-7-2-对象结构示例图"><a href="#3-7-2-对象结构示例图" class="headerlink" title="3.7.2 对象结构示例图"></a>3.7.2 对象结构示例图</h4><p><img src="/images/《设计模式》读书笔记/代理对象结构示例图.png" alt="代理对象结构示例图"></p><h4 id="3-7-3-参与者"><a href="#3-7-3-参与者" class="headerlink" title="3.7.3 参与者"></a>3.7.3 参与者</h4><p>Proxy</p><ol><li>保持一个引用使得代理可以访问实体。若RealSubject和Subject的接口相同，Proxy会引用Subject。</li><li>提供一个与Subject的接口相同的接口，这样代理就可以用来替代实体。</li><li>控制对实体的存取，并可能负责创建和删除它。</li><li><p>其他功能依赖于代理的类型：</p><ol><li>Remote Proxy负责对请求及其参数进行编码，并向不同地址空间中的实体发送已编码的请求。</li><li>Virtual Proxy可以缓存实体的附加信息，以便延迟对它的访问。</li><li>Protection Proxy检查调用者是否具有实现一个请求所必须的访问权限。</li></ol></li></ol><p>Subject</p><ol><li>定义RealSubject和Proxy的共用接口，这样就在任何使用RealSubject的地方都可以使用Proxy。</li></ol><p>RealSubject</p><ol><li>定义Proxy所代表的实体。</li></ol><h4 id="3-7-4-协作"><a href="#3-7-4-协作" class="headerlink" title="3.7.4 协作"></a>3.7.4 协作</h4><ol><li>代理根据其种类，在适当的时候向RealSubject转发请求。</li></ol><hr><h2 id="四、行为模式"><a href="#四、行为模式" class="headerlink" title="四、行为模式"></a>四、行为模式</h2><h3 id="4-1-Chain-of-Responsibility-职责链"><a href="#4-1-Chain-of-Responsibility-职责链" class="headerlink" title="4.1 Chain of Responsibility(职责链)"></a>4.1 Chain of Responsibility(职责链)</h3><h4 id="4-1-1-类图"><a href="#4-1-1-类图" class="headerlink" title="4.1.1 类图"></a>4.1.1 类图</h4><p><img src="/images/《设计模式》读书笔记/职责链类图.png" alt="职责链类图"></p><h4 id="4-1-2-对象结构示例图"><a href="#4-1-2-对象结构示例图" class="headerlink" title="4.1.2 对象结构示例图"></a>4.1.2 对象结构示例图</h4><p><img src="/images/《设计模式》读书笔记/职责链对象结构示例图.png" alt="职责链对象结构示例图"></p><h4 id="4-1-3-参与者"><a href="#4-1-3-参与者" class="headerlink" title="4.1.3 参与者"></a>4.1.3 参与者</h4><p>Handler</p><ol><li>定义一个处理请求的接口。</li><li>（可选）实现后继链。</li></ol><p>ConcreteHandler</p><ol><li>处理它所负责的请求。</li><li>可访问它的后继者。</li><li>如果可处理该请求，就处理；否则将该请求转发给它的后继者。</li></ol><p>Client</p><ol><li>向链上的具体处理者(ConcreteHandler)对象提交请求。</li></ol><h4 id="4-1-4-协作"><a href="#4-1-4-协作" class="headerlink" title="4.1.4 协作"></a>4.1.4 协作</h4><ol><li>当客户提交一个请求时，请求沿链传递直至有一个ConcreteHandler对象负责处理它。</li></ol><h3 id="4-2-Command-命令"><a href="#4-2-Command-命令" class="headerlink" title="4.2 Command(命令)"></a>4.2 Command(命令)</h3><h4 id="4-2-1-类图"><a href="#4-2-1-类图" class="headerlink" title="4.2.1 类图"></a>4.2.1 类图</h4><p><img src="/images/《设计模式》读书笔记/命令类图.png" alt="命令类图"></p><h4 id="4-2-2-参与者"><a href="#4-2-2-参与者" class="headerlink" title="4.2.2 参与者"></a>4.2.2 参与者</h4><p>Command</p><ol><li>声明执行操作的接口。</li></ol><p>ConcreteCommand</p><ol><li>将一个接收者对象绑定于一个动作。</li><li>调用接收者相应的操作，以实现Execute。</li></ol><p>Client</p><ol><li>创建一个具体命令对象并设定它的接收者。</li></ol><p>Invoker</p><ol><li>要求该命令执行这个请求。</li></ol><p>Receiver</p><ol><li>知道如何实施与执行一个请求相关的操作。任何类都可能作为一个接收者。</li></ol><h4 id="4-2-3-协作"><a href="#4-2-3-协作" class="headerlink" title="4.2.3 协作"></a>4.2.3 协作</h4><ol><li>Client创建一个ConcreteCommand对象并指定它的Receiver对象。</li><li>某Invoker对象存储该ConcreteCommand对象。</li><li>该Invoker通过调用Command对象的Execute操作来提交一个请求。若该命令是可撤销的，ConcreteCommand就在执行Execute操作之前存储当前状态已用于取消该命令。</li><li>ConcreteCommand对象对调用它的Recevier的进行操作以执行该请求。</li></ol><h4 id="4-2-4-时序图"><a href="#4-2-4-时序图" class="headerlink" title="4.2.4 时序图"></a>4.2.4 时序图</h4><p><img src="/images/《设计模式》读书笔记/命令时序图.png" alt="命令时序图"></p><h3 id="4-3-Interpreter-解释器"><a href="#4-3-Interpreter-解释器" class="headerlink" title="4.3 Interpreter(解释器)"></a>4.3 Interpreter(解释器)</h3><h4 id="4-3-1-类图"><a href="#4-3-1-类图" class="headerlink" title="4.3.1 类图"></a>4.3.1 类图</h4><p><img src="/images/《设计模式》读书笔记/解释器类图.png" alt="解释器类图"></p><h4 id="4-3-2-参与者"><a href="#4-3-2-参与者" class="headerlink" title="4.3.2 参与者"></a>4.3.2 参与者</h4><p>AbstractExpression(抽象表达式)</p><ol><li>声明一个抽象的解释操作，这个接口为抽象语法树中所有的节点所共享。</li></ol><p>TerminalExpression(终结符表达式)</p><ol><li>实现与文法中的终结符相关联的解释操作。</li><li>一个句子中的每个终结符需要该类的一个实例。</li></ol><p>NonterminalExpression(非终结符表达式)</p><ol><li>对文法中的每一条规则<code>R ::=R&lt;sub&gt;1&lt;/sub&gt;R&lt;sub&gt;2&lt;/sub&gt;...R&lt;sub&gt;n&lt;/sub&gt;</code>都需要一个NonterminalExpression类。</li><li>为从<code>R&lt;sub&gt;1&lt;/sub&gt;</code>到<code>R&lt;sub&gt;n&lt;/sub&gt;</code>的每个符号都维护一个AbstractExpression类型的实例变量。</li><li>为文法中的非终结符实现解释(Interpret)操作。解释(Interpret)一般要递归地调用表示<code>R&lt;sub&gt;1&lt;/sub&gt;</code>到<code>R&lt;sub&gt;n&lt;/sub&gt;</code>的那些对象的解释操作。</li></ol><p>Context</p><ol><li>包含解释器之外的一些全局信息。</li></ol><p>Client</p><ol><li>构建（或被给定）表示该文法定义的语言中一个特定的句子的抽象语法树。该抽象语法树由NonterminalExpression和TerminalExpression的实例装配而成。</li><li>调用解释操作。</li></ol><h4 id="4-3-3-协作"><a href="#4-3-3-协作" class="headerlink" title="4.3.3 协作"></a>4.3.3 协作</h4><ol><li>Client构建（或被给定）一个句子，它是NonterminalExpression和TerminalExpression的实例的一个抽象语法树，然后初始化上下文并调用解释操作。</li><li>每一个非终结符表达式节点定义相应子表达式的解释操作。而各终结符表达式的解释操作构成了递归的基础。</li><li>每一节点的解释操作用上下文来存储和访问解释器的状态。</li></ol><h3 id="4-4-Iterator-迭代器"><a href="#4-4-Iterator-迭代器" class="headerlink" title="4.4 Iterator(迭代器)"></a>4.4 Iterator(迭代器)</h3><h4 id="4-4-1-类图"><a href="#4-4-1-类图" class="headerlink" title="4.4.1 类图"></a>4.4.1 类图</h4><p><img src="/images/《设计模式》读书笔记/迭代器类图.png" alt="迭代器类图"></p><h4 id="4-4-2-参与者"><a href="#4-4-2-参与者" class="headerlink" title="4.4.2 参与者"></a>4.4.2 参与者</h4><p>Iterator</p><ol><li>迭代器定义访问和遍历元素的接口。</li></ol><p>ConcreteIterator</p><ol><li>具体迭代器实现迭代器接口。</li><li>对该聚合遍历时跟踪当前位置。</li></ol><p>Aggregate</p><ol><li>聚合定义创建相应迭代器对象的接口。</li></ol><p>ConcreteAggregate</p><ol><li>具体聚合实现创建相应迭代器的接口，该操作返回ConcreteIterator的一个适当的实例。</li></ol><h4 id="4-4-3-协作"><a href="#4-4-3-协作" class="headerlink" title="4.4.3 协作"></a>4.4.3 协作</h4><ol><li>ConcreteIterator跟踪聚合中的当前对象，并能够计算出待遍历的后继对象。</li></ol><h3 id="4-5-Mediator-中介者"><a href="#4-5-Mediator-中介者" class="headerlink" title="4.5 Mediator(中介者)"></a>4.5 Mediator(中介者)</h3><h4 id="4-5-1-类图"><a href="#4-5-1-类图" class="headerlink" title="4.5.1 类图"></a>4.5.1 类图</h4><p><img src="/images/《设计模式》读书笔记/中介者类图.png" alt="中介者类图"></p><h4 id="4-5-2-对象结构示例图"><a href="#4-5-2-对象结构示例图" class="headerlink" title="4.5.2 对象结构示例图"></a>4.5.2 对象结构示例图</h4><p><img src="/images/《设计模式》读书笔记/中介者对象结构示例图.png" alt="中介者对象结构示例图"></p><h4 id="4-5-3-参与者"><a href="#4-5-3-参与者" class="headerlink" title="4.5.3 参与者"></a>4.5.3 参与者</h4><p>Mediator</p><ol><li>中介者定义一个接口用于与各同事(Colleague)对象通信。</li></ol><p>ConcreteMediator</p><ol><li>具体中介者通过协调各同事对象实现协作行为。</li><li>了解并维护它的各个同事。</li></ol><p>Colleague class</p><ol><li>每一个同事类都知道它的中介对象。</li><li>每一个同事对象在需与其他的同事通信的时候，与它的中介者通信。</li></ol><h4 id="4-5-4-协作"><a href="#4-5-4-协作" class="headerlink" title="4.5.4 协作"></a>4.5.4 协作</h4><ol><li>同事向一个中介者对象发送和接受请求。中介着在各同事间适当地转发请求以实现协作行为。</li></ol><h3 id="4-6-Memento-备忘录"><a href="#4-6-Memento-备忘录" class="headerlink" title="4.6 Memento(备忘录)"></a>4.6 Memento(备忘录)</h3><h4 id="4-6-1-类图"><a href="#4-6-1-类图" class="headerlink" title="4.6.1 类图"></a>4.6.1 类图</h4><p><img src="/images/《设计模式》读书笔记/备忘录类图.png" alt="备忘录类图"></p><h4 id="4-6-2-参与者"><a href="#4-6-2-参与者" class="headerlink" title="4.6.2 参与者"></a>4.6.2 参与者</h4><p>Memento</p><ol><li>备忘录存储原发器对象的内部状态。原发器根据需要决定备忘录存储原发器的哪些内部状态。</li><li>防止原发器以外的其他对象访问备忘录。备忘录实际上有两个接口，管理者(caretaker)只能看到备忘录的窄接口——它只能将备忘录传递给其他对象。相反，原发器能够看到一个宽接口，允许它访问返回到先前状态所需的所有数据。理想的情况是只允许生成本备忘录的那个原发器访问本备忘录的内部状态。</li></ol><p>Originator</p><ol><li>原发器创建一个备忘录，用以记录当前时刻它的内部状态。</li><li>使用备忘录恢复内部状态。</li></ol><p>CareTaker</p><ol><li>负责保存好备忘录。</li><li>不能对备忘录的内容进行操作或检查。</li></ol><h4 id="4-6-3-协作"><a href="#4-6-3-协作" class="headerlink" title="4.6.3 协作"></a>4.6.3 协作</h4><ol><li>管理器向原发器请求一个备忘录，保留一段时间后，将其送回给原发器。</li></ol><h4 id="4-6-4-时序图"><a href="#4-6-4-时序图" class="headerlink" title="4.6.4 时序图"></a>4.6.4 时序图</h4><p><img src="/images/《设计模式》读书笔记/备忘录时序图.png" alt="备忘录时序图"></p><h3 id="4-7-Observer-观察者"><a href="#4-7-Observer-观察者" class="headerlink" title="4.7 Observer(观察者)"></a>4.7 Observer(观察者)</h3><h4 id="4-7-1-类图"><a href="#4-7-1-类图" class="headerlink" title="4.7.1 类图"></a>4.7.1 类图</h4><p><img src="/images/《设计模式》读书笔记/观察者类图.png" alt="观察者类图"></p><h4 id="4-7-2-参与者"><a href="#4-7-2-参与者" class="headerlink" title="4.7.2 参与者"></a>4.7.2 参与者</h4><p>Subject</p><ol><li>目标知道它的观察者。可以有任意多个观察者观察同一目标。</li><li>提供注册和删除观察者对象的接口。</li></ol><p>Observer</p><ol><li>为那些在目标发生改变时需获得通知的对象定义一个更新接口。</li></ol><p>ConcreteSubject</p><ol><li>将有关状态存入各ConcreteObserver对象。</li><li>当它的状态发生改变时，向它的各个观察者发出通知。</li></ol><p>ConcreteObserver</p><ol><li>维护一个指向ConcreteSubject对象的引用。</li><li>存储有关状态，这些状态应与目标的状态保持一致。<br>实现Observer的更新接口以使自身状态与目标的状态保持一致。</li></ol><h4 id="4-7-3-协作"><a href="#4-7-3-协作" class="headerlink" title="4.7.3 协作"></a>4.7.3 协作</h4><ol><li>当ConcreteSubject发生任何可能导致其观察者与本身状态不一致的改变时，它将通知它的各个观察者。</li><li>在得到一个具体目标的改变通知后，ConcreteObserver对象可向目标对象查询信息。ConcreteObserver使用这些信息以使它的状态与目标对象的状态一致。</li></ol><h4 id="4-7-4-时序图"><a href="#4-7-4-时序图" class="headerlink" title="4.7.4 时序图"></a>4.7.4 时序图</h4><p><img src="/images/《设计模式》读书笔记/观察者时序图.png" alt="观察者时序图"></p><h3 id="4-8-State-状态"><a href="#4-8-State-状态" class="headerlink" title="4.8 State(状态)"></a>4.8 State(状态)</h3><h4 id="4-8-1-类图"><a href="#4-8-1-类图" class="headerlink" title="4.8.1 类图"></a>4.8.1 类图</h4><p><img src="/images/《设计模式》读书笔记/状态类图.png" alt="状态类图"></p><h4 id="4-8-2-参与者"><a href="#4-8-2-参与者" class="headerlink" title="4.8.2 参与者"></a>4.8.2 参与者</h4><p>Context</p><ol><li>定义客户感兴趣的接口。</li><li>维护一个ConcreteState子类的实例，这个实例定义当前状态。</li></ol><p>State</p><ol><li>定义一个接口以封装与Context的一个特定状态相关的行为。</li></ol><p>ConcreteState subclasses</p><ol><li>每一子类实现一个与Context的一个状态相关的行为。</li></ol><h4 id="4-8-3-协作"><a href="#4-8-3-协作" class="headerlink" title="4.8.3 协作"></a>4.8.3 协作</h4><ol><li>Context将与状态相关的请求委托给当前的ConcreteState对象处理。</li><li>Context可将自身作为一个参数传递给处理该请求的状态对象。这使得状态对象在必要时可访问Context。</li><li>Context是客户使用的主要接口。客户可用状态对象来配置一个Context，一旦一个Context配置完毕，它的客户不再需要直接与状态对象打交道。</li><li>Context或ConcreteState子类都可决定哪个状态是另外哪一个的后继者，以及是在何种条件下进行状态转换。</li></ol><h3 id="4-9-Strategy-策略"><a href="#4-9-Strategy-策略" class="headerlink" title="4.9 Strategy(策略)"></a>4.9 Strategy(策略)</h3><h4 id="4-9-1-类图"><a href="#4-9-1-类图" class="headerlink" title="4.9.1 类图"></a>4.9.1 类图</h4><p><img src="/images/《设计模式》读书笔记/策略类图.png" alt="策略类图"></p><h4 id="4-9-2-参与者"><a href="#4-9-2-参与者" class="headerlink" title="4.9.2 参与者"></a>4.9.2 参与者</h4><p>Strategy</p><ol><li>定义所有支持的算法的公共接口。Context使用这个接口来调用某ConcreteStrategy定义的算法。</li></ol><p>ConcreteStrategy</p><ol><li>以Strategy接口实现某具体算法。</li></ol><p>Context</p><ol><li>用一个ConcreteStrategy对象来配置。</li><li>维护一个对Strategy对象的引用。</li><li>可定义一个接口来让Strategy访问它的数据。</li></ol><h4 id="4-9-3-协作"><a href="#4-9-3-协作" class="headerlink" title="4.9.3 协作"></a>4.9.3 协作</h4><ol><li>Strategy和Context相互作用以实现选定的算法。当算法被调用时，Context可以将该算法所需要的所有数据都传递给该Strategy。或者，Context可以将自身作为一个参数传递给Strategy操作。这就让Strategy在需要时可以回调Context。</li><li>Context将它的客户的请求转发给它的Strategy。客户通常创建并传递一个ConcreteStrategy对象给该Context；这样，客户仅与Context交互。通常有一系列的ConcreteStrategy类可供客户从中选择。</li></ol><h3 id="4-10-Template-Method-模板方法"><a href="#4-10-Template-Method-模板方法" class="headerlink" title="4.10 Template Method(模板方法)"></a>4.10 Template Method(模板方法)</h3><h4 id="4-10-1-类图"><a href="#4-10-1-类图" class="headerlink" title="4.10.1 类图"></a>4.10.1 类图</h4><p><img src="/images/《设计模式》读书笔记/模板方法类图.png" alt="模板方法类图"></p><h4 id="4-10-2-参与者"><a href="#4-10-2-参与者" class="headerlink" title="4.10.2 参与者"></a>4.10.2 参与者</h4><p>AbstractClass</p><ol><li>定义抽象的原语操作(primitive operation)，具体的子类将重定义它们以实现一个算法的各个步骤。</li><li>实现一个模板方法，定义一个算法骨架。该模板方法不仅调用原语操作，也调用定义在AbstractClass或其他对象中的操作。</li></ol><p>ConcreteClass</p><ol><li>实现原语操作以完成算法中与特定子类相关的步骤。</li></ol><h4 id="4-10-3-协作"><a href="#4-10-3-协作" class="headerlink" title="4.10.3 协作"></a>4.10.3 协作</h4><ol><li>ConcreteClass靠AbstractClass来实现算法中不变的步骤。</li></ol><h3 id="4-11-Visitor-访问者"><a href="#4-11-Visitor-访问者" class="headerlink" title="4.11 Visitor(访问者)"></a>4.11 Visitor(访问者)</h3><h4 id="4-11-1-类图"><a href="#4-11-1-类图" class="headerlink" title="4.11.1 类图"></a>4.11.1 类图</h4><p><img src="/images/《设计模式》读书笔记/访问者类图.png" alt="访问者类图"></p><h4 id="4-11-2-参与者"><a href="#4-11-2-参与者" class="headerlink" title="4.11.2 参与者"></a>4.11.2 参与者</h4><p>Visitor</p><ol><li>为该对象结构中ConcreteElement的每一个类声明一个Visit操作。该操作的名字和特征标识了发送Visit请求给该访问者的那个类。这使得访问者可以确定正被访问元素的具体的类。这样访问者就可以通过该元素的特定接口直接访问它。</li></ol><p>ConcreteVisitor</p><ol><li>实现每个由Visitor声明的操作。每个操作实现本算法的一部分，而该算法片段乃是对应于结构中对象的类。ConcreteVisitor为该算法提供了上下文并存储它的局部状态。这一状态常常在遍历该结构的过程中累计结果。</li></ol><p>Element</p><ol><li>定义一个Accept操作，它以一个访问者为参数。</li></ol><p>ConcreteElement</p><ol><li>实现Accept操作，该操作以一个访问者为参数。</li></ol><p>ObjectStructure</p><ol><li>能枚举它的元素。</li><li>可以提供一个高层的接口以允许该访问者访问它的元素。</li><li>可以是一个复合或是一个集合，如一个列表或一个无序集合。</li></ol><h4 id="4-11-3-协作"><a href="#4-11-3-协作" class="headerlink" title="4.11.3 协作"></a>4.11.3 协作</h4><ol><li>一个使用Visitor模式的客户必须创建一个ConcreteVisitor对象，然后遍历该对象结构，并用该访问者访问每一个元素。</li><li>当一个元素被访问是，它调用对应于它的类的Visitor操作。如果必要，该元素将自身作为这个操作的一个参数以便访问者访问它的状态。</li></ol><h4 id="4-11-4-时序图"><a href="#4-11-4-时序图" class="headerlink" title="4.11.4 时序图"></a>4.11.4 时序图</h4><p><img src="/images/《设计模式》读书笔记/访问者时序图.png" alt="访问者时序图"></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面向对象 </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下打包程序生成自解压自运行文件</title>
      <link href="linux-xia-da-bao-cheng-xu-sheng-cheng-zi-jie-ya-zi-yun-xing-wen-jian/"/>
      <url>linux-xia-da-bao-cheng-xu-sheng-cheng-zi-jie-ya-zi-yun-xing-wen-jian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/env bash</span><span class="token comment"># Program:</span><span class="token comment">#   打包程序生成自解压自运行文件</span><span class="token comment"># History:</span><span class="token comment">#   2020/03/25  [KibaAmor](https://kibazen.cn)    Create this file</span><span class="token comment"># 遇到错误时退出</span><span class="token builtin class-name">set</span> -e<span class="token comment"># 配置</span><span class="token comment">#################################################################</span><span class="token comment"># 打包后可执行文件的名字</span><span class="token assign-left variable">PACKAGE_NAME</span><span class="token operator">=</span><span class="token string">"server.run"</span><span class="token comment"># 需要被打包程序的目录名(不要包含路径)</span><span class="token assign-left variable">TARGET_DIR</span><span class="token operator">=</span>server<span class="token comment"># 被打包程序的可执行程序</span><span class="token assign-left variable">EXEC_NAME</span><span class="token operator">=</span><span class="token string">"run.sh"</span><span class="token comment"># 开始生成自解压的可执行程序</span><span class="token comment">#################################################################</span><span class="token comment"># 创建自解压脚本</span><span class="token function">cat</span> <span class="token operator">&gt;</span> <span class="token variable">${PACKAGE_NAME}</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'END'#!/usr/bin/env bash# Program:#   打包目录'TARGET_DIR'生成自解压自运行的可执行文件# History:#   CURRENT_DATETIME  [KibaAmor](https://kibazen.cn)    Create this file# 遇到错误时退出set -e# 解压目录必须不存在test -e TARGET_DIR &amp;&amp; echo "'TARGET_DIR' already exist. Remove?" &amp;&amp;  rm -Ir TARGET_DIRtest -e TARGET_DIR &amp;&amp; echo "'TARGET_DIR' is still exist. please remove manual" &amp;&amp; exit -1# 生成一个空的，用于解压文件的目录mkdir TARGET_DIR# 定位程序压缩后二进制数据在脚本中的位置BIN_LINE_NUM=$(awk '/^__LAST_LINE__/ { print NR+1; exit 0; }' $0)# 解压被打包的程序tail -n +${BIN_LINE_NUM} $0 | tar -xz -C TARGET_DIR --strip-components=1# 进入目录cd TARGET_DIR# 赋予可执行权限chmod +x ./EXEC_NAME# 开始执行被打包的程序./EXEC_NAME $*# 正常退出exit 0__LAST_LINE__END</span><span class="token assign-left variable">CURRENT_DATETIME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y/%m/%d %H:%M:%S'</span><span class="token variable">)</span></span><span class="token comment"># 替换自解压脚本中的变量</span><span class="token function">sed</span> -i <span class="token string">"s/TARGET_DIR/<span class="token variable">${TARGET_DIR}</span>/g"</span> <span class="token variable">${PACKAGE_NAME}</span><span class="token function">sed</span> -i <span class="token string">"s/EXEC_NAME/<span class="token variable">${EXEC_NAME}</span>/g"</span> <span class="token variable">${PACKAGE_NAME}</span><span class="token function">sed</span> -i <span class="token string">"s@CURRENT_DATETIME@<span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">'%Y/%m/%d %H:%M:%S'</span><span class="token variable">)</span></span>@g"</span> <span class="token variable">${PACKAGE_NAME}</span><span class="token comment"># 将打包的程序压缩，并将压缩后的二进制数据附加到自解压脚本后面</span><span class="token function">tar</span> c <span class="token variable">${TARGET_DIR}</span> <span class="token operator">|</span> <span class="token function">gzip</span> -f <span class="token operator">&gt;&gt;</span> <span class="token variable">${PACKAGE_NAME}</span><span class="token comment"># 给自解压脚本执行权限</span><span class="token function">chmod</span> +x <span class="token variable">${PACKAGE_NAME}</span><span class="token comment"># 输出信息</span><span class="token builtin class-name">echo</span> <span class="token string">"打包成功. 打包后的文件为：<span class="token variable">${PACKAGE_NAME}</span>"</span><span class="token comment"># 正常退出</span><span class="token builtin class-name">exit</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何正确的学习设计模式</title>
      <link href="ru-he-zheng-que-de-xue-xi-she-ji-mo-shi/"/>
      <url>ru-he-zheng-que-de-xue-xi-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="一、编程初期遇到的问题"><a href="#一、编程初期遇到的问题" class="headerlink" title="一、编程初期遇到的问题"></a>一、编程初期遇到的问题</h2><p>初学编程时，写的代码基本上都编程作业，ACM之类的，代码量一般都不多，几百行，少有上千行。所以，初读设计模式相关书籍时，只是觉得很厉害，并没有切实的体会到使用设计模式带来的好处。随着写的程序代码量逐渐增多，发现代码的逻辑越来越混乱，实现的功能BUG也越来越多。</p><p>在编程的过程中，也接触到了很多优秀的代码库，比如：<a href="https://www.ogre3d.org/">OGRE(Open-source Graphics Rendering Engines)</a>，一个优秀同时也是开源的3D图形图像渲染引擎。在学习使用的过程中，发现其代码逻辑清晰，便于阅读。对比自己写的代码和<a href="https://www.ogre3d.org/">OGRE</a>的代码，发现OGRE的代码中使用了很多的设计模式。所有就简单的认为：</p><blockquote><p>使用设计模式就能让代码组织更加简单，让代码的逻辑也更加清晰明了，同时大大的提高了代码的可读性，降低了程序出BUG的几率。</p></blockquote><h2 id="二、对设计模式错误的认识"><a href="#二、对设计模式错误的认识" class="headerlink" title="二、对设计模式错误的认识"></a>二、对设计模式错误的认识</h2><p>有了上面的结论，认为只要学会了所有的设计模式，就能够提高编程的能力。但是在背完所有的设计模式后发现：</p><ul><li><code>不知道什么时候该用设计模式。</code> 设计模式确实很好，但是还是也不知道什么时候该用设计模式，因为平时的编程中不用设计模式，功能也能实现出来。</li><li><code>套用了设计模式后代码质量也没提升。</code> 即使在编程的过程中，刻意的使用了一些设计模式，也没体会到设计模式带来的好处，更没有体会到想象中代码质量会立竿见影的提高。</li></ul><p>伴随着对设计模式使用的疑问，阅读了更多的书籍。当读到《重构：改善既有代码的设计》这本书时，按照书中的指导，重构了已有的代码，发现修改后的代码，阅读起来更加的容易，代码逻辑也比修改之前更加清晰。再对比修改前后的代码，发现：</p><ul><li><code>如果有多个地方都需要完成相同的功能，应该把代码封装成一个单独的函数，而不是复制粘贴。</code> 因为复制粘贴后，代码多了，改起来容易漏，也就容易出问题了，同时代码也变得难读。</li><li><code>如果一个函数或者一个类的代码有很多，通常更容易出BUG。</code> 如果一个函数或者一个类里面的代码有很多的话，读起来逻辑复杂，做的事情也多，就老是容易出问题。</li></ul><p>其他的细节还有很多。比如，如果注释都说不清楚一段代码在干什么，那么这段代码常常更容易出问题。</p><p>再次读<a href="https://www.ogre3d.org/">OGRE</a>的源代码时就发现，整个源代码在这些细节上都做的很好。比如：一个函数只做一件事，而且从函数的名字里就能知道具体做的什么。而源代码中使用的设计模式更是巧妙的让一个复杂的功能变得简单好理解。</p><h2 id="三、认识软件工程"><a href="#三、认识软件工程" class="headerlink" title="三、认识软件工程"></a>三、认识软件工程</h2><p>阅读书籍过程中也多次接触到了<code>软件工程</code>这个术语，但是一直不是很明白<code>软件工程</code>具体是做什么的，直到读到了《敏捷软件开发》这本书。<code>软件工程是一门研究用工程化方法构建和维护有效的、实用的和高质量的软件的学科。</code>而《敏捷软件开发》这本书正是讲述如何实践软件工程的经典巨著。理解一下，<code>软件工程</code>就是一门学习研究写出高质量软件(代码)的学科。而《敏捷软件开发》则是介绍具体用某种方法来实现写出高质量软件目的的书。</p><p>《敏捷软件开发》这本书中提出了<code>敏捷设计</code>这一方法，并将其定义为：</p><blockquote><p>敏捷设计是一个持续的应用原则、模式以及实现来改进软件的结构和可读性的过程。它是一个过程，不是一个事件。</p></blockquote><p>它认为，只要在编写代码实现软件时，遵守一些软件开发原则和模式，那么就能够提高代码的质量。</p><h2 id="四、了解敏捷开发的原则"><a href="#四、了解敏捷开发的原则" class="headerlink" title="四、了解敏捷开发的原则"></a>四、了解敏捷开发的原则</h2><p>《敏捷软件开发》着重介绍并解释了5种软件开发原则。分别是：</p><ol><li><code>单一职责原则(SRP)</code>：就一个类而言，应该仅有一个引起它变化的原因。</li><li><code>开放-封闭原则(OCP)</code>：软件实体（类、模块、函数等等）应该是可以扩展的，但是不可修改的。</li><li><code>里氏替换原则(LSP)</code>：子类型(subtype)必须能够替换掉它们的基类型(base type)。</li><li><code>依赖倒置原则(DIP)</code>：高层模块不应该依赖于低层模块。二者都应该依赖于抽象。抽象不应该依赖于细节。细节应该依赖于抽象。</li><li><code>接口隔离原则(ISP)</code>：不应该强迫客户依赖于它们不用的方法。</li></ol><p>与其说是<code>原则</code>，不如说是<code>标准</code>。因为它们告诉了我们一个标准：应该把代码设计成一个什么样子，满足什么条件，有什么特征，但是并没有说应该如何编写代码。</p><p>此时，再回过头阅读<a href="https://www.ogre3d.org/">OGRE</a>等优秀的代码库时才明白，这些代码库优秀的原因之一是它们遵循了良好的软件开发原则，而使用设计模式则是让代码遵循这些软件开发原则的方法。这也是初学设计模式时，生搬硬套设计模式并没有改善代码质量的根本原因。因为根本就不知道应该把代码改成什么样，需要满足什么要求。结果就是把劣质的代码换一种方式写出来而已。</p><p>所以，我们能够得出一个结论，那就是：</p><blockquote><p>优秀的软件由高质量的代码编写而成，而遵从软件开发原则是代码成为高质量代码的条件之一，设计模式只是让代码遵从开发原则的方法。</p></blockquote><h2 id="五、正确的学习设计模式"><a href="#五、正确的学习设计模式" class="headerlink" title="五、正确的学习设计模式"></a>五、正确的学习设计模式</h2><p>最后，如何正确的学习设计模式呢？</p><ol><li>发现自己写的代码越来越复杂，BUG越来越多。</li><li>寻求提高代码质量的方法。</li><li>学习软件工程。<code>认识到别人代码质量高的原因之一是因为别人遵循了良好软件开发原则。</code></li><li>开始真正的学习并运用设计模式。</li><li>最后，明白了什么时候应该怎么用设计模式，更清楚了软件工程的重要性。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全局唯一ID生成方法总结</title>
      <link href="quan-ju-wei-yi-id-sheng-cheng-fang-fa-zong-jie/"/>
      <url>quan-ju-wei-yi-id-sheng-cheng-fang-fa-zong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、什么情况下需要全局唯一ID"><a href="#一、什么情况下需要全局唯一ID" class="headerlink" title="一、什么情况下需要全局唯一ID"></a>一、什么情况下需要全局唯一ID</h2><p>在一个由多个服务器组成的业务系统中，有很多对象都需要一个ID来标识该对象，以示区分。这个ID应该是系统(全局)范围内唯一的，这种ID就是<code>全局唯一ID(GUID，Globally Unique Identifier)</code>。比如：购物商城中的用户ID和订单ID就应该是<code>全局唯一ID</code>。</p><h2 id="二、生成全局唯一ID要求"><a href="#二、生成全局唯一ID要求" class="headerlink" title="二、生成全局唯一ID要求"></a>二、生成全局唯一ID要求</h2><p>既然要使用<code>全局唯一ID</code>，那么就需要先生成<code>全局唯一ID</code>。生成时主要考虑以下面几点：</p><ol><li><code>全系统范围内唯一。</code> 显而易见，全局唯一ID肯定应该是全系统唯一不重复的。</li><li><code>ID易于存储和比较。</code> <code>全局唯一ID</code>的占用空间应该尽量的小且便于比较。比如：类型为64位整形(int64)的<code>全局唯一ID</code>就明显比类型为字符串(string)的<code>全局唯一ID</code>更易于存储和比较，使用起来也更好用。</li><li><code>生成结果是有序递增(递减)的。</code> 一般会将生成后的<code>全局唯一ID</code>作为数据库的主键来存储该对象的信息。有序的主键在插入数据库时性能一般会更好。</li><li><code>生成结果不可预测。</code> 生成的结果应当是不能预测的。如果能够预测出下一个生成结果，基本上就能猜测出所有的生成结果，比如在一个订单系统中，就能获取到所有的订单信息，这在安全性上是难以接受的。</li><li><code>生成快速且稳定。</code> 在一个系统中，很有可能需要频繁的生成<code>全局唯一ID</code>，一旦生成的速度过慢甚至生成时卡顿，将导致整个系统的卡顿或者崩溃。所以，<code>全局唯一ID</code>的生成应当是快速且稳定的。</li></ol><h2 id="三、目前成熟的生成方法"><a href="#三、目前成熟的生成方法" class="headerlink" title="三、目前成熟的生成方法"></a>三、目前成熟的生成方法</h2><h3 id="1-数据库自增ID"><a href="#1-数据库自增ID" class="headerlink" title="1. 数据库自增ID"></a>1. 数据库自增ID</h3><p>很多数据库提供生成自增ID的功能，如MySQL提供了变量<code>auto_increment_offset</code>来设置自增的初始值，变量<code>auto_increment_increment</code>设置每次自增的步长。借助数据库提供的这个功能，我们就能简单的实现生成<code>全局唯一ID</code>的功能了。</p><p>这种方式的优点很明显，那就是简单。不需要开发一个单独的系统，也不需要专人去维护。<br>但是缺点也是很明显的：</p><ol><li><code>生成性能不够好。</code> 每次生成<code>全局唯一ID</code>都需要通过网络访问数据库一次，生成时间可能达到几十上百毫秒。而且在数据库内部生成自增ID时，常常还会加锁，多个地方同时生成<code>全局唯一ID</code>时，还需要竞争抢锁。并发性能也就不好。</li><li><code>稳定性不够好。</code> 使用数据库来生成<code>全局唯一ID</code>方法的特点就是所有需要生成<code>全局唯一ID</code>的业务都需要连接相同的数据库，压力集中于一点。一旦数据库崩溃，将不能生成<code>全局唯一ID</code>，这会严重影响使用<code>全局唯一ID</code>的业务系统。即使数据库采用了主从结构，也难以保证在主从数据库切换时，生成的<code>全局唯一ID</code>不重复。</li><li><code>生成结果可以预测。</code> 一旦确定了自增初始值和自增步长后，基本上不会再动态修改这两个值，那么根据这两个值生成出来的ID也就是可预测的了。</li></ol><p>虽然使用数据库来生成<code>全局唯一ID</code>有上面的种种缺点，但是可以通过一些方法来改善这些问题：</p><h4 id="A-Flickr的分布式唯一主键生成算法"><a href="#A-Flickr的分布式唯一主键生成算法" class="headerlink" title="A. Flickr的分布式唯一主键生成算法"></a>A. Flickr的<a href="https://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/">分布式唯一主键生成算法</a></h4><p>针对使用数据库生成<code>全局唯一ID</code>性能不好的问题，Flickr提供了这样的解决方案：</p><blockquote><p>部署多台数据库，每台数据库设置不同的自增初始值，相同的自增步长值。同时自增步长值必须大于等于数据库的数量。这样就能保证每台数据都能生成<code>全局唯一ID</code>，且所有生成的<code>全局唯一ID</code>都不重复。</p></blockquote><p>举例，比如部署了两台数据库，其自增初始值，自增步长值及结果分别如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">数据库</th><th style="text-align:center">自增初始值</th><th style="text-align:center">自增步长值</th><th style="text-align:center">生成结果</th></tr></thead><tbody><tr><td style="text-align:center">数据库A</td><td style="text-align:center">0</td><td style="text-align:center">2</td><td style="text-align:center">0,2,4,6,8…</td></tr><tr><td style="text-align:center">数据库B</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">1,3,5,7,9…</td></tr></tbody></table></div><p>实际使用此方案时生成的<code>全局唯一ID</code>可能不是上面这种连续的结果，MySQL的下个自增ID的实际计算公式是<code>INT(current_value / increment) x increment + offset</code>，具体的可以参考<a href="https://stackoverflow.com/questions/35766521/mysql-master-master-replication-causing-missing-autoincrement-values/">MySql Master-Master Replication Causing Missing AutoIncrement Values</a>。</p><p>Flickr<a href="https://code.flickr.net/2010/02/08/ticket-servers-distributed-unique-primary-keys-on-the-cheap/">分布式唯一主键生成算法</a>的核心思想是：</p><blockquote><p>分散单点数据库的压力到了多点数据库，从而在提升了生成的性能和稳定性。</p></blockquote><p>但是这种方法中有一个很大的弊端，那就是因为要提前的确定自增的步长，所以扩展性很差。</p><h4 id="B-美团的Leaf-segment算法"><a href="#B-美团的Leaf-segment算法" class="headerlink" title="B. 美团的Leaf-segment算法"></a>B. 美团的<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf-segment算法</a></h4><p>同样是针对使用数据库生成<code>全局唯一ID</code>性能不好的问题，美团提供的解决方案是：</p><blockquote><p>不同的业务使用不同的自增ID。同一个业务一次获取多个<code>全局唯一ID</code>，缓存起来慢慢使用。同时在要用完时前就再次异步获取新的<code>全局唯一ID</code>缓存起来备用，就能为业务提供持续不断的<code>全局唯一ID</code>生成功能。</p></blockquote><p>举例，系统中有用户和订单都需要使用<code>全局唯一ID</code>来标识。那么数据库中就分别为用户和订单使用不同的自增ID。每次获取10000个<code>全局唯一ID</code>。并规定当前消耗10%的<code>全局唯一ID</code>就马上异步的获取下一批并将结果缓存起来备用。</p><div class="table-container"><table><thead><tr><th style="text-align:center">自增ID</th><th style="text-align:center">自增初始值</th><th style="text-align:center">自增步长值</th><th style="text-align:center">生成结果</th></tr></thead><tbody><tr><td style="text-align:center">用户</td><td style="text-align:center">0</td><td style="text-align:center">10000</td><td style="text-align:center">0,10000,20000…</td></tr><tr><td style="text-align:center">订单</td><td style="text-align:center">0</td><td style="text-align:center">10000</td><td style="text-align:center">0,10000,20000…</td></tr></tbody></table></div><p>美团<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf-segment算法</a>的核心思想是：批量获取和提前缓存。</p><ul><li>批量获取的同时，也减少请求数据库的次数，也就降低了数据库的压力。</li><li>而提前缓存则是保证了即使在网络波动时和业务高峰时都能够持续不阻塞的生成<code>全局唯一ID</code>。</li></ul><h3 id="2-UUID算法"><a href="#2-UUID算法" class="headerlink" title="2. UUID算法"></a>2. UUID算法</h3><p>UUID的全称是Universally Unique Identifier，中文名为通用唯一识别码。</p><p>UUID包含32个16进制的数字，大小是16字节128为，一般以连字号分为五段，形式为8-4-4-4-12的36个字符，比如：12fae663-e3dd-4b9e-b1a9-b7e598d2f853。具体的细节可以参考UUID的IETF标准<a href="https://www.ietf.org/rfc/rfc4122.txt">A Universally Unique IDentifier (UUID) URN Namespace</a>。</p><p>UUID生成的算法主要有5种，都不需要联网，本地即可生成。所以，使用UUID算法生成<code>全局唯一ID</code>的优点是很明显的，那就是：<code>高性能且难于预测结果</code>。但是缺点也很明显：</p><ol><li><code>UUID不易存储和使用。</code> 目前的主流编程语言和数据库，最大支持64位的整数。128位的UUID难以原生的以整数方式存储和使用。</li><li><code>UUID不是有序递增(递减)的。</code> UUID算法生成出来的ID一般不是有序的，这对将UUID作为主键存入数据库的使用方式来说并不友好。</li></ol><p>基于上面的缺点，UUID很少作为<code>全局唯一ID</code>来使用。</p><h3 id="3-字节-位-分段算法"><a href="#3-字节-位-分段算法" class="headerlink" title="3. 字节(位)分段算法"></a>3. 字节(位)分段算法</h3><p>这种算法的思想其实来自Twitter的<a href="https://github.com/twitter-archive/snowflake">雪花算法</a>，其他的同类算法都是在此基础上的一些变种。算法核心是：</p><blockquote><p>将组成<code>全局唯一ID</code>的多个字节看做一个整体，并其划分成不同的段，分别控制不同段的值。</p></blockquote><p>该算法具有与UUID算法相同的好处，那就是都不需要联网，本地即可生成。除此之外，还支持多个服务器同时生成，且生成的结果总体的保持递增或递减。在控制字节大小的情况下，也能较好的存储和比较。</p><h4 id="A-Twitter的雪花算法"><a href="#A-Twitter的雪花算法" class="headerlink" title="A. Twitter的雪花算法"></a>A. Twitter的<a href="https://github.com/twitter-archive/snowflake">雪花算法</a></h4><p>该算法生成的<code>全局唯一ID</code>的大小为64字节，能够使用64位整型来存储。其格式为：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">+----------------------------------------------------------------------------------------+| UNUSED(1BIT) |      TIMESTAMP(41BIT)      |  MACHINE-ID(10BIT)  |   SERIAL-NO(12BIT)   |+----------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li><code>1位不用。</code> 最高位不用，固定为0。因为二进制中最高位为1的表示是负数，而我们一般整数来表示ID，不希望有负数的ID，所以不用。</li><li><code>41位的时间戳。</code> 用41位的空间来表示单位为毫秒的时间戳，大约可以表示<code>(1L &lt;&lt; 41) /（1000 * 60 * 60 * 24 * 365）= 69</code>年的时间。</li><li><code>10位的机器位。</code> 用来区分不同服务器生成出来的ID。10位空间最多可以表示(1L &lt;&lt; 10) = 1024台服务器。</li><li><code>12位的序列化。</code> 用12位空间来存储在同一毫秒内，同一台服务器生成出来的ID数量。最多可以存储(1L &lt;&lt; 12) = 4096个。</li></ul><p>使用Twitter的<a href="https://github.com/twitter-archive/snowflake">雪花算法</a>只有一个明显的缺点，就是：</p><blockquote><p>算法高度依赖时间戳，如果各个生成ID的服务器时间不同步，将会导致生成出来的ID是乱序或者重复的。</p></blockquote><h4 id="B-百度的UidGenerator算法"><a href="#B-百度的UidGenerator算法" class="headerlink" title="B. 百度的UidGenerator算法"></a>B. 百度的<a href="https://github.com/baidu/uid-generator">UidGenerator算法</a></h4><p>百度<a href="https://github.com/baidu/uid-generator">UidGenerator算法</a>与Twitter<a href="https://github.com/twitter-archive/snowflake">雪花算法</a>的主要区别在于调整了各个分段的大小，改变了各个分度的意义，本质没变。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">+----------------------------------------------------------------------------------------+| UNUSED(1BIT) |   DELTA SECONDS(28BIT)   |  WORKER-NODE-ID(22BIT)  |  SERIAL-NO(13BIT)  |+----------------------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>1位不用。</code> 最高位依旧不用，固定为0。</li><li><code>28位的时间差。</code> 表示当前时间相对与”2016-05-20”的差值，单位为秒。最多可支持约8.7年。</li><li><code>22位的机器位。</code> 表示机器ID。每次机器重启后都废弃重新从数据库申请，最多可支持约420w次机器启动。</li><li><code>13位的序列化。</code> 每秒下的并发序列，可支持每秒8192个并发。</li></ul><h4 id="C-美团的Leaf-snowflake算法"><a href="#C-美团的Leaf-snowflake算法" class="headerlink" title="C. 美团的Leaf-snowflake算法"></a>C. 美团的<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf-snowflake算法</a></h4><p>美团<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf-snowflake算法</a>沿用了Twitter<a href="https://github.com/twitter-archive/snowflake">雪花算法</a>各个字段的意义，但是扩展了算法的使用方式，提高了算法的易用性和在时钟乱序时的容错性。</p><h5 id="提升算法的易用性"><a href="#提升算法的易用性" class="headerlink" title="提升算法的易用性"></a>提升算法的易用性</h5><p>在生成<code>全局唯一ID</code>的服务器集群中加入了Zookeeper。每次服务器启动时都去ZooKeeper读取(不存在时则注册)自己的用于生成<code>全局唯一ID</code>时的服务器ID值。因为服务器ID一般不会变，所以可以将这个值缓存起来，即使以后遇到连接ZooKeeper时，也能正常的启动服务器，并提供生成ID的服务。</p><h5 id="提升时钟乱序时的容错性"><a href="#提升时钟乱序时的容错性" class="headerlink" title="提升时钟乱序时的容错性"></a>提升时钟乱序时的容错性</h5><p>服务器会在启动时判断时钟发生是否发生了回拨，具体细节如下：</p><ul><li>如果服务器启动时，Zookeeper无此服务器的时间记录，那么就判断当前服务器的时间和其他的运行<a href="https://tech.meituan.com/2017/04/21/mt-leaf.html">Leaf-snowflake算法</a>服务器的时间的平均值(通过RPC获取)之间的差值，如果差值大于某个阈值，认为本机系统时间发生大步长偏移，启动失败并报警。</li><li>如果服务器启动时，Zookeeper已经有此服务器的时间记录，且当前服务器的时间小于记录的时间，那么就认为服务器时间发生了大步长回拨，服务启动失败并报警。</li><li>服务器正常启动后，定时(如每隔3秒)的向Zookeeper记录本服务器当前时间。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡简介</title>
      <link href="fu-zai-jun-heng-jian-jie/"/>
      <url>fu-zai-jun-heng-jian-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="一、为什么需要负载均衡"><a href="#一、为什么需要负载均衡" class="headerlink" title="一、为什么需要负载均衡"></a>一、为什么需要负载均衡</h2><p>随着业务的发展，业务的流量也越来越大，以前单台服务器提供的服务，无论如何优化，都不能满足现有业务的需求。这时，就需要将业务流量分摊到多个不同的服务器上来减少单个服务器的压力。而<code>负载均衡(Load Balance)</code>就是用来将业务流量分发到不用的服务器上面的。</p><h2 id="二、什么是负载均衡"><a href="#二、什么是负载均衡" class="headerlink" title="二、什么是负载均衡"></a>二、什么是负载均衡</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">+---------------------------------------------------------------------------+|                                                                           ||                                                             +----------+  ||                                                             |          |  ||                                              +------------&gt; |  Server  |  ||                                              |              |          |  ||                                              |              +----------+  ||                                              |                            ||  +----------+         +----------------+     |              +----------+  ||  |          |         |                |     |              |          |  ||  |  Client  | +-----&gt; |  Load Balance  | +----------------&gt; |  Server  |  ||  |          |         |                |     |              |          |  ||  +----------+         +----------------+     |              +----------+  ||                                              |                            ||                                              |              +----------+  ||                                              |              |          |  ||                                              +------------&gt; |  Server  |  ||                                                             |          |  ||                                                             +----------+  ||                                                                           |+---------------------------------------------------------------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>负载均衡(软件或硬件)会将所有的客户端流量，通过特定的调度算法分发到不同的后端服务器上，同时还会监控后端服务器的压力和监控状态，以便在某些后端服务器压力过大或故障时，减少对该服务器的流量分发，从而保证了整个业务的稳定。</p><h2 id="三、利用DNS实现负载均衡"><a href="#三、利用DNS实现负载均衡" class="headerlink" title="三、利用DNS实现负载均衡"></a>三、利用DNS实现负载均衡</h2><p>早期解决单个服务器压力过大的方法之一是利用DNS将域名解析到不同的IP的方式来实现的。如：客户端在不同的地区解析相同的域名时，DNS解析出离客户端最近的服务器IP。这样，不同的客户端就连接到提供了相同服务但是机器不同的服务器。从而分散了服务器压力，同时也缩短服务响应时间。这也是CDN原理。</p><p>利用DNS来实现负载均衡好处有成本低，实现简单等。但是弊端也是很明显的：</p><ol><li><code>流量分发的不够均匀。</code> DNS在解析IP时，能够根据客户端地理位置来分发流量，但是没法根据后端服务器的实际压力来分发流量。这样就可能会出现一台服务器压力满载，而其他的服务器无压力的情况。</li><li><code>支持的分发策略少。</code>DNS一般只支持轮询方式来解析。大大的限制了使用场景。</li><li><code>服务器故障时切换延迟大。</code> 由于DNS服务器是多层，且各层服务器中有缓存，导致了DNS修改后不能立即生效。这种情况下，如果一个后端服务器崩溃停止服务器，即使我们立即修改DNS，部分的客户端也无法立即恢复服务。这会严重影响用户体验。</li><li><code>DNS劫持和缓存污染导致的安全问题。</code> 由于DNS存在被劫持和缓存被污染可能，这会导致域名解析出来的IP可能不是我们服务器的IP，从而会导致客户端连接到了错误的服务器，造成安全问题。</li></ol><p>所以严格来说，使用DNS只能算是分发流量，而不能算作真正的负载均衡。</p><blockquote><p>Tips:</p><ol><li><code>DNS劫持:</code> DNS服务器被控制，查询DNS时，服务器直接返回给你它想让你看的信息。</li><li><code>DNS缓存污染:</code> 黑客通过技术手段使用户查询到虚假解析信息。</li></ol></blockquote><h2 id="四、基于OSI分层分类的负载均衡"><a href="#四、基于OSI分层分类的负载均衡" class="headerlink" title="四、基于OSI分层分类的负载均衡"></a>四、基于OSI分层分类的负载均衡</h2><div class="table-container"><table><thead><tr><th style="text-align:center">层级</th><th style="text-align:center">OSI参考模型</th><th style="text-align:center">各层解释</th></tr></thead><tbody><tr><td style="text-align:center">7</td><td style="text-align:center">应用层(Application)</td><td style="text-align:center">提供网络与用户应用软件之间的接口服务</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">表达层(Presentation)</td><td style="text-align:center">提供格式化的表示和转换数据服务，如加密和压缩</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">会话层(Session)</td><td style="text-align:center">提供包括访问验证和会话管理在内的建立和维护应用之间通信的机制</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">传输层(Transimission)</td><td style="text-align:center">提供建立、维护和取消传输连接功能，负责可靠地传输数据(PC)</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">网络层(Network)</td><td style="text-align:center">处理网络间路由，确保数据及时传送(路由器)</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">数据链路层(DataLink)</td><td style="text-align:center">负责无错传输数据，确认帧、发错重传等(交换机)</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">物理层(Physics)</td><td style="text-align:center">提供机械、电气、功能和过程特性(网卡、网线、双绞线、同轴电缆、中继器)</td></tr></tbody></table></div><p>参考OSI的七层模型，我们可以：</p><ol><li>在第二层(数据链路层)做基于MAC地址的<code>二层负载均衡</code>。通过一个虚拟MAC地址接收请求，然后再将数据转发到真实的MAC地址。</li><li>在第三层(网络层)做基于IP地址的<code>三层负载均衡</code>。通过一个虚拟IP地址接收请求，然后再将数据转发到真实的IP地址。</li><li>在第四层(传输层)做基于IP和端口的<code>四层负载均衡</code>。通过一个虚拟IP地址和端口接收请求，然后再将数据转发到真实的IP地址和端口。</li><li>在第七层(应用层)做基于应用层信息(如：URL)的<code>七层负载均衡</code>。通过一个虚拟的URL接收请求，然后再将数据转发到真实URL所在的服务器。</li></ol><p>常用的负载均衡有：<a href="#七层负载均衡">七层负载均衡</a>和<a href="#四层负载均衡">四层负载均衡</a>。</p><blockquote><p>Tips:</p><ol><li>DNS属于应用层的协议，所以<a href="#利用DNS实现负载均衡">利用DNS实现负载均衡</a>算是<a href="#七层负载均衡">七层负载均衡</a>。</li></ol></blockquote><h2 id="五、七层负载均衡"><a href="#五、七层负载均衡" class="headerlink" title="五、七层负载均衡"></a>五、七层负载均衡</h2><p><code>七层负载均衡</code>工作在OSI的第七层(传输层)，位于第四层(应用层)之上，所以需要完整的TCP/IP协议栈的实现，这也让负载均衡能够解析流量的内容。</p><p>客户端不能与直接与后端服务器建立传输层的连接(如TCP连接)，取而代之，客户端将直接与负载均衡建立连接，负载均衡解析完协议内容后，根据协议内容、流量分发策略和后端压力等信息选择一个后端服务器，并与服务器建立连接，然后将进行流量分发。所以，<code>七层负载均衡的主要工作就是代理。</code></p><p><code>七层负载均衡</code>的好处是显而易见的：</p><ol><li><code>可以查看修改流量内容。</code> 能够查看流量内容让负载均衡能够记录日志，方便进行大数据分析；也能够根据内容来做更加智能的流量分发；还能对明显非法的访问进行简单的过滤。能够修改流量让负载均衡能够添加额外的信息到流量中，为后端的业务处理提供更丰富的信息。</li><li><code>可以避免后端服务遭受传输层的流量攻击。</code> 因为客户端不再直接与后端服务器建立传输层的连接，后端服务器也就不会再受到可能的SYN Flood攻击。</li><li><code>无需特别的硬件就能实现。</code> 因为<code>七层负载均衡</code>工作在应用层，所以利用普通的软件即可实现。常用的软件有：Nginx、HAProxy等。</li></ol><p>同时也带来了一些不便：</p><ol><li><code>隐藏了客户端的连接信息。</code> 因为负载均衡取代了后端服务器与客户端建立连接。所以后端服务器<code>无法直接获取</code>真实的客户端IP信息等。但是可以通过修改流量的内容，将客户端的信息添加到流量中来避免此问题。</li><li><code>增加了排错的难度。</code> 增加七层负载的同时，也为将业务流程复杂化了，出错时也增加了排错的难度。</li></ol><p>所以，在使用<code>七层负载均衡</code>之前，需要综合考虑使用<code>七层负载均衡</code>能带来的好处以及不便。如果使用负载均衡的主要目的是分发流量，均衡后端压力，还可以考虑使用<a href="#四层负载均衡">四层负载均衡</a>。</p><h2 id="六、四层负载均衡"><a href="#六、四层负载均衡" class="headerlink" title="六、四层负载均衡"></a>六、四层负载均衡</h2><p><code>四层负载均衡</code>工作在OSI的第四层(传输层)，不需要完整的TCP/IP协议栈的实现，所以也不能解析流量的内容。在这一点来说，效率比<code>七层负载均衡</code>更高。</p><p>负载均衡仅能根据流量中目标地址和端口，加上指定的流量分发策略等信息进行流量分发。客户端能够直接与后端服务器建立传输层的连接(如TCP连接)，此时负载均衡的作用类似于路由器转发报文，只是更加智能可控。所以，<code>四层负载均衡的主要工作就是转发。</code></p><p>使用<code>四层负载均衡</code>最明显的好处是在保持分发策略最大化可控的同时性能的最大化。因为<code>四层负载均衡</code>并不需要解析传输层的协议内容，相比与<code>七层负载均衡</code>来说，少了很多工作。</p><p>但是，使用<code>四层负载均衡</code>的缺点也是很明显的：</p><ol><li><code>成本高昂。</code> <code>四层负载均衡</code>大多基于硬件来实现，虽然也有软件实现的。</li><li><code>暴露了后端的服务器。</code> 这与不用负载均衡前的情况相同，后端服务器直接暴露给客户端。服务器遭受攻击时会直接影响业务。</li></ol><hr><p>参考</p><ul><li><a href="https://tech.meituan.com/2017/01/05/mgw.html">MGW——美团点评高性能四层负载均衡</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下Bash配置文件的执行顺序</title>
      <link href="linux-xia-bash-pei-zhi-wen-jian-de-zhi-xing-shun-xu/"/>
      <url>linux-xia-bash-pei-zhi-wen-jian-de-zhi-xing-shun-xu/</url>
      
        <content type="html"><![CDATA[<blockquote><p><em>翻译自<a href="https://linux.101hacks.com/bash-scripting/execution-sequence-of-bash-files/">Linux 101 Hacks: 84</a></em></p></blockquote><h2 id="下列文件的执行顺序是什么"><a href="#下列文件的执行顺序是什么" class="headerlink" title="下列文件的执行顺序是什么"></a>下列文件的执行顺序是什么</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">/etc/profile~/.bash_profile~/.bashrc~/.bash_login~/.profile~/.bash_logout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="交互式登录shell的执行顺序"><a href="#交互式登录shell的执行顺序" class="headerlink" title="交互式登录shell的执行顺序"></a>交互式登录shell的执行顺序</h2><p>下面的伪代码将说明这些文件的执行顺序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">execute /etc/profileIF ~/.bash_profile exists THEN    execute ~/.bash_profileELSE    IF ~/.bash_login exist THEN        execute ~/.bash_login    ELSE        IF ~/.profile exist THEN            execute ~/.profile        END IF    END IFEND IF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你从交互式shell中注销，以下是执行顺序：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">IF ~/.bash_logout exists THEN    execute ~/.bash_logoutEND IF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>请注意/etc/bashrc是通过~/.bashrc执行，如下所示：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># cat ~/.bashrc</span>IF <span class="token punctuation">[</span> -f /etc/bashrc <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span><span class="token builtin class-name">.</span> /etc/bashrcFI<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="非登录交互式shell的执行顺序"><a href="#非登录交互式shell的执行顺序" class="headerlink" title="非登录交互式shell的执行顺序"></a>非登录交互式shell的执行顺序</h2><p>当你启动一个非登录交互式shell,下面是执行顺序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">IF ~/.bashrc exists THEN    execute ~/.bashrcEND IF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>注意</code>：当一个非交互式shell启动，它会寻找环境变量ENV，并执行包含在环境变量ENV中的文件。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Boost编译选项备忘</title>
      <link href="boost-bian-yi-xuan-xiang-bei-wang/"/>
      <url>boost-bian-yi-xuan-xiang-bei-wang/</url>
      
        <content type="html"><![CDATA[<h2 id="初始化Boost"><a href="#初始化Boost" class="headerlink" title="初始化Boost"></a>初始化Boost</h2><p>进入boost所在的目录，执行下面的命令初始化boost</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Windows</span>./bootstrap.bat<span class="token comment"># Linux</span>./bootstrap.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="编译使用C-静态CRT的64位Boost静态库"><a href="#编译使用C-静态CRT的64位Boost静态库" class="headerlink" title="编译使用C++静态CRT的64位Boost静态库"></a>编译使用C++静态CRT的64位Boost静态库</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./b2.exe --prefix<span class="token operator">=</span>./install64_staticlib_staticrt --stagedir<span class="token operator">=</span>./stage64_staticlib_staticrt --build-dir<span class="token operator">=</span>./build64_staticlib_staticrt --build-type<span class="token operator">=</span>complete --layout<span class="token operator">=</span>versioned --buildid<span class="token operator">=</span>amd64 --without-mpi --without-graph --without-graph_parallel --without-python address-model<span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">variant</span><span class="token operator">=</span>debug,release <span class="token assign-left variable">threading</span><span class="token operator">=</span>multi <span class="token assign-left variable">link</span><span class="token operator">=</span>static runtime-link<span class="token operator">=</span>static -a -q -j16 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的文件列表如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">libboost_atomic-vc140-mt-s-1_59-amd64.liblibboost_atomic-vc140-mt-sgd-1_59-amd64.liblibboost_chrono-vc140-mt-s-1_59-amd64.liblibboost_chrono-vc140-mt-sgd-1_59-amd64.liblibboost_container-vc140-mt-s-1_59-amd64.liblibboost_container-vc140-mt-sgd-1_59-amd64.liblibboost_context-vc140-mt-s-1_59-amd64.liblibboost_context-vc140-mt-sgd-1_59-amd64.liblibboost_coroutine-vc140-mt-s-1_59-amd64.liblibboost_coroutine-vc140-mt-sgd-1_59-amd64.liblibboost_date_time-vc140-mt-s-1_59-amd64.liblibboost_date_time-vc140-mt-sgd-1_59-amd64.liblibboost_exception-vc140-mt-s-1_59-amd64.liblibboost_exception-vc140-mt-sgd-1_59-amd64.liblibboost_filesystem-vc140-mt-s-1_59-amd64.liblibboost_filesystem-vc140-mt-sgd-1_59-amd64.liblibboost_iostreams-vc140-mt-s-1_59-amd64.liblibboost_iostreams-vc140-mt-sgd-1_59-amd64.liblibboost_locale-vc140-mt-s-1_59-amd64.liblibboost_locale-vc140-mt-sgd-1_59-amd64.liblibboost_log-vc140-mt-s-1_59-amd64.liblibboost_log-vc140-mt-sgd-1_59-amd64.liblibboost_log_setup-vc140-mt-s-1_59-amd64.liblibboost_log_setup-vc140-mt-sgd-1_59-amd64.liblibboost_math_c99-vc140-mt-s-1_59-amd64.liblibboost_math_c99-vc140-mt-sgd-1_59-amd64.liblibboost_math_c99f-vc140-mt-s-1_59-amd64.liblibboost_math_c99f-vc140-mt-sgd-1_59-amd64.liblibboost_math_c99l-vc140-mt-s-1_59-amd64.liblibboost_math_c99l-vc140-mt-sgd-1_59-amd64.liblibboost_math_tr1-vc140-mt-s-1_59-amd64.liblibboost_math_tr1-vc140-mt-sgd-1_59-amd64.liblibboost_math_tr1f-vc140-mt-s-1_59-amd64.liblibboost_math_tr1f-vc140-mt-sgd-1_59-amd64.liblibboost_math_tr1l-vc140-mt-s-1_59-amd64.liblibboost_math_tr1l-vc140-mt-sgd-1_59-amd64.liblibboost_prg_exec_monitor-vc140-mt-s-1_59-amd64.liblibboost_prg_exec_monitor-vc140-mt-sgd-1_59-amd64.liblibboost_program_options-vc140-mt-s-1_59-amd64.liblibboost_program_options-vc140-mt-sgd-1_59-amd64.liblibboost_random-vc140-mt-s-1_59-amd64.liblibboost_random-vc140-mt-sgd-1_59-amd64.liblibboost_regex-vc140-mt-s-1_59-amd64.liblibboost_regex-vc140-mt-sgd-1_59-amd64.liblibboost_serialization-vc140-mt-s-1_59-amd64.liblibboost_serialization-vc140-mt-sgd-1_59-amd64.liblibboost_signals-vc140-mt-s-1_59-amd64.liblibboost_signals-vc140-mt-sgd-1_59-amd64.liblibboost_system-vc140-mt-s-1_59-amd64.liblibboost_system-vc140-mt-sgd-1_59-amd64.liblibboost_test_exec_monitor-vc140-mt-s-1_59-amd64.liblibboost_test_exec_monitor-vc140-mt-sgd-1_59-amd64.liblibboost_thread-vc140-mt-s-1_59-amd64.liblibboost_thread-vc140-mt-sgd-1_59-amd64.liblibboost_timer-vc140-mt-s-1_59-amd64.liblibboost_timer-vc140-mt-sgd-1_59-amd64.liblibboost_unit_test_framework-vc140-mt-s-1_59-amd64.liblibboost_unit_test_framework-vc140-mt-sgd-1_59-amd64.liblibboost_wave-vc140-mt-s-1_59-amd64.liblibboost_wave-vc140-mt-sgd-1_59-amd64.liblibboost_wserialization-vc140-mt-s-1_59-amd64.liblibboost_wserialization-vc140-mt-sgd-1_59-amd64.lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./b2 --prefix<span class="token operator">=</span>./install64_staticlib_staticrt --stagedir<span class="token operator">=</span>./stage64_staticlib_staticrt --build-dir<span class="token operator">=</span>./build64_staticlib_staticrt --build-type<span class="token operator">=</span>complete --layout<span class="token operator">=</span>versioned --buildid<span class="token operator">=</span>amd64 --without-mpi --without-graph --without-graph_parallel --without-python <span class="token assign-left variable">cxxflags</span><span class="token operator">=</span>-fPIC <span class="token assign-left variable">cflags</span><span class="token operator">=</span>-fPIC address-model<span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">variant</span><span class="token operator">=</span>debug,release <span class="token assign-left variable">threading</span><span class="token operator">=</span>multi <span class="token assign-left variable">link</span><span class="token operator">=</span>static runtime-link<span class="token operator">=</span>static -a -q -j6 <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的文件列表如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">libboost_atomic-gcc49-mt-s-1_59-amd64.alibboost_atomic-gcc49-mt-sd-1_59-amd64.alibboost_chrono-gcc49-mt-s-1_59-amd64.alibboost_chrono-gcc49-mt-sd-1_59-amd64.alibboost_container-gcc49-mt-s-1_59-amd64.alibboost_container-gcc49-mt-sd-1_59-amd64.alibboost_context-gcc49-mt-s-1_59-amd64.alibboost_context-gcc49-mt-sd-1_59-amd64.alibboost_coroutine-gcc49-mt-s-1_59-amd64.alibboost_coroutine-gcc49-mt-sd-1_59-amd64.alibboost_date_time-gcc49-mt-s-1_59-amd64.alibboost_date_time-gcc49-mt-sd-1_59-amd64.alibboost_exception-gcc49-mt-s-1_59-amd64.alibboost_exception-gcc49-mt-sd-1_59-amd64.alibboost_filesystem-gcc49-mt-s-1_59-amd64.alibboost_filesystem-gcc49-mt-sd-1_59-amd64.alibboost_iostreams-gcc49-mt-s-1_59-amd64.alibboost_iostreams-gcc49-mt-sd-1_59-amd64.alibboost_locale-gcc49-mt-s-1_59-amd64.alibboost_locale-gcc49-mt-sd-1_59-amd64.alibboost_log-gcc49-mt-s-1_59-amd64.alibboost_log-gcc49-mt-sd-1_59-amd64.alibboost_log_setup-gcc49-mt-s-1_59-amd64.alibboost_log_setup-gcc49-mt-sd-1_59-amd64.alibboost_math_c99f-gcc49-mt-s-1_59-amd64.alibboost_math_c99f-gcc49-mt-sd-1_59-amd64.alibboost_math_c99-gcc49-mt-s-1_59-amd64.alibboost_math_c99-gcc49-mt-sd-1_59-amd64.alibboost_math_c99l-gcc49-mt-s-1_59-amd64.alibboost_math_c99l-gcc49-mt-sd-1_59-amd64.alibboost_math_tr1f-gcc49-mt-s-1_59-amd64.alibboost_math_tr1f-gcc49-mt-sd-1_59-amd64.alibboost_math_tr1-gcc49-mt-s-1_59-amd64.alibboost_math_tr1-gcc49-mt-sd-1_59-amd64.alibboost_math_tr1l-gcc49-mt-s-1_59-amd64.alibboost_math_tr1l-gcc49-mt-sd-1_59-amd64.alibboost_prg_exec_monitor-gcc49-mt-s-1_59-amd64.alibboost_prg_exec_monitor-gcc49-mt-sd-1_59-amd64.alibboost_program_options-gcc49-mt-s-1_59-amd64.alibboost_program_options-gcc49-mt-sd-1_59-amd64.alibboost_random-gcc49-mt-s-1_59-amd64.alibboost_random-gcc49-mt-sd-1_59-amd64.alibboost_regex-gcc49-mt-s-1_59-amd64.alibboost_regex-gcc49-mt-sd-1_59-amd64.alibboost_serialization-gcc49-mt-s-1_59-amd64.alibboost_serialization-gcc49-mt-sd-1_59-amd64.alibboost_signals-gcc49-mt-s-1_59-amd64.alibboost_signals-gcc49-mt-sd-1_59-amd64.alibboost_system-gcc49-mt-s-1_59-amd64.alibboost_system-gcc49-mt-sd-1_59-amd64.alibboost_test_exec_monitor-gcc49-mt-s-1_59-amd64.alibboost_test_exec_monitor-gcc49-mt-sd-1_59-amd64.alibboost_thread-gcc49-mt-s-1_59-amd64.alibboost_thread-gcc49-mt-sd-1_59-amd64.alibboost_timer-gcc49-mt-s-1_59-amd64.alibboost_timer-gcc49-mt-sd-1_59-amd64.alibboost_unit_test_framework-gcc49-mt-s-1_59-amd64.alibboost_unit_test_framework-gcc49-mt-sd-1_59-amd64.alibboost_wave-gcc49-mt-s-1_59-amd64.alibboost_wave-gcc49-mt-sd-1_59-amd64.alibboost_wserialization-gcc49-mt-s-1_59-amd64.alibboost_wserialization-gcc49-mt-sd-1_59-amd64.a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改boost的头文件"><a href="#修改boost的头文件" class="headerlink" title="修改boost的头文件"></a>修改boost的头文件</h2><p>把下面的内容加到文件<code>install64_staticlib_staticrt/include/boost-1_59/boost/config</code>的最后：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BOOST_LIB_BUILDID amd64</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch安装备忘</title>
      <link href="arch-an-zhuang-bei-wang/"/>
      <url>arch-an-zhuang-bei-wang/</url>
      
        <content type="html"><![CDATA[<h2 id="获取ISO"><a href="#获取ISO" class="headerlink" title="获取ISO"></a>获取<a href="http://mirrors.163.com/archlinux/iso/latest/">ISO</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://mirrors.163.com/archlinux/iso/latest/archlinux-2018.05.01-x86_64.iso<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="从ISO文件引导系统"><a href="#从ISO文件引导系统" class="headerlink" title="从ISO文件引导系统"></a>从ISO文件引导系统</h2><h2 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">timedatectl set-ntp <span class="token boolean">true</span>timedatectl status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">parted</span> -a optimal /dev/sdamklabel gptunit mibmkpart primary <span class="token number">1</span> <span class="token number">3</span>name <span class="token number">1</span> grub<span class="token builtin class-name">set</span> <span class="token number">1</span> bios_grub onmkpart primary <span class="token number">3</span> <span class="token number">256</span>name <span class="token number">2</span> boot<span class="token builtin class-name">set</span> <span class="token number">2</span> boot onmkpart primary <span class="token number">256</span> <span class="token number">8448</span>name <span class="token number">3</span> swapmkpart primary <span class="token number">8448</span> -1name <span class="token number">4</span> rootfsprintquitmkfs.ext4 /dev/sda2mkfs.ext4 /dev/sda4<span class="token function">mkswap</span> /dev/sda3<span class="token function">swapon</span> /dev/sda3<span class="token function">mount</span> /dev/sda4 /mnt<span class="token function">mkdir</span> /mnt/boot<span class="token function">mount</span> /dev/sda2 /mnt/boot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Arch"><a href="#安装Arch" class="headerlink" title="安装Arch"></a>安装Arch</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bk<span class="token function">grep</span> <span class="token number">163</span>.com /etc/pacman.d/mirrorlist.bk <span class="token operator">&gt;</span> /etc/pacman.d/mirrorlistpacstrap /mnt base base-develgenfstab -U /mnt <span class="token operator">&gt;&gt;</span> /mnt/etc/fstab<span class="token function">cat</span> /mnt/etc/fstabarch-chroot /mnt<span class="token function">ln</span> -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtimehwclock --systohc<span class="token function">mv</span> /etc/locale.gen /etc/locale.gen.bk<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/locale.gen</span>en_US ISO-8859-1en_US.UTF-8 UTF-8zh_CN GB18030zh_CN.GBK GBKzh_CN.GB2312 GB2312zh_CN.UTF-8 UTF-8EOF</span>locale-genlocale -a<span class="token builtin class-name">echo</span> <span class="token string">"LANG=en_US.UTF-8"</span> <span class="token operator">&gt;</span> /etc/locale.conf<span class="token builtin class-name">echo</span> <span class="token string">"kiba"</span> <span class="token operator">&gt;</span> /etc/hostname<span class="token function">passwd</span>systemctl <span class="token builtin class-name">enable</span> dhcpcdpacman -S <span class="token function">vim</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Grub"><a href="#安装Grub" class="headerlink" title="安装Grub"></a>安装Grub</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S grubgrub-install /dev/sda<span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span class="token builtin class-name">exit</span><span class="token builtin class-name">cd</span><span class="token function">umount</span> -R /mnt<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装常用软件"><a href="#安装常用软件" class="headerlink" title="安装常用软件"></a>安装常用软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 可以使用命令`pacman -Fs binname`根据执行文件的名字搜索软件包的名字</span>pacman -S openssh<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;&gt;</span>/etc/ssh/sshd_config</span>PermitRootLogin yesPasswordAuthentication yesEOF</span>systemctl <span class="token builtin class-name">enable</span> sshdsystemctl start sshd<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;&gt;</span>/etc/pacman.conf</span>[archlinuxcn]SigLevel = Optional TrustAllServer = http://mirrors.163.com/archlinux-cn/<span class="token variable">$arch</span>EOF</span>pacman -Syy <span class="token operator">&amp;&amp;</span> pcman -Syu <span class="token operator">&amp;&amp;</span> pacman -S archlinuxcn-keyringpacman -S yaourtpacman -S <span class="token function">wget</span> <span class="token function">git</span><span class="token function">mkdir</span> /usr/share/pictures<span class="token function">wget</span> http://b.hiphotos.baidu.com/zhidao/pic/item/1ad5ad6eddc451da88f9f31ab3fd5266d0163237.jpg -O /usr/share/pictures/background.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装GUI"><a href="#安装GUI" class="headerlink" title="安装GUI"></a>安装GUI</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pacman -S xorg xorg-xinit xf86-video-fbdevpacman -S i3-wm i3status i3lock dmenu rxvt-unicode rxvt-unicode-terminfo conky fehpacman -S ttf-font-awesome<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch </tag>
            
            <tag> 系统安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gentoo安装备忘</title>
      <link href="gentoo-an-zhuang-bei-wang/"/>
      <url>gentoo-an-zhuang-bei-wang/</url>
      
        <content type="html"><![CDATA[<h2 id="获取ISO"><a href="#获取ISO" class="headerlink" title="获取ISO"></a>获取<a href="http://mirrors.163.com/gentoo/releases/amd64/autobuilds/">ISO</a></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://mirrors.163.com/gentoo/releases/amd64/autobuilds/current-install-amd64-minimal/install-amd64-minimal-20180415T214502Z.iso<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="从ISO文件引导系统"><a href="#从ISO文件引导系统" class="headerlink" title="从ISO文件引导系统"></a>从ISO文件引导系统</h2><h2 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">parted</span> -a optimal /dev/sdamklabel gptunit mibmkpart primary <span class="token number">1</span> <span class="token number">3</span>name <span class="token number">1</span> grub<span class="token builtin class-name">set</span> <span class="token number">1</span> bios_grub onmkpart primary <span class="token number">3</span> <span class="token number">256</span>name <span class="token number">2</span> boot<span class="token builtin class-name">set</span> <span class="token number">2</span> boot onmkpart primary <span class="token number">256</span> <span class="token number">8448</span>name <span class="token number">3</span> swapmkpart primary <span class="token number">8448</span> -1name <span class="token number">4</span> rootfsprintquitmkfs.ext4 /dev/sda2mkfs.ext4 /dev/sda4<span class="token function">mkswap</span> /dev/sda3<span class="token function">swapon</span> /dev/sda3<span class="token function">mount</span> /dev/sda4 /mnt/gentoo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Gentoo"><a href="#安装Gentoo" class="headerlink" title="安装Gentoo"></a>安装Gentoo</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /mnt/gentoo<span class="token function">wget</span> http://mirrors.163.com/gentoo/releases/amd64/autobuilds/current-install-amd64-minimal/stage3-amd64-20180415T214502Z.tar.xz<span class="token comment"># hardened</span><span class="token function">wget</span> http://mirrors.163.com/gentoo/releases/amd64/autobuilds/current-stage3-amd64-hardened/stage3-amd64-hardened-20180517T214504Z.tar.xz<span class="token comment"># systemd</span><span class="token function">wget</span> http://mirrors.163.com/gentoo/releases/amd64/autobuilds/current-stage3-amd64-systemd/stage3-amd64-systemd-20180518.tar.bz2<span class="token function">tar</span> xpf stage3-amd64-20180415T214502Z.tar.xz --xattrs-include<span class="token operator">=</span><span class="token string">'*.*'</span> --numeric-owner<span class="token function">cp</span> /mnt/gentoo/etc/portage/make.conf /mnt/gentoo/etc/portage/make.conf.bk<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span> /mnt/gentoo/etc/portage/make.conf</span>CFLAGS="-march=native -O2 -pipe"CXXFLAGS="-march=native -O2 -pipe"CHOST="x86_64-pc-linux-gnu"MAKEOPTS="-j9 -l8"EMERGE_DEFAULT_OPTS="--jobs=8 --load-average=8 --ask --verbose --with-bdeps=y"PORTAGE_NICENESS=15# get by cpuid2cpuflags(emerge app-portage/cpuid2cpuflags)CPU_FLAGS_X86="aes avx avx2 f16c fma3 mmx mmxext pclmul popcnt sse sse2 sse3 sse4_1 sse4_2 ssse3"ACCEPT_KEYWORDS="amd64"#GENTOO_MIRRORS="https://mirrors.tuna.tsinghua.edu.cn/gentoo/"#GENTOO_MIRRORS="https://mirrors.163.com/gentoo/"GENTOO_MIRRORS="http://mirrors.ustc.edu.cn/gentoo/"L10N="en-US zh-CN"#LINGUAS="en_US zh_CN"LC_MESSAGES="C"PORTDIR="/usr/portage"DISTDIR="/usr/portage/distfiles"PKGDIR="/usr/portage/packages"#FEATURES="ccache"#CCACHE_SIZE="8G"#USE="dbus policykit udisks udev consolekit X"#VIDEO_CARDS="vmware"#INPUT_DEVICES="keyboard mouse"EOF</span><span class="token function">mkdir</span> --parents /mnt/gentoo/etc/portage/repos.conf<span class="token function">cp</span> /mnt/gentoo/usr/share/portage/config/repos.conf /mnt/gentoo/etc/portage/repos.conf/gentoo.conf.bk<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span> /mnt/gentoo/etc/portage/repos.conf/gentoo.conf</span>[DEFAULT]main-repo = gentoo[gentoo]location = /usr/portagesync-type = rsync#sync-uri = rsync://rsync.gentoo.org/gentoo-portage#sync-uri = rsync://rsync.cn.gentoo.org/gentoo-portagesync-uri = rsync://rsync.mirrors.ustc.edu.cn/gentoo-portage/auto-sync = yessync-rsync-verify-jobs = 1sync-rsync-verify-metamanifest = nosync-rsync-verify-max-age = 24sync-openpgp-key-path = /usr/share/openpgp-keys/gentoo-release.ascsync-openpgp-key-refresh-retry-count = 40sync-openpgp-key-refresh-retry-overall-timeout = 1200sync-openpgp-key-refresh-retry-delay-exp-base = 2sync-openpgp-key-refresh-retry-delay-max = 60sync-openpgp-key-refresh-retry-delay-mult = 4# for daily squashfs snapshots#sync-type = squashdelta#sync-uri = mirror://gentoo/../snapshots/squashfsEOF</span><span class="token function">cp</span> --dereference /etc/resolv.conf /mnt/gentoo/etc/<span class="token function">mount</span> --types proc /proc /mnt/gentoo/proc<span class="token function">mount</span> --rbind /sys /mnt/gentoo/sys<span class="token function">mount</span> --make-rslave /mnt/gentoo/sys<span class="token function">mount</span> --rbind /dev /mnt/gentoo/dev<span class="token function">mount</span> --make-rslave /mnt/gentoo/dev<span class="token function">chroot</span> /mnt/gentoo /bin/bash<span class="token builtin class-name">source</span> /etc/profile<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"(chroot) <span class="token variable">${<span class="token environment constant">PS1</span>}</span>"</span><span class="token function">mkdir</span> /boot<span class="token function">mount</span> /dev/sda2 /bootemerge-webrsyncemerge --synceselect profile listeselect profile <span class="token builtin class-name">set</span> default/linux/amd64/17.0/desktop/plasmaemerge --ask --update --deep --newuse @world<span class="token function">ls</span> /usr/share/zoneinfo<span class="token builtin class-name">echo</span> <span class="token string">"Asia/Shanghai"</span> <span class="token operator">&gt;</span> /etc/timezoneemerge --config sys-libs/timezone-data<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/locale.gen</span>en_US ISO-8859-1en_US.UTF-8 UTF-8zh_CN GB18030zh_CN.GBK GBKzh_CN.GB2312 GB2312zh_CN.UTF-8 UTF-8EOF</span>locale-genlocale -aeselect locale listeselect locale <span class="token builtin class-name">set</span> en_US.utf8env-update <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">source</span> /etc/profile <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PS1</span></span><span class="token operator">=</span><span class="token string">"(chroot) <span class="token environment constant">$PS1</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emerge sys-kernel/gentoo-sources<span class="token function">ls</span> -l /usr/src/linuxemerge sys-kernel/genkernel<span class="token function">nano</span> -w /etc/fstab<span class="token comment"># /dev/sda2 /boot ext2 defaults 0 2</span>genkernel all<span class="token comment"># or genkernel --lvm all</span><span class="token function">ls</span> /boot/kernel* /boot/initramfs*emerge sys-kernel/linux-firmware<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置系统"><a href="#配置系统" class="headerlink" title="配置系统"></a>配置系统</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nano</span> -w /etc/fstab<span class="token comment">#/dev/sda2  /boot       ext4    defaults,noatime    0 2</span><span class="token comment">#/dev/sda3  none        swap    sw                  0 0</span><span class="token comment">#/dev/sda4  /           ext4    noatime             0 1</span><span class="token comment">#/dev/cdrom /mnt/cdrom  auto    noauto,user         0 0</span><span class="token function">cp</span> /etc/conf.d/hostname /etc/conf.d/hostname.bk<span class="token builtin class-name">echo</span> <span class="token string">"hostname=<span class="token entity" title="\&quot;">\"</span>gentoo<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token operator">&gt;</span> /etc/conf.d/hostnameemerge --noreplace net-misc/netifrc<span class="token builtin class-name">echo</span> <span class="token string">"config_eno16777736=<span class="token entity" title="\&quot;">\"</span>dhcp<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token operator">&gt;</span> /etc/conf.d/net<span class="token function">passwd</span><span class="token builtin class-name">cd</span> /etc/init.d<span class="token function">ln</span> -s net.lo net.eno16777736rc-update <span class="token function">add</span> net.eno16777736 default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装系统工具"><a href="#安装系统工具" class="headerlink" title="安装系统工具"></a>安装系统工具</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emerge app-admin/sysklogdrc-update <span class="token function">add</span> sysklogd defaultemerge sys-process/cronierc-update <span class="token function">add</span> cronie defaultemerge sys-apps/mlocaterc-update <span class="token function">add</span> sshd defaultemerge net-misc/dhcpcdrc-update <span class="token function">add</span> dhcpcd defaultrc-update <span class="token function">add</span> dbus defaultrc-update <span class="token function">add</span> udev sysinitrc-update <span class="token function">add</span> consolekit default<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Grub"><a href="#安装Grub" class="headerlink" title="安装Grub"></a>安装Grub</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emerge sys-boot/grub:2grub-install /dev/sda<span class="token function">grub-mkconfig</span> -o /boot/grub/grub.cfg<span class="token builtin class-name">exit</span><span class="token builtin class-name">cd</span><span class="token function">umount</span> -l /mnt/gentoo/dev<span class="token punctuation">{</span>/shm,/pts,<span class="token punctuation">}</span><span class="token function">umount</span> -R /mnt/gentoo<span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装系统内核工具"><a href="#安装系统内核工具" class="headerlink" title="安装系统内核工具"></a>安装系统内核工具</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emerge app-portage/eix app-portage/gentoolkit<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">eix-syncemerge -avuDN --tree worldemerge -av --depcleanrevdep-rebuild -v -- --askdispatch-confeclean-dist -deix-test-obsoleteglsa-check -t allglsa-check -f all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装Xorg"><a href="#安装Xorg" class="headerlink" title="安装Xorg"></a>安装Xorg</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emerge --ask x11-base/xorg-drivers media-libs/mesa x11-base/xorg-x11 x11-wm/twm x11-terms/xtermstartx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装Kde"><a href="#安装Kde" class="headerlink" title="安装Kde"></a>安装Kde</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emerge --ask kde-plasma/plasma-meta<span class="token builtin class-name">echo</span> <span class="token string">"DISPLAYMANAGER=<span class="token entity" title="\&quot;">\"</span>sddm<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token operator">&gt;&gt;</span> /etc/conf.d/xdmrc-update <span class="token function">add</span> xdm default<span class="token function">useradd</span> -m k<span class="token function">passwd</span> k<span class="token comment">#su k</span><span class="token comment">#groups</span><span class="token comment">#usermod -a -G plugdev k</span>emerge app-portage/laymanlayman -Llayman -a gentoo-zhemerge app-i18n/fcitx app-i18n/fcitx-cloudpinyin app-i18n/kcm-fcitx<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;&gt;</span>/home/k/.xprofile</span>eval "<span class="token variable"><span class="token variable">$(</span>dbus-launch --sh-syntax --exit-with-session<span class="token variable">)</span></span>"export XMODIFIERS="@im=fcitx"export QT_IM_MODULE=fcitxexport GTK_IM_MODULE=fcitxEOF</span><span class="token comment">#/etc/init.d/xdm restart</span><span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">emerge --ask kde-apps/kde-apps-metaemerge --ask www-client/google-chromeemerge --ask app-portage/pfl<span class="token comment"># e-file = apt-file</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ntp</span>emerge --ask net-misc/openntpd<span class="token function">mv</span> /etc/ntpd.conf /etc/ntpd.conf.bk<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/ntpd.conf</span>servers 0.cn.pool.ntp.orgservers 1.cn.pool.ntp.orgservers 2.cn.pool.ntp.orgservers 3.cn.pool.ntp.orgEOF</span>/etc/init.d/ntpd startrc-update <span class="token function">add</span> ntpd default<span class="token function">cp</span> /etc/conf.d/hwclock /etc/conf.d/hwclock.bk<span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF<span class="token bash punctuation"> <span class="token operator">&gt;</span>/etc/conf.d/hwclock</span>clock="local"clock_args=""EOF</span>hwclock --systohc --utchwclock --hctosys --localtime<span class="token function">date</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统安装 </tag>
            
            <tag> Gentoo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断两个矩形是否相交</title>
      <link href="pan-duan-liang-ge-ju-xing-shi-fou-xiang-jiao/"/>
      <url>pan-duan-liang-ge-ju-xing-shi-fou-xiang-jiao/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给出两个矩形的一个顶点和宽度高度，判断两个矩形是否相交并计算出相交的区域。</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>下面给了出几种算法的C代码并对其进行了测试，算法依次更简单快速：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">IsOverlap1</span><span class="token punctuation">(</span><span class="token keyword">double</span> ax1<span class="token punctuation">,</span> <span class="token keyword">double</span> ay1<span class="token punctuation">,</span> <span class="token keyword">double</span> aw<span class="token punctuation">,</span> <span class="token keyword">double</span> ah<span class="token punctuation">,</span>    <span class="token keyword">double</span> bx1<span class="token punctuation">,</span> <span class="token keyword">double</span> by1<span class="token punctuation">,</span> <span class="token keyword">double</span> bw<span class="token punctuation">,</span> <span class="token keyword">double</span> bh<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> ax2<span class="token punctuation">,</span> ay2<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> by2<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">+=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> bh<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_PARAM_CHECK_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> c<span class="token punctuation">)</span></span></span>    <span class="token comment">/*    1.B有顶点在A中    -------A    |     |    |   ------B    |   | |  |    ----|--  |        |    |        ------    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> by2<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> by2<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/*    2.A有2或4个顶点在B中    -------B    | --- |    --|-|--      ---A    -------    | --- |    | |A| |    | --- |    -------B    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> ax1<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> ax2<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> ay2<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/*    3.A与B十字相交且A横B竖       ---B       | |    ---|-|---A    |  | |  |    ---|-|---       | |       ---    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> by2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> ay2<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">/*    3.A与B十字相交且A竖B横       ---A       | |    ---|-|---B    |  | |  |    ---|-|---       | |       ---    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> ax1<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> ax2<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">_IS_BETWEEN_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> by2<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">IsOverlap2</span><span class="token punctuation">(</span><span class="token keyword">double</span> ax1<span class="token punctuation">,</span> <span class="token keyword">double</span> ay1<span class="token punctuation">,</span> <span class="token keyword">double</span> aw<span class="token punctuation">,</span> <span class="token keyword">double</span> ah<span class="token punctuation">,</span>    <span class="token keyword">double</span> bx1<span class="token punctuation">,</span> <span class="token keyword">double</span> by1<span class="token punctuation">,</span> <span class="token keyword">double</span> bw<span class="token punctuation">,</span> <span class="token keyword">double</span> bh<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/*    如果A与B中心在X和Y轴上的距离小于他们边长和的一半就相交    */</span>    <span class="token keyword">double</span> ax2<span class="token punctuation">,</span> ay2<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> by2<span class="token punctuation">;</span>    <span class="token keyword">double</span> dx<span class="token punctuation">,</span> dy<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">+=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> bh<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_PARAM_CHECK_</span></span>    dx <span class="token operator">=</span> ax1 <span class="token operator">+</span> ax2 <span class="token operator">-</span> <span class="token punctuation">(</span>bx1 <span class="token operator">+</span> bx2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* A与B中心在X轴上距离的2倍 */</span>    dy <span class="token operator">=</span> ay1 <span class="token operator">+</span> ay2 <span class="token operator">-</span> <span class="token punctuation">(</span>by1 <span class="token operator">+</span> by2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* A与B中心在Y轴上距离的2倍 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> dx <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> dx<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dy <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> dy <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> dy<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">&lt;=</span> aw <span class="token operator">+</span> bw <span class="token operator">&amp;&amp;</span> dy <span class="token operator">&lt;=</span> ah <span class="token operator">+</span> bh<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">IsOverlap3</span><span class="token punctuation">(</span><span class="token keyword">double</span> ax1<span class="token punctuation">,</span> <span class="token keyword">double</span> ay1<span class="token punctuation">,</span> <span class="token keyword">double</span> aw<span class="token punctuation">,</span> <span class="token keyword">double</span> ah<span class="token punctuation">,</span>    <span class="token keyword">double</span> bx1<span class="token punctuation">,</span> <span class="token keyword">double</span> by1<span class="token punctuation">,</span> <span class="token keyword">double</span> bw<span class="token punctuation">,</span> <span class="token keyword">double</span> bh<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">/*    找出不相交的情况，取反    */</span>    <span class="token keyword">double</span> ax2<span class="token punctuation">,</span> ay2<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> by2<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">+=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> bh<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_PARAM_CHECK_</span></span>    <span class="token comment">/* A在B左边 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ax2 <span class="token operator">&lt;</span> bx1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/* A在B右边 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bx2 <span class="token operator">&lt;</span> ax1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/* A在B上边 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>by2 <span class="token operator">&lt;</span> ay1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">/* A在B下边 */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ay2 <span class="token operator">&lt;</span> by1<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">IsOverlap4</span><span class="token punctuation">(</span><span class="token keyword">double</span> ax1<span class="token punctuation">,</span> <span class="token keyword">double</span> ay1<span class="token punctuation">,</span> <span class="token keyword">double</span> aw<span class="token punctuation">,</span> <span class="token keyword">double</span> ah<span class="token punctuation">,</span>    <span class="token keyword">double</span> bx1<span class="token punctuation">,</span> <span class="token keyword">double</span> by1<span class="token punctuation">,</span> <span class="token keyword">double</span> bw<span class="token punctuation">,</span> <span class="token keyword">double</span> bh<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> ax2<span class="token punctuation">,</span> ay2<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> by2<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">+=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> bh<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_PARAM_CHECK_</span></span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>ax1 <span class="token operator">&lt;=</span> bx2 <span class="token operator">&amp;&amp;</span> bx1 <span class="token operator">&lt;=</span> ax2 <span class="token operator">&amp;&amp;</span> ay1 <span class="token operator">&lt;=</span> by2 <span class="token operator">&amp;&amp;</span> by1 <span class="token operator">&lt;=</span> ay2<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">GetOverlap</span><span class="token punctuation">(</span><span class="token keyword">double</span> ax1<span class="token punctuation">,</span> <span class="token keyword">double</span> ay1<span class="token punctuation">,</span> <span class="token keyword">double</span> aw<span class="token punctuation">,</span> <span class="token keyword">double</span> ah<span class="token punctuation">,</span>    <span class="token keyword">double</span> bx1<span class="token punctuation">,</span> <span class="token keyword">double</span> by1<span class="token punctuation">,</span> <span class="token keyword">double</span> bw<span class="token punctuation">,</span> <span class="token keyword">double</span> bh<span class="token punctuation">,</span>    <span class="token keyword">double</span><span class="token operator">*</span> cx1<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">*</span> cy1<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">*</span> cw<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token operator">*</span> ch<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> ax2<span class="token punctuation">,</span> ay2<span class="token punctuation">,</span> bx2<span class="token punctuation">,</span> by2<span class="token punctuation">;</span>    <span class="token keyword">double</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">do</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">&lt;</span> <span class="token number">0.0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">+=</span> b<span class="token punctuation">;</span> b <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span></span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ax2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> ay2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>bx1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">_PARAM_CHECK_</span><span class="token punctuation">(</span>by1<span class="token punctuation">,</span> bh<span class="token punctuation">,</span> by2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">undef</span> <span class="token expression">_PARAM_CHECK_</span></span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ax1 <span class="token operator">&lt;=</span> bx2 <span class="token operator">&amp;&amp;</span> bx1 <span class="token operator">&lt;=</span> ax2 <span class="token operator">&amp;&amp;</span> ay1 <span class="token operator">&lt;=</span> by2 <span class="token operator">&amp;&amp;</span> by1 <span class="token operator">&lt;=</span> ay2<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x1 <span class="token operator">=</span> ax1 <span class="token operator">&gt;</span> bx1 <span class="token operator">?</span> ax1 <span class="token operator">:</span> bx1<span class="token punctuation">;</span>        y1 <span class="token operator">=</span> ay1 <span class="token operator">&gt;</span> by1 <span class="token operator">?</span> ay1 <span class="token operator">:</span> by1<span class="token punctuation">;</span>        x2 <span class="token operator">=</span> ax2 <span class="token operator">&lt;</span> bx2 <span class="token operator">?</span> ax2 <span class="token operator">:</span> bx2<span class="token punctuation">;</span>        y2 <span class="token operator">=</span> ay2 <span class="token operator">&lt;</span> by2 <span class="token operator">?</span> ay2 <span class="token operator">:</span> by2<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> cx1<span class="token punctuation">)</span> <span class="token operator">*</span>cx1 <span class="token operator">=</span> x1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> cy1<span class="token punctuation">)</span> <span class="token operator">*</span>cy1 <span class="token operator">=</span> y1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> cw<span class="token punctuation">)</span> <span class="token operator">*</span>cw <span class="token operator">=</span> x2 <span class="token operator">-</span> x1<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">!=</span> ch<span class="token punctuation">)</span> <span class="token operator">*</span>ch <span class="token operator">=</span> y2 <span class="token operator">-</span> y1<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> s<span class="token punctuation">,</span> <span class="token keyword">double</span> ax1<span class="token punctuation">,</span> <span class="token keyword">double</span> ay1<span class="token punctuation">,</span> <span class="token keyword">double</span> aw<span class="token punctuation">,</span> <span class="token keyword">double</span> ah<span class="token punctuation">,</span>    <span class="token keyword">double</span> bx1<span class="token punctuation">,</span> <span class="token keyword">double</span> by1<span class="token punctuation">,</span> <span class="token keyword">double</span> bw<span class="token punctuation">,</span> <span class="token keyword">double</span> bh<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">double</span> cx1 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> cy1 <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> cw <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> ch <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> s<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"-----------------------------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Test:%s\n"</span><span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"A:%lf, %lf, %lf, %lf\n"</span><span class="token punctuation">,</span> ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ah<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"B:%lf, %lf, %lf, %lf\n"</span><span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result1:%d\n"</span><span class="token punctuation">,</span> <span class="token function">IsOverlap1</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result2:%d\n"</span><span class="token punctuation">,</span> <span class="token function">IsOverlap2</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result3:%d\n"</span><span class="token punctuation">,</span> <span class="token function">IsOverlap3</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result4:%d\n"</span><span class="token punctuation">,</span> <span class="token function">IsOverlap4</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bh<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">GetOverlap</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> ay1<span class="token punctuation">,</span> aw<span class="token punctuation">,</span> ah<span class="token punctuation">,</span> bx1<span class="token punctuation">,</span> by1<span class="token punctuation">,</span> bw<span class="token punctuation">,</span> bh<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cx1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cy1<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cw<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Overlap:%lf, %lf, %lf, %lf\n"</span><span class="token punctuation">,</span> cx1<span class="token punctuation">,</span> cy1<span class="token punctuation">,</span> cw<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The left-up    of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The left-down  of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The right-up   of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The right-down of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The left-up    of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The left-down  of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The right-up   of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The right-down of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The up    of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The down  of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The left  of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The right of B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">4.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The up    of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The down  of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span>  <span class="token number">4.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The left  of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The right of A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span>  <span class="token number">4.0</span><span class="token punctuation">,</span>  <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The B in A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"The A in B"</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"horizontal A cross vertical B"</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Test</span><span class="token punctuation">(</span><span class="token string">"horizontal B cross vertical A"</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码测试结果"><a href="#代码测试结果" class="headerlink" title="代码测试结果"></a>代码测试结果</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">-----------------------------------------------Test:The left-up    of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, 2.000000, -2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 1.000000, 1.000000, 1.000000-----------------------------------------------Test:The left-down  of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 1.000000, 1.000000-----------------------------------------------Test:The right-up   of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, -2.000000, -2.000000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 1.000000, 1.000000, 1.000000-----------------------------------------------Test:The right-down of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, -2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 2.000000, 1.000000, 1.000000-----------------------------------------------Test:The left-up    of A in BA:2.000000, 2.000000, 2.000000, -2.000000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 1.000000, 1.000000, 1.000000-----------------------------------------------Test:The left-down  of A in BA:2.000000, 2.000000, 2.000000, 2.000000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 1.000000, 1.000000-----------------------------------------------Test:The right-up   of A in BA:2.000000, 2.000000, -2.000000, -2.000000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 1.000000, 1.000000, 1.000000-----------------------------------------------Test:The right-down of A in BA:2.000000, 2.000000, -2.000000, 2.000000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 2.000000, 1.000000, 1.000000-----------------------------------------------Test:The up    of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, 0.500000, -4.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 1.000000, 0.500000, 1.000000-----------------------------------------------Test:The down  of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, 0.500000, 4.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 0.500000, 1.000000-----------------------------------------------Test:The left  of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, -4.000000, 0.500000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 2.000000, 1.000000, 0.500000-----------------------------------------------Test:The right of B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, 4.000000, 0.500000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 1.000000, 0.500000-----------------------------------------------Test:The up    of A in BA:2.000000, 2.000000, 0.500000, -4.000000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 1.000000, 0.500000, 1.000000-----------------------------------------------Test:The down  of A in BA:2.000000, 2.000000, 0.500000, 4.000000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 0.500000, 1.000000-----------------------------------------------Test:The left  of A in BA:2.000000, 2.000000, -4.000000, 0.500000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 2.000000, 1.000000, 0.500000-----------------------------------------------Test:The right of A in BA:2.000000, 2.000000, 4.000000, 0.500000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 1.000000, 0.500000-----------------------------------------------Test:The B in AA:1.000000, 1.000000, 2.000000, 2.000000B:2.000000, 2.000000, 0.500000, 0.500000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 0.500000, 0.500000-----------------------------------------------Test:The A in BA:2.000000, 2.000000, 0.500000, 0.500000B:1.000000, 1.000000, 2.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:2.000000, 2.000000, 0.500000, 0.500000-----------------------------------------------Test:horizontal A cross vertical BA:0.000000, 1.000000, 2.000000, 1.000000B:1.000000, 0.000000, 1.000000, 2.000000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 1.000000, 1.000000, 1.000000-----------------------------------------------Test:horizontal B cross vertical AA:1.000000, 0.000000, 1.000000, 2.000000B:0.000000, 1.000000, 2.000000, 1.000000Result1:1Result2:1Result3:1Result4:1Overlap:1.000000, 1.000000, 1.000000, 1.000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 矩形相交 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下Bash中case用法详解</title>
      <link href="linux-xia-bash-zhong-case-yong-fa-xiang-jie/"/>
      <url>linux-xia-bash-zhong-case-yong-fa-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>Linux下Bash中的case和C/C++中的switch类似，但是Bash中的case更强大和复杂。</p><ol><li>强大主要体现在：Bash中case中的关键字可以是字符串类型，而每一项中可以包含正则表达式。</li><li>复杂主要体现在：Bash中case的每一个项后有三个选择：break(常规的break)、unconditional follow up(无条件继续)和conditional follow up(有条件继续)。</li></ol><p>这篇文章的重点是上面的第2点。</p><blockquote><p><code>注意</code>: case的无条件继续和有条件继续是bash 4.1.x及之后的版本中才有的特性。</p></blockquote><p>执行如下命令可以查看你当前bash的版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token environment constant">$BASH_VERSION</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>常规的break是在每一项后面加;;</li><li>无条件继续是在每一项后面加;&amp;</li><li>有条件继续实在每一项后面加;;&amp;</li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> <span class="token string">"Test No.1 ..."</span><span class="token keyword">case</span> <span class="token string">"1"</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'1'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>    <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'2'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'3'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    ?<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'?'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'*'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token builtin class-name">echo</span> <span class="token string">"Test No.2 ..."</span><span class="token keyword">case</span> <span class="token string">"1"</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'1'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'2'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>    <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'3'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    ?<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'?'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'*'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token builtin class-name">echo</span> <span class="token string">"Test No.3 ..."</span><span class="token keyword">case</span> <span class="token string">"1"</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'1'</span>        <span class="token punctuation">;</span><span class="token operator">&amp;</span>    <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'2'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'3'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    ?<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'?'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'*'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token builtin class-name">echo</span> <span class="token string">"Test No.4 ..."</span><span class="token keyword">case</span> <span class="token string">"1"</span> <span class="token keyword">in</span>    <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'1'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'2'</span>        <span class="token punctuation">;</span><span class="token operator">&amp;</span>    <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'3'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    ?<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'?'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token builtin class-name">echo</span> <span class="token string">'*'</span>        <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><pre class="line-numbers language-text" data-language="text"><code class="language-text">Test No.1 ...1?Test No.2 ...1Test No.3 ...12Test No.4 ...1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个带参数解析的Shell例子</title>
      <link href="yi-ge-dai-can-shu-jie-xi-de-shell-li-zi/"/>
      <url>yi-ge-dai-can-shu-jie-xi-de-shell-li-zi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># Program:</span><span class="token comment">#   LZSH server log filter</span><span class="token comment"># History:</span><span class="token comment">#   2014/07/01  Kom     First release</span><span class="token comment">#   2014/07/03  Kom     Remote and multi-param support</span><span class="token comment">#   2014/07/18  Kom     Fix multi keyword bug</span><span class="token comment">#   2014/07/18  Kom     Continue exe even if some cmd failed</span><span class="token comment">#   2014/07/18  Kom     optimize</span><span class="token comment"># Set PATH</span><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span>/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin<span class="token builtin class-name">export</span> <span class="token environment constant">PATH</span><span class="token comment">#Disable filename globbing</span><span class="token builtin class-name">set</span> -f<span class="token comment"># Set script name variable</span><span class="token assign-left variable">SCRIPT</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">basename</span> $<span class="token punctuation">{</span><span class="token environment constant">BASH_SOURCE</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token assign-left variable">SCRIPT_VER</span><span class="token operator">=</span><span class="token number">20140718</span>-1809<span class="token comment"># Initialize variables to default values</span><span class="token assign-left variable">IP</span><span class="token operator">=</span><span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token assign-left variable">TMPOUTPUT</span><span class="token operator">=</span><span class="token builtin class-name">declare</span> -a KEYS<span class="token builtin class-name">declare</span> -a INPUTS<span class="token assign-left variable">OUTPUT</span><span class="token operator">=</span><span class="token comment"># Set fonts for help</span><span class="token assign-left variable">NORM</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>tput sgr0<span class="token variable">`</span></span><span class="token assign-left variable">BOLD</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>tput bold<span class="token variable">`</span></span><span class="token assign-left variable">REV</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>tput smso<span class="token variable">`</span></span><span class="token comment"># Help function</span><span class="token keyword">function</span> <span class="token function-name function">HELP</span><span class="token punctuation">{</span>    <span class="token builtin class-name">echo</span> -e <span class="token punctuation">\</span>n<span class="token string">"<span class="token variable">${BOLD}</span>龙之守护数据过滤脚本<span class="token variable">${SCRIPT}</span><span class="token variable">${NORM}</span>的帮助文档"</span>    <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">${BOLD}</span>版本：<span class="token variable">${SCRIPT_VER}</span><span class="token variable">${NORM}</span>"</span><span class="token punctuation">\</span>n    <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">${REV}</span>用法:<span class="token variable">${NORM}</span> <span class="token variable">${BOLD}</span><span class="token variable">$SCRIPT</span> 参数<span class="token variable">${NORM}</span>"</span><span class="token punctuation">\</span>n    <span class="token builtin class-name">echo</span> <span class="token string">"可选参数:"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${REV}</span>-a<span class="token variable">${NORM}</span>  --输入文件所在的IP，为空表示本地（默认为空）"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${REV}</span>-u<span class="token variable">${NORM}</span>  --访问输入文件所用的用户名，当文件在本地时不使用此参数"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${REV}</span>-k<span class="token variable">${NORM}</span>  --用于过滤的关键字，此参数可以多个联合使用(例如：-k物品创建 -k强化石)"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${REV}</span>-i<span class="token variable">${NORM}</span>  --输入文件的全路径，此参数可以多个联合使用(例如：-i/home/log/objscenesserver21.log.140701-* -i/home/log/objscenesserver40.log.140701-*)"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${REV}</span>-o<span class="token variable">${NORM}</span>  --本地输出文件的全路径(例如：-o/local/lzsh.log)"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${REV}</span>-t<span class="token variable">${NORM}</span>  --临时输出文件的全路径，当文件在本地时不使用此参数"</span>    <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">${REV}</span>-h<span class="token variable">${NORM}</span>  --显示此帮助并退出"</span><span class="token punctuation">\</span>n    <span class="token builtin class-name">echo</span> -e <span class="token string">"示例: "</span>    <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">${BOLD}</span><span class="token variable">$SCRIPT</span> -a127.0.0.1 -uUsername -k物品创建 -k强化石 -i/home/log/objscenesserver21.log.140701-* -o/local/lzsh.log -t/tmp/lzsh.log<span class="token variable">${NORM}</span>"</span><span class="token punctuation">\</span>n    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token comment"># Check the number of argument. If none are passed, print help and exit.</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    HELP<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"输入参数：<span class="token variable">${BOLD}</span><span class="token variable">$*</span><span class="token variable">${NORM}</span>"</span><span class="token keyword">fi</span><span class="token keyword">while</span> <span class="token builtin class-name">getopts</span> :a:u:t:i:o:k:h FLAG<span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">case</span> <span class="token variable">$FLAG</span> <span class="token keyword">in</span>        a<span class="token punctuation">)</span>            <span class="token assign-left variable">IP</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        u<span class="token punctuation">)</span>            <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token variable">$OPTARG</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        t<span class="token punctuation">)</span>            <span class="token assign-left variable">TMPOUTPUT</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        i<span class="token punctuation">)</span>            <span class="token assign-left variable">INPUTS</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">${INPUTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token variable">$OPTARG</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        o<span class="token punctuation">)</span>            <span class="token assign-left variable">OUTPUT</span><span class="token operator">=</span><span class="token variable">$OPTARG</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        k<span class="token punctuation">)</span>            <span class="token assign-left variable">KEYS</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">${KEYS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> <span class="token variable">$OPTARG</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span><span class="token punctuation">;</span>        h<span class="token punctuation">)</span> <span class="token comment"># show help</span>            HELP            <span class="token punctuation">;</span><span class="token punctuation">;</span>        ?<span class="token punctuation">)</span> <span class="token comment"># unrecognized option - show help</span>            <span class="token builtin class-name">echo</span> -e <span class="token punctuation">\</span>n<span class="token string">"非法参数：-<span class="token variable">${BOLD}</span><span class="token variable">$OPTARG</span><span class="token variable">${NORM}</span>"</span>            HELP            <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">esac</span><span class="token keyword">done</span><span class="token builtin class-name">shift</span> <span class="token variable"><span class="token variable">$((</span>OPTIND<span class="token operator">-</span><span class="token number">1</span><span class="token variable">))</span></span> <span class="token comment">#  This tells getopts to move on to the next argument</span><span class="token comment">#######################################################################</span><span class="token comment"># Parameters check</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${<span class="token operator">#</span>KEYS}</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"你必须指定至少一个<span class="token variable">${BOLD}</span>关键字<span class="token variable">${NORM}</span>"</span>    <span class="token builtin class-name">exit</span> -1<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"关键字：<span class="token variable">${BOLD}</span><span class="token variable">${KEYS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token variable">${NORM}</span>"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">${<span class="token operator">#</span>INPUTS}</span> -eq <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"你必须指定至少一个<span class="token variable">${BOLD}</span>输入文件<span class="token variable">${NORM}</span>"</span>    <span class="token builtin class-name">exit</span> -1<span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"输入文件：<span class="token variable">${BOLD}</span><span class="token variable">${INPUTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token variable">${NORM}</span>"</span><span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$OUTPUT</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"你必须指定<span class="token variable">${BOLD}</span>本地输出文件<span class="token variable">${NORM}</span>"</span>    <span class="token builtin class-name">exit</span> -1<span class="token keyword">fi</span><span class="token builtin class-name">echo</span> <span class="token string">"输出文件：<span class="token variable">${BOLD}</span><span class="token variable">${OUTPUT<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token variable">${NORM}</span>"</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -z <span class="token variable">$IP</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token environment constant">$USER</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"必须指定用于访问<span class="token variable">${BOLD}</span><span class="token variable">${IP}</span><span class="token variable">${NORM}</span>的<span class="token variable">${BOLD}</span>用户名<span class="token variable">${NORM}</span>"</span>        <span class="token builtin class-name">exit</span> -1    <span class="token keyword">fi</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -z <span class="token variable">$TMPOUTPUT</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"必须指定在<span class="token variable">${BOLD}</span><span class="token variable">${IP}</span><span class="token variable">${NORM}</span>上的<span class="token variable">${BOLD}</span>临时输出文件<span class="token variable">${NORM}</span>"</span>        <span class="token builtin class-name">exit</span> -1    <span class="token keyword">fi</span><span class="token keyword">fi</span><span class="token comment">#######################################################################</span><span class="token comment"># Work</span><span class="token assign-left variable">TARGETOUTPUT</span><span class="token operator">=</span><span class="token string">""</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -z <span class="token variable">$IP</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token assign-left variable">TARGETOUTPUT</span><span class="token operator">=</span><span class="token variable">$TMPOUTPUT</span><span class="token keyword">else</span>    <span class="token assign-left variable">TARGETOUTPUT</span><span class="token operator">=</span><span class="token variable">$OUTPUT</span><span class="token keyword">fi</span><span class="token assign-left variable">CMD</span><span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> <span class="token for-or-select variable">k</span> <span class="token keyword">in</span> <span class="token variable">${KEYS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span><span class="token keyword">do</span>    <span class="token assign-left variable">CMD</span><span class="token operator">=</span><span class="token variable">${CMD}</span><span class="token string">"grep <span class="token variable">$k</span> <span class="token variable">${INPUTS<span class="token punctuation">[</span>@<span class="token punctuation">]</span>}</span> &gt;&gt; <span class="token variable">$TARGETOUTPUT</span>; "</span><span class="token keyword">done</span><span class="token assign-left variable">CMD</span><span class="token operator">=</span><span class="token string">"echo &gt; <span class="token variable">$TARGETOUTPUT</span>; <span class="token variable">$CMD</span>"</span><span class="token builtin class-name">echo</span> <span class="token variable">$CMD</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> -z <span class="token variable">$IP</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> -e <span class="token punctuation">\</span>n<span class="token string">"将要执行ssh命令："</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${BOLD}</span>ssh <span class="token environment constant">$USER</span>@<span class="token variable">$IP</span> "</span><span class="token variable">$CMD</span><span class="token string">"<span class="token variable">${NORM}</span>"</span>    <span class="token function">sh</span> -c <span class="token string">"ssh <span class="token environment constant">$USER</span>@<span class="token variable">$IP</span> "</span><span class="token variable">$CMD</span><span class="token string">""</span>    <span class="token builtin class-name">echo</span> -e <span class="token punctuation">\</span>n<span class="token string">"将要执行scp命令："</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${BOLD}</span>scp <span class="token environment constant">$USER</span>@<span class="token variable">$IP</span>:<span class="token variable">$TMPOUTPUT</span> <span class="token variable">$OUTPUT</span><span class="token variable">${NORM}</span>"</span>    <span class="token function">sh</span> -c <span class="token string">"scp <span class="token environment constant">$USER</span>@<span class="token variable">$IP</span>:<span class="token variable">$TMPOUTPUT</span> <span class="token variable">$OUTPUT</span>"</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> -e <span class="token punctuation">\</span>n<span class="token string">"将要执行命令："</span>    <span class="token builtin class-name">echo</span> <span class="token string">"<span class="token variable">${BOLD}</span><span class="token variable">$CMD</span><span class="token variable">${NORM}</span>"</span>    <span class="token function">sh</span> -c <span class="token string">"<span class="token variable">$CMD</span>"</span><span class="token keyword">fi</span><span class="token builtin class-name">exit</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win32程序发生异常时处理的流程</title>
      <link href="win32-cheng-xu-fa-sheng-yi-chang-shi-chu-li-de-liu-cheng/"/>
      <url>win32-cheng-xu-fa-sheng-yi-chang-shi-chu-li-de-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、程序没有被调试"><a href="#一、程序没有被调试" class="headerlink" title="一、程序没有被调试"></a>一、程序没有被调试</h2><ol><li>线程建立时，系统安装一个系统线程异常处理例程。</li><li>异常发生时，Win2K/XP控制权转移给NTDLL.KiUserExceptionDispatcher。</li><li>如果你安装了线程相关的异常处理例程，系统就把异常发送给你的处理例程，交由其处理。</li><li>每个线程相关的异常处理例程可以处理或者不处理这个异常,如果他不处理并且安装了多个线程相关的异常处理例程，可交由链起来的其他例程处理。</li><li>如果这些例程均选择不处理异常，系统线程异常处理例程将起作用，调用ZwQueryInformationProcess判断是否被调试，没有调试并且你调用SetUnhandledExceptionFilter安装了最后异常处理例程的话，系统转向对它的调用。</li><li>如果你没有安装最后异常处理例程或者他没有处理这个异常，系统会调用默认的系统处理程序，通常显示一个对话框，你可以选择关闭或者最后将其附加到调试器上的调试按钮。如果没有调试器能被附加于其上或者调试器也处理不了，系统就调用ExitProcess终结程序。</li><li>不过在终结之前，系统仍然对发生异常的线程异常处理句柄来一次展开，这是线程异常处理例程最后清理的机会。一般只用来释放资源，不要试图修复什么。注意只对线程异常有展开。</li></ol><h2 id="二、程序被调试"><a href="#二、程序被调试" class="headerlink" title="二、程序被调试"></a>二、程序被调试</h2><ol><li>线程建立时，系统安装一个系统线程异常处理例程。</li><li>异常发生时，系统挂起程序并向调试器发送。EXCEPTION_DEBUG_EVENT消息。</li><li>调试器未能处理异常(比如我们在OD里按Shift+F7)，控制权转移给 NTDLL。KiUserExceptionDispatcher如果你安装了线程相关的异常处理例程，系统就把异常发送给你的程序seh处理例程，交由其处理。</li><li>每个线程相关的异常处理例程可以处理或者不处理这个异常，如果他不处理并且安装了多个线程相关的异常处理例程，可交由链起来的其他例程处理。</li><li>如果这些例程均选择不处理异常，系统线程异常处理例程将起作用，调用ZwQueryInformationProcess判断是否被调试。</li><li>由于被调试，操作系统仍会再次挂起程序通知debugger。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++重载内存分配时需要注意的地方</title>
      <link href="c-chong-zai-nei-cun-fen-pei-shi-xu-yao-zhu-yi-de-di-fang/"/>
      <url>c-chong-zai-nei-cun-fen-pei-shi-xu-yao-zhu-yi-de-di-fang/</url>
      
        <content type="html"><![CDATA[<h2 id="一、测试代码"><a href="#一、测试代码" class="headerlink" title="一、测试代码"></a>一、测试代码</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;malloc.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;new&gt;</span></span><span class="token comment">//#define VF</span><span class="token comment">//#define FLAG</span><span class="token keyword">class</span> <span class="token class-name">MemObj</span><span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">VF</span></span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">MemObj</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// VF</span></span>    <span class="token keyword">static</span> <span class="token keyword">void</span><span class="token operator">*</span> <span class="token keyword">operator</span> <span class="token keyword">new</span><span class="token punctuation">(</span>size_t stSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"operator new(size_t) %dn"</span><span class="token punctuation">,</span> stSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">malloc</span><span class="token punctuation">(</span>stSize<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">FLAG</span></span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pMemory<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"operator delete(void*)n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pMemory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token operator">*</span> pMemory<span class="token punctuation">,</span> size_t stSize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"operator delete(void*, size_t) %dn"</span><span class="token punctuation">,</span> stSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>pMemory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">MemObj</span></span><span class="token punctuation">{</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> m_nValue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>    MemObj<span class="token operator">*</span> pObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MemObj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> pObj<span class="token punctuation">;</span>    Test<span class="token operator">*</span> pTest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> pTest<span class="token punctuation">;</span>    pObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> pObj<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、测试"><a href="#二、测试" class="headerlink" title="二、测试"></a>二、测试</h2><p>通过控制宏VF和宏FLAG的定义与否来查看各个情况下代码运行的结果。</p><h3 id="测试1：不定义宏VF和FLAG"><a href="#测试1：不定义宏VF和FLAG" class="headerlink" title="测试1：不定义宏VF和FLAG"></a>测试1：不定义宏VF和FLAG</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">operator new(size_t) 1operator delete(void*, size_t) 1operator new(size_t) 4operator delete(void*, size_t) 1operator new(size_t) 4operator delete(void*, size_t) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试2：定义宏FLAG但不定义宏VF"><a href="#测试2：定义宏FLAG但不定义宏VF" class="headerlink" title="测试2：定义宏FLAG但不定义宏VF"></a>测试2：定义宏FLAG但不定义宏VF</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">operator new(size_t) 1operator delete(void*)operator new(size_t) 4operator delete(void*)operator new(size_t) 4operator delete(void*)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试3：定义宏VF但不定义宏FLAG"><a href="#测试3：定义宏VF但不定义宏FLAG" class="headerlink" title="测试3：定义宏VF但不定义宏FLAG"></a>测试3：定义宏VF但不定义宏FLAG</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">operator new(size_t) 4operator delete(void*, size_t) 4operator new(size_t) 8operator delete(void*, size_t) 8operator new(size_t) 8operator delete(void*, size_t) 8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试4：同时定义宏VF和FLAG"><a href="#测试4：同时定义宏VF和FLAG" class="headerlink" title="测试4：同时定义宏VF和FLAG"></a>测试4：同时定义宏VF和FLAG</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">operator new(size_t) 4operator delete(void*)operator new(size_t) 8operator delete(void*)operator new(size_t) 8operator delete(void*)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、结果分析"><a href="#三、结果分析" class="headerlink" title="三、结果分析"></a>三、结果分析</h2><h3 id="1-对比测试1和测试2"><a href="#1-对比测试1和测试2" class="headerlink" title="1. 对比测试1和测试2"></a>1. 对比测试1和测试2</h3><p>重载了operator new(size_t stSize)后，在删除的时候：</p><ol><li>如果没有定义<code>void operator delete(void* pMemory)，那么会调用void operator delete(void* pMemory, size_t stSize)</code>；</li><li>如果定义了<code>void operator delete(void* pMemory)，不管是否定义void operator delete(void* pMemory, size_t stSize)都会调用void operator delete(void* pMemory)</code>。</li></ol><p>结论：<br>重载operator new(size_t)后，如果同时重载了operator delete(void<em>)，删除时候会调用operator delete(void</em>)，否则才会调用operator delete(void*, size_t)。</p><h3 id="2-对比测试1和测试3"><a href="#2-对比测试1和测试3" class="headerlink" title="2. 对比测试1和测试3"></a>2. 对比测试1和测试3</h3><p>如果不将基类的析构函数定义为虚析构函数，会有内存泄漏。</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Win32下FS寄存器、TEB和PEB详解</title>
      <link href="win32-xia-fs-ji-cun-qi-teb-he-peb-xiang-jie/"/>
      <url>win32-xia-fs-ji-cun-qi-teb-he-peb-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>在Win32下，FS段寄存器指向当前的TEB结构，在TEB编译0x30处是PEB指针，通过这个指针即可获得PED的地址。</p><p>实现方法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__asm<span class="token punctuation">{</span>    mov eax<span class="token punctuation">,</span> fs<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0x30</span><span class="token punctuation">]</span>    mov PED<span class="token punctuation">,</span> eax<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TEB和PEB的结构如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">PEB_BASE</span> <span class="token punctuation">(</span><span class="token number">0x7ffdf000</span><span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_NT_TIB</span><span class="token punctuation">{</span>                                           <span class="token comment">// Size: 01C</span>    <span class="token keyword">struct</span> <span class="token class-name">_EXCEPTION_REGISTRATION_RECORD</span> <span class="token operator">*</span>ExceptionList<span class="token punctuation">;</span> <span class="token comment">// 000</span>    PVOID StackBase<span class="token punctuation">;</span>                        <span class="token comment">// 004</span>    PVOID StackLimit<span class="token punctuation">;</span>                       <span class="token comment">// 008</span>    PVOID SubSystemTib<span class="token punctuation">;</span>                     <span class="token comment">// 00C</span>    <span class="token keyword">union</span>                                   <span class="token comment">// 010</span>    <span class="token punctuation">{</span>        PVOID FiberData<span class="token punctuation">;</span>        ULONG Version<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    PVOID ArbitraryUserPointer<span class="token punctuation">;</span>             <span class="token comment">// 014</span>    <span class="token keyword">struct</span> <span class="token class-name">_NT_TIB</span> <span class="token operator">*</span>Self<span class="token punctuation">;</span>                   <span class="token comment">// 018</span><span class="token punctuation">}</span> NT_TIB<span class="token punctuation">,</span> <span class="token operator">*</span>PNT_TIB<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_TEB</span><span class="token punctuation">{</span>                                           <span class="token comment">// Size:  FBC</span>    NT_TIB Tib<span class="token punctuation">;</span>                             <span class="token comment">// 000</span>    PVOID EnvironmentPointer<span class="token punctuation">;</span>               <span class="token comment">// 01C</span>    CLIENT_ID Cid<span class="token punctuation">;</span>                          <span class="token comment">// 020</span>    PVOID ActiveRpcHandle<span class="token punctuation">;</span>                  <span class="token comment">// 028</span>    PVOID ThreadLocalStoragePointer<span class="token punctuation">;</span>        <span class="token comment">// 02C</span>    <span class="token keyword">struct</span> <span class="token class-name">_PEB</span> <span class="token operator">*</span>ProcessEnvironmentBlock<span class="token punctuation">;</span>   <span class="token comment">// 030</span>    ULONG LastErrorValue<span class="token punctuation">;</span>                   <span class="token comment">// 034</span>    ULONG CountOfOwnedCriticalSections<span class="token punctuation">;</span>     <span class="token comment">// 038</span>    PVOID CsrClientThread<span class="token punctuation">;</span>                  <span class="token comment">// 03C</span>    <span class="token keyword">struct</span> <span class="token class-name">_W32THREAD</span><span class="token operator">*</span> Win32ThreadInfo<span class="token punctuation">;</span>     <span class="token comment">// 040</span>    ULONG User32Reserved<span class="token punctuation">[</span><span class="token number">0x1A</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment">// 044</span>    ULONG UserReserved<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">// 0AC</span>    PVOID WOW32Reserved<span class="token punctuation">;</span>                    <span class="token comment">// 0C0</span>    LCID CurrentLocale<span class="token punctuation">;</span>                     <span class="token comment">// 0C4</span>    ULONG FpSoftwareStatusRegister<span class="token punctuation">;</span>         <span class="token comment">// 0C8</span>    PVOID SystemReserved1<span class="token punctuation">[</span><span class="token number">0x36</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 0CC</span>    LONG ExceptionCode<span class="token punctuation">;</span>                     <span class="token comment">// 1A4</span>    <span class="token keyword">struct</span> <span class="token class-name">_ACTIVATION_CONTEXT_STACK</span> <span class="token operator">*</span>ActivationContextStackPointer<span class="token punctuation">;</span> <span class="token comment">// 1A8</span>    UCHAR SpareBytes1<span class="token punctuation">[</span><span class="token number">0x28</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 1AC</span>    GDI_TEB_BATCH GdiTebBatch<span class="token punctuation">;</span>              <span class="token comment">// 1D4</span>    CLIENT_ID RealClientId<span class="token punctuation">;</span>                 <span class="token comment">// 6B4</span>    PVOID GdiCachedProcessHandle<span class="token punctuation">;</span>           <span class="token comment">// 6BC</span>    ULONG GdiClientPID<span class="token punctuation">;</span>                     <span class="token comment">// 6C0</span>    ULONG GdiClientTID<span class="token punctuation">;</span>                     <span class="token comment">// 6C4</span>    PVOID GdiThreadLocalInfo<span class="token punctuation">;</span>               <span class="token comment">// 6C8</span>    ULONG Win32ClientInfo<span class="token punctuation">[</span><span class="token number">62</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">// 6CC</span>    PVOID glDispatchTable<span class="token punctuation">[</span><span class="token number">0xE9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 7C4</span>    ULONG glReserved1<span class="token punctuation">[</span><span class="token number">0x1D</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// B68</span>    PVOID glReserved2<span class="token punctuation">;</span>                      <span class="token comment">// BDC</span>    PVOID glSectionInfo<span class="token punctuation">;</span>                    <span class="token comment">// BE0</span>    PVOID glSection<span class="token punctuation">;</span>                        <span class="token comment">// BE4</span>    PVOID glTable<span class="token punctuation">;</span>                          <span class="token comment">// BE8</span>    PVOID glCurrentRC<span class="token punctuation">;</span>                      <span class="token comment">// BEC</span>    PVOID glContext<span class="token punctuation">;</span>                        <span class="token comment">// BF0</span>    NTSTATUS LastStatusValue<span class="token punctuation">;</span>               <span class="token comment">// BF4</span>    UNICODE_STRING StaticUnicodeString<span class="token punctuation">;</span>     <span class="token comment">// BF8</span>    WCHAR StaticUnicodeBuffer<span class="token punctuation">[</span><span class="token number">0x105</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token comment">// C00</span>    PVOID DeallocationStack<span class="token punctuation">;</span>                <span class="token comment">// E0C</span>    PVOID TlsSlots<span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                   <span class="token comment">// E10</span>    LIST_ENTRY TlsLinks<span class="token punctuation">;</span>                    <span class="token comment">// F10</span>    PVOID Vdm<span class="token punctuation">;</span>                              <span class="token comment">// F18</span>    PVOID ReservedForNtRpc<span class="token punctuation">;</span>                 <span class="token comment">// F1C</span>    PVOID DbgSsReserved<span class="token punctuation">[</span><span class="token number">0x2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">// F20</span>    ULONG HardErrorDisabled<span class="token punctuation">;</span>                <span class="token comment">// F28</span>    PVOID Instrumentation<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">// F2C</span>    PVOID SubProcessTag<span class="token punctuation">;</span>                    <span class="token comment">// F64</span>    PVOID EtwTraceData<span class="token punctuation">;</span>                     <span class="token comment">// F68</span>    PVOID WinSockData<span class="token punctuation">;</span>                      <span class="token comment">// F6C</span>    ULONG GdiBatchCount<span class="token punctuation">;</span>                    <span class="token comment">// F70</span>    BOOLEAN InDbgPrint<span class="token punctuation">;</span>                     <span class="token comment">// F74</span>    BOOLEAN FreeStackOnTermination<span class="token punctuation">;</span>         <span class="token comment">// F75</span>    BOOLEAN HasFiberData<span class="token punctuation">;</span>                   <span class="token comment">// F76</span>    UCHAR IdealProcessor<span class="token punctuation">;</span>                   <span class="token comment">// F77</span>    ULONG GuaranteedStackBytes<span class="token punctuation">;</span>             <span class="token comment">// F78</span>    PVOID ReservedForPerf<span class="token punctuation">;</span>                  <span class="token comment">// F7C</span>    PVOID ReservedForOle<span class="token punctuation">;</span>                   <span class="token comment">// F80</span>    ULONG WaitingOnLoaderLock<span class="token punctuation">;</span>              <span class="token comment">// F84</span>    ULONG SparePointer1<span class="token punctuation">;</span>                    <span class="token comment">// F88</span>    ULONG SoftPatchPtr1<span class="token punctuation">;</span>                    <span class="token comment">// F8C</span>    ULONG SoftPatchPtr2<span class="token punctuation">;</span>                    <span class="token comment">// F90</span>    PVOID <span class="token operator">*</span>TlsExpansionSlots<span class="token punctuation">;</span>               <span class="token comment">// F94</span>    ULONG ImpersionationLocale<span class="token punctuation">;</span>             <span class="token comment">// F98</span>    ULONG IsImpersonating<span class="token punctuation">;</span>                  <span class="token comment">// F9C</span>    PVOID NlsCache<span class="token punctuation">;</span>                         <span class="token comment">// FA0</span>    PVOID pShimData<span class="token punctuation">;</span>                        <span class="token comment">// FA4</span>    ULONG HeapVirualAffinity<span class="token punctuation">;</span>               <span class="token comment">// FA8</span>    PVOID CurrentTransactionHandle<span class="token punctuation">;</span>         <span class="token comment">// FAC</span>    PTEB_ACTIVE_FRAME ActiveFrame<span class="token punctuation">;</span>          <span class="token comment">// FB0</span>    PVOID FlsData<span class="token punctuation">;</span>                          <span class="token comment">// FB4</span>    UCHAR SafeThunkCall<span class="token punctuation">;</span>                    <span class="token comment">// FB8</span>    UCHAR BooleanSpare<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment">// FB9</span><span class="token punctuation">}</span> TEB<span class="token punctuation">,</span> <span class="token operator">*</span>PTEB<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_LIST_ENTRY</span><span class="token punctuation">{</span>                                           <span class="token comment">// Size: 008</span>    <span class="token keyword">struct</span> <span class="token class-name">_LIST_ENTRY</span> <span class="token operator">*</span>Flink<span class="token punctuation">;</span>              <span class="token comment">// 000 从前到后</span>    <span class="token keyword">struct</span> <span class="token class-name">_LIST_ENTRY</span> <span class="token operator">*</span>Blink<span class="token punctuation">;</span>              <span class="token comment">// 004 从后到前</span><span class="token punctuation">}</span> LIST_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>PLIST_ENTRY<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PER_LDR_DATA</span><span class="token punctuation">{</span>                                           <span class="token comment">// Size: 0024</span>    ULONG Length<span class="token punctuation">;</span>                           <span class="token comment">// 000</span>    BOOLEAN Initialize<span class="token punctuation">;</span>                     <span class="token comment">// 004</span>    PVOID SsHandle<span class="token punctuation">;</span>                         <span class="token comment">// 008</span>    LIST_ENTRY InLoadOrderModuleList<span class="token punctuation">;</span>       <span class="token comment">// 00C</span>    LIST_ENTRY InMemoryOrderModuleList<span class="token punctuation">;</span>     <span class="token comment">// 014</span>    LIST_ENTRY InInitializationOrderModuleList<span class="token punctuation">;</span> <span class="token comment">// 01C</span><span class="token punctuation">}</span> PER_LDR_DATA<span class="token punctuation">,</span> <span class="token operator">*</span>PPER_LDR_DATA<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_UNICODE_STRING</span><span class="token punctuation">{</span>                                           <span class="token comment">// Size: 008</span>  USHORT  Length<span class="token punctuation">;</span>                           <span class="token comment">// 000 占用的内存字节数，个数*2；</span>  USHORT  MaximumLength<span class="token punctuation">;</span>                    <span class="token comment">// 002</span>  PWSTR  Buffer<span class="token punctuation">;</span>                            <span class="token comment">// 004</span><span class="token punctuation">}</span> UNICODE_STRING <span class="token punctuation">,</span><span class="token operator">*</span>PUNICODE_STRING<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_LDR_DATA_TABLE_ENTRY</span><span class="token punctuation">{</span>                                           <span class="token comment">// Size: 050</span>     LIST_ENTRY InLoadOrderLinks<span class="token punctuation">;</span>           <span class="token comment">// 000 LIST_ENTRY里的Flink和Blink其实是指向LDR_MODULE结构，即LDR_DATA_TABLE_ENTRY</span>     LIST_ENTRY InMemoryOrderLinks<span class="token punctuation">;</span>         <span class="token comment">// 008 同上</span>     LIST_ENTRY InInitializationOrderLinks<span class="token punctuation">;</span> <span class="token comment">// 010 同上</span>     PVOID DllBase<span class="token punctuation">;</span>                         <span class="token comment">// 018</span>     PVOID EntryPoint<span class="token punctuation">;</span>                      <span class="token comment">// 01C</span>     ULONG SizeOfImage<span class="token punctuation">;</span>                     <span class="token comment">// 020</span>     UNICODE_STRING FullDllName<span class="token punctuation">;</span>            <span class="token comment">// 024</span>     UNICODE_STRING BaseDllName<span class="token punctuation">;</span>            <span class="token comment">// 02C</span>     ULONG Flags<span class="token punctuation">;</span>                           <span class="token comment">// 034</span>     WORD LoadCount<span class="token punctuation">;</span>                        <span class="token comment">// 038</span>     WORD TlsIndex<span class="token punctuation">;</span>                         <span class="token comment">// 03A</span>     <span class="token keyword">union</span>                                  <span class="token comment">// 03C</span>     <span class="token punctuation">{</span>          LIST_ENTRY HashLinks<span class="token punctuation">;</span>             <span class="token comment">// 03C</span>          <span class="token keyword">struct</span>          <span class="token punctuation">{</span>               PVOID SectionPointer<span class="token punctuation">;</span>        <span class="token comment">// 03C</span>               ULONG CheckSum<span class="token punctuation">;</span>              <span class="token comment">// 040</span>          <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">union</span>     <span class="token punctuation">{</span>          ULONG TimeDateStamp<span class="token punctuation">;</span>              <span class="token comment">// 044</span>          PVOID LoadedImports<span class="token punctuation">;</span>              <span class="token comment">// 044</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>     _ACTIVATION_CONTEXT <span class="token operator">*</span> EntryPointActivationContext<span class="token punctuation">;</span> <span class="token comment">// 048</span>     PVOID PatchInformation<span class="token punctuation">;</span>                <span class="token comment">// 04C</span><span class="token punctuation">}</span> LDR_DATA_TABLE_ENTRY<span class="token punctuation">,</span> <span class="token operator">*</span>PLDR_DATA_TABLE_ENTRY<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">_PEB</span><span class="token punctuation">{</span>                                           <span class="token comment">// Size: 1D8</span>    UCHAR InheritedAddressSpace<span class="token punctuation">;</span>            <span class="token comment">// 000</span>    UCHAR ReadImageFileExecOptions<span class="token punctuation">;</span>         <span class="token comment">// 001</span>    UCHAR BeingDebugged<span class="token punctuation">;</span>                    <span class="token comment">// 002</span>    UCHAR SpareBool<span class="token punctuation">;</span>                        <span class="token comment">// 003 Allocation size</span>    HANDLE Mutant<span class="token punctuation">;</span>                          <span class="token comment">// 004</span>    HINSTANCE ImageBaseAddress<span class="token punctuation">;</span>             <span class="token comment">// 008</span>    <span class="token keyword">struct</span> <span class="token class-name">_PER_LDR_DATA</span> <span class="token operator">*</span>Ldr<span class="token punctuation">;</span>              <span class="token comment">// 00C</span>    strcut _RTL_USER_PPROCESS_PARAMETERS <span class="token operator">*</span>ProcessParameters<span class="token punctuation">;</span> <span class="token comment">// 010</span>    ULONG SubSystemData<span class="token punctuation">;</span>                    <span class="token comment">// 014</span>    HANDLE DefaultHeap<span class="token punctuation">;</span>                     <span class="token comment">// 018</span>    KSPIN_LOCK FastPebLock<span class="token punctuation">;</span>                 <span class="token comment">// 01C</span>    ULONG FastPebLockRoutine<span class="token punctuation">;</span>               <span class="token comment">// 020</span>    ULONG FastPebUnlockRoutine<span class="token punctuation">;</span>             <span class="token comment">// 024</span>    ULONG EnvironmentUpdateCount<span class="token punctuation">;</span>           <span class="token comment">// 028</span>    ULONG KernelCallbackTable<span class="token punctuation">;</span>              <span class="token comment">// 02C</span>    LARGE_INTEGER SystemReserved<span class="token punctuation">;</span>           <span class="token comment">// 030</span>    <span class="token keyword">struct</span> <span class="token class-name">_PER_FREE_BLOCK</span> <span class="token operator">*</span>FreeList<span class="token punctuation">;</span>       <span class="token comment">// 038</span>    ULONG TlsExpansionCounter<span class="token punctuation">;</span>              <span class="token comment">// 03C</span>    ULONG TlsBitmap<span class="token punctuation">;</span>                        <span class="token comment">// 040</span>    LARGE_INTEGER TlsBitmapBits<span class="token punctuation">;</span>            <span class="token comment">// 044</span>    ULONG ReadOnlySharedMemoryBase<span class="token punctuation">;</span>         <span class="token comment">// 04C</span>    ULONG ReadOnlySharedMemoryHeap<span class="token punctuation">;</span>         <span class="token comment">// 050</span>    ULONG ReadOnlyStaticServerData<span class="token punctuation">;</span>         <span class="token comment">// 054</span>    ULONG AnsiCodePageData<span class="token punctuation">;</span>                 <span class="token comment">// 058</span>    ULONG OemCodePageData<span class="token punctuation">;</span>                  <span class="token comment">// 05C</span>    ULONG UnicodeCaseTableData<span class="token punctuation">;</span>             <span class="token comment">// 060</span>    ULONG NumberOfProcessors<span class="token punctuation">;</span>               <span class="token comment">// 064</span>    LARGE_INTEGER NtGlobalFlag<span class="token punctuation">;</span>             <span class="token comment">// 068 Address of a local copy</span>    LARGE_INTEGER CriticalSectionTimeout<span class="token punctuation">;</span>   <span class="token comment">// 070</span>    ULONG HeapSegmentReserve<span class="token punctuation">;</span>               <span class="token comment">// 078</span>    ULONG HeapSegmentCommit<span class="token punctuation">;</span>                <span class="token comment">// 07C</span>    ULONG HeapDeCommitTotalFreeThreshold<span class="token punctuation">;</span>   <span class="token comment">// 080</span>    ULONG HeapDeCommitFreeBlockThreshold<span class="token punctuation">;</span>   <span class="token comment">// 084</span>    ULONG NumberOfHeaps<span class="token punctuation">;</span>                    <span class="token comment">// 088</span>    ULONG MaximumNumberOfHeaps<span class="token punctuation">;</span>             <span class="token comment">// 08C</span>    ULONG ProcessHeaps<span class="token punctuation">;</span>                     <span class="token comment">// 090</span>    ULONG GdiSharedHandleTable<span class="token punctuation">;</span>             <span class="token comment">// 094</span>    ULONG ProcessStarterHelper<span class="token punctuation">;</span>             <span class="token comment">// 098</span>    ULONG GdiDCAttributeList<span class="token punctuation">;</span>               <span class="token comment">// 09C</span>    KSPIN_LOCK LoaderLock<span class="token punctuation">;</span>                  <span class="token comment">// 0A0</span>    ULONG OSMajorVersion<span class="token punctuation">;</span>                   <span class="token comment">// 0A4</span>    ULONG OSMinorVersion<span class="token punctuation">;</span>                   <span class="token comment">// 0A8</span>    USHORT OSBuildNumber<span class="token punctuation">;</span>                   <span class="token comment">// 0AC</span>    USHORT OSCSDVersion<span class="token punctuation">;</span>                    <span class="token comment">// 0AE</span>    ULONG OSPlatformId<span class="token punctuation">;</span>                     <span class="token comment">// 0B0</span>    ULONG ImageSubsystem<span class="token punctuation">;</span>                   <span class="token comment">// 0B4</span>    ULONG ImageSubsystemMajorVersion<span class="token punctuation">;</span>       <span class="token comment">// 0B8</span>    ULONG ImageSubsystemMinorVersion<span class="token punctuation">;</span>       <span class="token comment">// 0BC</span>    ULONG ImageProcessAffinityMask<span class="token punctuation">;</span>         <span class="token comment">// 0C0</span>    ULONG GdiHandleBuffer<span class="token punctuation">[</span><span class="token number">0x22</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">// 0C4</span>    ULONG PostProcessInitRoutine<span class="token punctuation">;</span>           <span class="token comment">// 14C</span>    ULONG TlsExpansionBitmap<span class="token punctuation">;</span>               <span class="token comment">// 150</span>    UCHAR TlsExpansionBitmapBits<span class="token punctuation">[</span><span class="token number">0x80</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 154</span>    ULONG SessionId<span class="token punctuation">;</span>                        <span class="token comment">// 1D4</span><span class="token punctuation">}</span> PEB<span class="token punctuation">,</span> <span class="token operator">*</span>PPEB<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elf文件查看工具</title>
      <link href="elf-wen-jian-cha-kan-gong-ju/"/>
      <url>elf-wen-jian-cha-kan-gong-ju/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* * Copyright (c) 2013 Kiba Amor &lt;KibaAmor@gmai.com&gt; * All rights reserved. * * Redistribution and use in source and binary forms, with or without * modification, are permitted provided that the following conditions * are met: * *  * Redistributions of source code must retain the above copyright *    notice, this list ofconditions and the following disclaimer. * *  * Redistributions in binary form must reproduce the above copyright *    notice, this list of conditions and the following disclaimer in *    the documentation and/or other materialsprovided with the *    distribution. * * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE * POSSIBILITY OF SUCH DAMAGE. */</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;elf.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_countof</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">_countof</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">safe_free</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token keyword">if</span> <span class="token punctuation">(</span>X <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token punctuation">{</span> </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token function">free</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>    <span class="token expression">X <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> </span><span class="token punctuation">\</span>  <span class="token expression"><span class="token punctuation">}</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">if</span> <span class="token expression"><span class="token function">defined</span><span class="token punctuation">(</span>__x86_64__<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">ARCH </span><span class="token string">"x86_64"</span></span><span class="token keyword">typedef</span> Elf64_Ehdr Elf_Ehdr<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf64_Phdr Elf_Phdr<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf64_Shdr Elf_Shdr<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf64_Sym  Elf_Sym<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_ST_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF64_ST_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_ST_BIND</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF64_ST_BIND</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_ST_VISIBILITY</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF64_ST_VISIBILITY</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> Elf64_Rel  Elf_Rel<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf64_Rela Elf_Rela<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_R_SYM</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>  <span class="token function">ELF64_R_SYM</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_R_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF64_R_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">else</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">ARCH </span><span class="token string">"x86"</span></span><span class="token keyword">typedef</span> Elf32_Ehdr Elf_Ehdr<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf32_Phdr Elf_Phdr<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf32_Shdr Elf_Shdr<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf32_Sym  Elf_Sym<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_ST_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF32_ST_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_ST_BIND</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF32_ST_BIND</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_ST_VISIBILITY</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF32_ST_VISIBILITY</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token keyword">typedef</span> Elf32_Rel  Elf_Rel<span class="token punctuation">;</span><span class="token keyword">typedef</span> Elf32_Rela Elf_Rela<span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_R_SYM</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span>  <span class="token function">ELF32_R_SYM</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">ELF_R_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token function">ELF32_R_TYPE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// __x86_64__</span></span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>  <span class="token keyword">int</span>         key<span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> value<span class="token punctuation">;</span><span class="token punctuation">}</span> pair_t<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> g_selfname <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> g_filename <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span>         g_file <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>Elf_Ehdr<span class="token operator">*</span>   g_ehdr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>Elf_Phdr<span class="token operator">*</span>   g_phdrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span>         g_phdr_num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>Elf_Shdr<span class="token operator">*</span>   g_shdrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">int</span>         g_shdr_num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token operator">*</span>       g_shdr_str_tab <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clean_up</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>g_file <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">close</span><span class="token punctuation">(</span>g_file<span class="token punctuation">)</span><span class="token punctuation">;</span>    g_file <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">safe_free</span><span class="token punctuation">(</span>g_ehdr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">safe_free</span><span class="token punctuation">(</span>g_phdrs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">safe_free</span><span class="token punctuation">(</span>g_shdrs<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">safe_free</span><span class="token punctuation">(</span>g_shdr_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get_file</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>g_file <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    g_file <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>g_filename<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>g_file <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open input file failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> g_file<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">read_at</span><span class="token punctuation">(</span><span class="token keyword">int</span> file<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">==</span> <span class="token function">lseek</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token function">read</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span> <span class="token operator">==</span> cnt <span class="token operator">?</span> cnt <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">is_elf_file</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> ident<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ident      <span class="token operator">||</span> ident<span class="token punctuation">[</span>EI_MAG0<span class="token punctuation">]</span> <span class="token operator">!=</span> ELFMAG0      <span class="token operator">||</span> ident<span class="token punctuation">[</span>EI_MAG1<span class="token punctuation">]</span> <span class="token operator">!=</span> ELFMAG1      <span class="token operator">||</span> ident<span class="token punctuation">[</span>EI_MAG2<span class="token punctuation">]</span> <span class="token operator">!=</span> ELFMAG2      <span class="token operator">||</span> ident<span class="token punctuation">[</span>EI_MAG3<span class="token punctuation">]</span> <span class="token operator">!=</span> ELFMAG3<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Elf_Ehdr<span class="token operator">*</span> <span class="token function">get_ehdr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>g_ehdr <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    g_ehdr <span class="token operator">=</span> <span class="token punctuation">(</span>Elf_Ehdr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Ehdr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_at</span><span class="token punctuation">(</span><span class="token function">get_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> g_ehdr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Ehdr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read elf header failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_elf_file</span><span class="token punctuation">(</span>g_ehdr<span class="token operator">-&gt;</span>e_ident<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"'%s' is not a elf file\n"</span><span class="token punctuation">,</span> g_filename<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Ehdr<span class="token punctuation">)</span> <span class="token operator">!=</span> g_ehdr<span class="token operator">-&gt;</span>e_ehsize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"elf header size mismatch\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> g_ehdr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Elf_Phdr<span class="token operator">*</span> <span class="token function">get_phdrs</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> Elf_Ehdr<span class="token operator">*</span> ehdr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>g_phdrs <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ehdr <span class="token operator">=</span> <span class="token function">get_ehdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Phdr<span class="token punctuation">)</span> <span class="token operator">!=</span> ehdr<span class="token operator">-&gt;</span>e_phentsize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"program header size mismatch\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    g_phdr_num <span class="token operator">=</span> ehdr<span class="token operator">-&gt;</span>e_phnum<span class="token punctuation">;</span>    g_phdrs <span class="token operator">=</span> <span class="token punctuation">(</span>Elf_Phdr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Phdr<span class="token punctuation">)</span> <span class="token operator">*</span> g_phdr_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_at</span><span class="token punctuation">(</span><span class="token function">get_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_phoff<span class="token punctuation">,</span> g_phdrs<span class="token punctuation">,</span>        <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Phdr<span class="token punctuation">)</span> <span class="token operator">*</span> g_phdr_num<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read program header failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> g_phdrs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> Elf_Ehdr<span class="token operator">*</span> ehdr <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>g_shdrs <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    ehdr <span class="token operator">=</span> <span class="token function">get_ehdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Shdr<span class="token punctuation">)</span> <span class="token operator">!=</span> ehdr<span class="token operator">-&gt;</span>e_shentsize<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"section header size mismatch\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    g_shdr_num <span class="token operator">=</span> ehdr<span class="token operator">-&gt;</span>e_shnum<span class="token punctuation">;</span>    g_shdrs <span class="token operator">=</span> <span class="token punctuation">(</span>Elf_Shdr <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Shdr<span class="token punctuation">)</span> <span class="token operator">*</span> g_shdr_num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_at</span><span class="token punctuation">(</span><span class="token function">get_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_shoff<span class="token punctuation">,</span> g_shdrs<span class="token punctuation">,</span>          <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Shdr<span class="token punctuation">)</span> <span class="token operator">*</span> g_shdr_num<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read section header failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> g_shdrs<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span><span class="token keyword">int</span> sect_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> shdrs <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">void</span><span class="token operator">*</span> sect_cont <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sect_idx <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> sect_idx <span class="token operator">&gt;=</span> g_shdr_num<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  shdrs <span class="token operator">=</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  sect_cont <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>sect_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">read_at</span><span class="token punctuation">(</span><span class="token function">get_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>sect_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_offset<span class="token punctuation">,</span>    sect_cont<span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>sect_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">safe_free</span><span class="token punctuation">(</span>sect_cont<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> sect_cont<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">get_shdr_str_tab</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>g_shdr_str_tab <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    g_shdr_str_tab <span class="token operator">=</span> <span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span><span class="token function">get_ehdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span>e_shstrndx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> g_shdr_str_tab<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">get_sect_idx_by_name</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> sect_name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> shdrs <span class="token operator">=</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> shdr_str_tab <span class="token operator">=</span> <span class="token function">get_shdr_str_tab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g_shdr_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>sect_name<span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_name <span class="token operator">+</span> shdr_str_tab<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_pair</span><span class="token punctuation">(</span><span class="token keyword">int</span> key<span class="token punctuation">,</span> <span class="token keyword">const</span> pair_t<span class="token operator">*</span> pairs<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">,</span> <span class="token keyword">int</span> linefeed<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>cnt <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> pairs<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>key<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> pairs<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>linefeed<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_ehdr_ident</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> pair_t classpairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>ELFCLASSNONE<span class="token punctuation">,</span>  <span class="token string">"None"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFCLASS32<span class="token punctuation">,</span>    <span class="token string">"ELF32"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFCLASS64<span class="token punctuation">,</span>    <span class="token string">"ELF64"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pair_t datapairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>ELFDATANONE<span class="token punctuation">,</span> <span class="token string">"None"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFDATA2LSB<span class="token punctuation">,</span> <span class="token string">"2's complement, little endian"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFDATA2MSB<span class="token punctuation">,</span> <span class="token string">"2's complement, big endian"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pair_t osabipairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token comment">//{ELFOSABI_NONE,     "UNIX System VB ABI"},</span>    <span class="token punctuation">{</span>ELFOSABI_SYSV<span class="token punctuation">,</span>       <span class="token string">"UNIX System VB ABI"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_HPUX<span class="token punctuation">,</span>       <span class="token string">"HP-UX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_NETBSD<span class="token punctuation">,</span>     <span class="token string">"NetBSD"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment">//{ELFOSABI_GNU,      "Object uses GNU ELF extensions"},</span>    <span class="token punctuation">{</span>ELFOSABI_LINUX<span class="token punctuation">,</span>      <span class="token string">"Object uses GNU ELF extensions"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_SOLARIS<span class="token punctuation">,</span>    <span class="token string">"Sun Solaris"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_AIX<span class="token punctuation">,</span>        <span class="token string">"AIX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_IRIX<span class="token punctuation">,</span>       <span class="token string">"IBM Irix"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_FREEBSD<span class="token punctuation">,</span>    <span class="token string">"FreeBSD"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_TRU64<span class="token punctuation">,</span>      <span class="token string">"Compaq TRU64 UNIX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_MODESTO<span class="token punctuation">,</span>    <span class="token string">"Novell Modesto"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_OPENBSD<span class="token punctuation">,</span>    <span class="token string">"OpenBSD"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_ARM_AEABI<span class="token punctuation">,</span>  <span class="token string">"ARM EABI"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_ARM<span class="token punctuation">,</span>        <span class="token string">"ARM"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ELFOSABI_STANDALONE<span class="token punctuation">,</span> <span class="token string">"Standlone (embedded) application"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> Elf_Ehdr<span class="token operator">*</span> ehdr <span class="token operator">=</span> <span class="token function">get_ehdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> ident <span class="token operator">=</span> ehdr<span class="token operator">-&gt;</span>e_ident<span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ELF Header:\n  Magic:  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> EI_NIDENT<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02X "</span><span class="token punctuation">,</span> ident<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n  Class:                              "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_pair</span><span class="token punctuation">(</span>ident<span class="token punctuation">[</span>EI_CLASS<span class="token punctuation">]</span><span class="token punctuation">,</span> classpairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>classpairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Data:                               "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_pair</span><span class="token punctuation">(</span>ident<span class="token punctuation">[</span>EI_DATA<span class="token punctuation">]</span><span class="token punctuation">,</span> datapairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>datapairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Version:                            %d%s\n"</span><span class="token punctuation">,</span> ident<span class="token punctuation">[</span>EI_VERSION<span class="token punctuation">]</span><span class="token punctuation">,</span>      ident<span class="token punctuation">[</span>EI_VERSION<span class="token punctuation">]</span> <span class="token operator">==</span> EV_CURRENT <span class="token operator">?</span> <span class="token string">"(current)"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  OS/ABI:                             "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_pair</span><span class="token punctuation">(</span>ident<span class="token punctuation">[</span>EI_OSABI<span class="token punctuation">]</span><span class="token punctuation">,</span> osabipairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>osabipairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_ehdr</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> pair_t objtypepairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>ET_NONE<span class="token punctuation">,</span> <span class="token string">"None"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ET_REL<span class="token punctuation">,</span>  <span class="token string">"Relocatable file"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ET_EXEC<span class="token punctuation">,</span> <span class="token string">"Executable file"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ET_DYN<span class="token punctuation">,</span>  <span class="token string">"Shared object file"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>ET_CORE<span class="token punctuation">,</span> <span class="token string">"Core file"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pair_t machinepairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>EM_NONE<span class="token punctuation">,</span>       <span class="token string">"None"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_M32<span class="token punctuation">,</span>        <span class="token string">"AT&amp;T WE 32100"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_SPARC<span class="token punctuation">,</span>      <span class="token string">"SUN SPARC"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_386<span class="token punctuation">,</span>        <span class="token string">"Intel 80386"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_68K<span class="token punctuation">,</span>        <span class="token string">"Motorola m68k family"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_88K<span class="token punctuation">,</span>        <span class="token string">"Motorola m88k family"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_860<span class="token punctuation">,</span>        <span class="token string">"Intel 80860"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_MIPS<span class="token punctuation">,</span>       <span class="token string">"MIPS R3000 big-endian"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_S370<span class="token punctuation">,</span>       <span class="token string">"IBM System/370"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_MIPS_RS3_LE<span class="token punctuation">,</span><span class="token string">"MIPS R3000 little-endian"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_PARISC<span class="token punctuation">,</span>     <span class="token string">"HPPA"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_VPP500<span class="token punctuation">,</span>     <span class="token string">"Fujitsu VPP500"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_SPARC32PLUS<span class="token punctuation">,</span><span class="token string">"Sun's \"v8plus\""</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_960<span class="token punctuation">,</span>        <span class="token string">"Intel 80960"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_PPC<span class="token punctuation">,</span>        <span class="token string">"PowerPC"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_PPC64<span class="token punctuation">,</span>      <span class="token string">"PowerPC 64-bit"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_S390<span class="token punctuation">,</span>       <span class="token string">"IBM S390"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_V800<span class="token punctuation">,</span>       <span class="token string">"NEC V800 series"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_FR20<span class="token punctuation">,</span>       <span class="token string">"Fujitsu FR20"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_RH32<span class="token punctuation">,</span>       <span class="token string">"TRW RH-32"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_RCE<span class="token punctuation">,</span>        <span class="token string">"Motorola RCE"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ARM<span class="token punctuation">,</span>        <span class="token string">"ARM"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_FAKE_ALPHA<span class="token punctuation">,</span> <span class="token string">"Digital Alpha"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_SH<span class="token punctuation">,</span>         <span class="token string">"Hitachi SH"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_SPARCV9<span class="token punctuation">,</span>    <span class="token string">"SPARC v9 64-bit"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_TRICORE<span class="token punctuation">,</span>    <span class="token string">"Siemens Tricore"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ARC<span class="token punctuation">,</span>        <span class="token string">"Argonaut RISC Core"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_H8_300<span class="token punctuation">,</span>     <span class="token string">"Hitachi H8/300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_H8_300H<span class="token punctuation">,</span>    <span class="token string">"Hitachi H8/300H"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_H8S<span class="token punctuation">,</span>        <span class="token string">"Hitachi H8S"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_H8_500<span class="token punctuation">,</span>     <span class="token string">"Hitachi H8/500"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_IA_64<span class="token punctuation">,</span>      <span class="token string">"Intel Merced"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_MIPS_X<span class="token punctuation">,</span>     <span class="token string">"Stanford MIPS-X"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_COLDFIRE<span class="token punctuation">,</span>   <span class="token string">"Motorola Coldfire"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_68HC12<span class="token punctuation">,</span>     <span class="token string">"Motorola M68HC12"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_MMA<span class="token punctuation">,</span>        <span class="token string">"Fujitsu MMA Multimedia Accelerator"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_PCP<span class="token punctuation">,</span>        <span class="token string">"Siemens PCP"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_NCPU<span class="token punctuation">,</span>       <span class="token string">"Sony nCPU embeeded RISC"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_NDR1<span class="token punctuation">,</span>       <span class="token string">"Denso NDR1 microprocessor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_STARCORE<span class="token punctuation">,</span>   <span class="token string">"Motorola Start*Core processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ME16<span class="token punctuation">,</span>       <span class="token string">"Toyota ME16 processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ST100<span class="token punctuation">,</span>      <span class="token string">"STMicroelectronic ST100 processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_TINYJ<span class="token punctuation">,</span>      <span class="token string">"Advanced Logic Corp. Tinyj emb.fam"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_X86_64<span class="token punctuation">,</span>     <span class="token string">"AMD x86-64 architecture"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_PDSP<span class="token punctuation">,</span>       <span class="token string">"Sony DSP Processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_FX66<span class="token punctuation">,</span>       <span class="token string">"Siemens FX66 microcontroller"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ST9PLUS<span class="token punctuation">,</span>    <span class="token string">"STMicroelectronics ST9+ 8/16 mc"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ST7<span class="token punctuation">,</span>        <span class="token string">"STmicroelectronics ST7 8 bit mc"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_68HC16<span class="token punctuation">,</span>     <span class="token string">"Motorola MC68HC16 microcontroller"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_68HC11<span class="token punctuation">,</span>     <span class="token string">"Motorola MC68HC11 microcontroller"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_68HC08<span class="token punctuation">,</span>     <span class="token string">"Motorola MC68HC08 microcontroller"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_68HC05<span class="token punctuation">,</span>     <span class="token string">"Motorola MC68HC05 microcontroller"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_SVX<span class="token punctuation">,</span>        <span class="token string">"Silicon Graphics SVx"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ST19<span class="token punctuation">,</span>       <span class="token string">"STMicroelectronics ST19 8 bit mc"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_VAX<span class="token punctuation">,</span>        <span class="token string">"Digital VAX"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_CRIS<span class="token punctuation">,</span>       <span class="token string">"Axis Communications 32-bit embedded processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_JAVELIN<span class="token punctuation">,</span>    <span class="token string">"Infineon Technologies 32-bit embedded processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_FIREPATH<span class="token punctuation">,</span>   <span class="token string">"Element 14 64-bit DSP Processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ZSP<span class="token punctuation">,</span>        <span class="token string">"LSI Logic 16-bit DSP Processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_MMIX<span class="token punctuation">,</span>       <span class="token string">"Donald Knuth's educational 64-bit processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_HUANY<span class="token punctuation">,</span>      <span class="token string">"Harvard University machine-independent object files"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_PRISM<span class="token punctuation">,</span>      <span class="token string">"SiTera Prism"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_AVR<span class="token punctuation">,</span>        <span class="token string">"Atmel AVR 8-bit microcontroller"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_FR30<span class="token punctuation">,</span>       <span class="token string">"Fujitsu FR30"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_D10V<span class="token punctuation">,</span>       <span class="token string">"Mitsubishi D10V"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_D30V<span class="token punctuation">,</span>       <span class="token string">"Mitsubishi D30V"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_V850<span class="token punctuation">,</span>       <span class="token string">"NEC v850"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_M32R<span class="token punctuation">,</span>       <span class="token string">"Mitsubishi M32R"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_MN10300<span class="token punctuation">,</span>    <span class="token string">"Matsushita MN10300"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_MN10200<span class="token punctuation">,</span>    <span class="token string">"Matsushita MN10200"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_PJ<span class="token punctuation">,</span>         <span class="token string">"picoJava"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_OPENRISC<span class="token punctuation">,</span>   <span class="token string">"OpenRISC 32-bit embedded processor"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_ARC_A5<span class="token punctuation">,</span>     <span class="token string">"ARC Cores Tangent-A5"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EM_XTENSA<span class="token punctuation">,</span>     <span class="token string">"Tensilica Xtensa Architecture"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pair_t versionpairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>EV_NONE<span class="token punctuation">,</span>     <span class="token string">"None"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>EV_CURRENT<span class="token punctuation">,</span>  <span class="token string">"Current version"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> Elf_Ehdr<span class="token operator">*</span> ehdr <span class="token operator">=</span> <span class="token function">get_ehdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_ehdr_ident</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Object file type:                   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_pair</span><span class="token punctuation">(</span>ehdr<span class="token operator">-&gt;</span>e_type<span class="token punctuation">,</span> objtypepairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>objtypepairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Machine:                            "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_pair</span><span class="token punctuation">(</span>ehdr<span class="token operator">-&gt;</span>e_machine<span class="token punctuation">,</span> machinepairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>machinepairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Version:                            "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">print_pair</span><span class="token punctuation">(</span>ehdr<span class="token operator">-&gt;</span>e_version<span class="token punctuation">,</span> versionpairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>versionpairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Entry point address:                0x%08x\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_entry<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Start of program headers:           0x%08x (bytes into file)\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_phoff<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Start of section headers:           0x%08x (bytes into file)\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_shoff<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Flags:                              0x%08x\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_flags<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Size of this header:                %d (bytes)\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_ehsize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Size of program headers:            %d (bytes)\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_phentsize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Number of program headers:          %d\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_phnum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Size of section headers:            %d (bytes)\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_shentsize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Number of section headers:          %d\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_shnum<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Section header string table index:  %d\n\n"</span><span class="token punctuation">,</span> ehdr<span class="token operator">-&gt;</span>e_shstrndx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_phdrs</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> pair_t typepairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>PT_NULL<span class="token punctuation">,</span>         <span class="token string">"NULL        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_LOAD<span class="token punctuation">,</span>         <span class="token string">"LOAD        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_DYNAMIC<span class="token punctuation">,</span>      <span class="token string">"DYNAMIC     "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_INTERP<span class="token punctuation">,</span>       <span class="token string">"INTERP      "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_NOTE<span class="token punctuation">,</span>         <span class="token string">"NOTE        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_SHLIB<span class="token punctuation">,</span>        <span class="token string">"SHLIB       "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_PHDR<span class="token punctuation">,</span>         <span class="token string">"PHDR        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_TLS<span class="token punctuation">,</span>          <span class="token string">"TLS         "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_GNU_EH_FRAME<span class="token punctuation">,</span> <span class="token string">"GNU_EH_FRAME"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_GNU_STACK<span class="token punctuation">,</span>    <span class="token string">"GUN_STACK   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>PT_GNU_RELRO<span class="token punctuation">,</span>    <span class="token string">"GNU_RELRO   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> Elf_Phdr<span class="token operator">*</span> phdrs <span class="token operator">=</span> <span class="token function">get_phdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">char</span> tmp_buf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Program Headers:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Type         Offset     VirtAddr   PhysAddr   FileSize   MemSize    Flag Align\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g_phdr_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_pair</span><span class="token punctuation">(</span>phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_type<span class="token punctuation">,</span> typepairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>typepairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_vaddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_paddr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_filesz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_memsz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>tmp_buf<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">"%s%s%s"</span><span class="token punctuation">,</span>        phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_flags <span class="token operator">&amp;</span> PF_X <span class="token operator">?</span> <span class="token string">"X"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_flags <span class="token operator">&amp;</span> PF_W <span class="token operator">?</span> <span class="token string">"W"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_flags <span class="token operator">&amp;</span> PF_R <span class="token operator">?</span> <span class="token string">"R"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %-4s"</span><span class="token punctuation">,</span> tmp_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%04x\n"</span><span class="token punctuation">,</span> phdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>p_align<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_shdrs</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> pair_t typepairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>SHT_NULL<span class="token punctuation">,</span>            <span class="token string">"NULL          "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_PROGBITS<span class="token punctuation">,</span>        <span class="token string">"PROGBITS      "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_SYMTAB<span class="token punctuation">,</span>          <span class="token string">"SYMTAB        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_STRTAB<span class="token punctuation">,</span>          <span class="token string">"STRTAB        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_RELA<span class="token punctuation">,</span>            <span class="token string">"RELA          "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_HASH<span class="token punctuation">,</span>            <span class="token string">"HASH          "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_DYNAMIC<span class="token punctuation">,</span>         <span class="token string">"DYNAMIC       "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_NOTE<span class="token punctuation">,</span>            <span class="token string">"NOTE          "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_NOBITS<span class="token punctuation">,</span>          <span class="token string">"NOBITS        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_REL<span class="token punctuation">,</span>             <span class="token string">"REL           "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_SHLIB<span class="token punctuation">,</span>           <span class="token string">"SHLIB         "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_DYNSYM<span class="token punctuation">,</span>          <span class="token string">"DYNSYM        "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_INIT_ARRAY<span class="token punctuation">,</span>      <span class="token string">"INIT_ARRAY    "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_FINI_ARRAY<span class="token punctuation">,</span>      <span class="token string">"FINI_ARRAY    "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_PREINIT_ARRAY<span class="token punctuation">,</span>   <span class="token string">"PREINIT_ARRAY "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_GROUP<span class="token punctuation">,</span>           <span class="token string">"GROUP         "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_SYMTAB_SHNDX<span class="token punctuation">,</span>    <span class="token string">"SYMTAB_SHNDX  "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_GNU_ATTRIBUTES<span class="token punctuation">,</span>  <span class="token string">"GNU_ATTRIBUTES"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_GNU_HASH<span class="token punctuation">,</span>        <span class="token string">"GNU_HASH      "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_GNU_LIBLIST<span class="token punctuation">,</span>     <span class="token string">"GNU_LIBLIST   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_GNU_verdef<span class="token punctuation">,</span>      <span class="token string">"GNU_verdef    "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_GNU_verneed<span class="token punctuation">,</span>     <span class="token string">"GNU_verneed   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>SHT_GNU_versym<span class="token punctuation">,</span>      <span class="token string">"GNU_versym    "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> shdrs <span class="token operator">=</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> shdr_str_tab <span class="token operator">=</span> <span class="token function">get_shdr_str_tab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">char</span> tmp_buf<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Section Headers:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Idx Name               Type           Flags VirtAddr   Offset     Size       Link Info Align  EntrySize\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g_shdr_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %- 3d "</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %-18s "</span><span class="token punctuation">,</span> shdr_str_tab <span class="token operator">+</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_pair</span><span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_type<span class="token punctuation">,</span> typepairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>typepairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">snprintf</span><span class="token punctuation">(</span>tmp_buf<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">" %s%s%s%s%s%s%s%s%s%s"</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_WRITE             <span class="token operator">?</span> <span class="token string">"W"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_ALLOC             <span class="token operator">?</span> <span class="token string">"A"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_EXECINSTR         <span class="token operator">?</span> <span class="token string">"E"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_MERGE             <span class="token operator">?</span> <span class="token string">"M"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_STRINGS           <span class="token operator">?</span> <span class="token string">"S"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_INFO_LINK         <span class="token operator">?</span> <span class="token string">"I"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_LINK_ORDER        <span class="token operator">?</span> <span class="token string">"L"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_OS_NONCONFORMING  <span class="token operator">?</span> <span class="token string">"O"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_GROUP             <span class="token operator">?</span> <span class="token string">"G"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_flags <span class="token operator">&amp;</span> SHF_TLS               <span class="token operator">?</span> <span class="token string">"T"</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-5s "</span><span class="token punctuation">,</span> tmp_buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_addr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%- 4d "</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_link<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%- 4d "</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%04x"</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_addralign<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x\n"</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_entsize<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Key to Flags:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  W (Writable), A (Alloc), E(Executable), M (Merge), S (Strings),\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  I (Info), L (Link Order), O (Os Nonconforming), G (Group), T (TLS)\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_symbol_info_by_sect_idx</span><span class="token punctuation">(</span><span class="token keyword">int</span> sect_idx<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> pair_t typepairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>STT_NOTYPE<span class="token punctuation">,</span>    <span class="token string">"NOTYPE   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STT_OBJECT<span class="token punctuation">,</span>    <span class="token string">"OBJECT   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STT_FUNC<span class="token punctuation">,</span>      <span class="token string">"FUNC     "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STT_SECTION<span class="token punctuation">,</span>   <span class="token string">"SECTION  "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STT_FILE<span class="token punctuation">,</span>      <span class="token string">"FILE     "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STT_COMMON<span class="token punctuation">,</span>    <span class="token string">"COMMON   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STT_TLS<span class="token punctuation">,</span>       <span class="token string">"TLS      "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STT_GNU_IFUNC<span class="token punctuation">,</span> <span class="token string">"GUN_IFUNC"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pair_t bindpairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>STB_LOCAL<span class="token punctuation">,</span>       <span class="token string">"LOCAL     "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STB_GLOBAL<span class="token punctuation">,</span>      <span class="token string">"GLOBAL    "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STB_WEAK<span class="token punctuation">,</span>        <span class="token string">"WEAK      "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STB_GNU_UNIQUE<span class="token punctuation">,</span>  <span class="token string">"GUN_UNIQUE"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> pair_t visiblepairs<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">{</span>    <span class="token punctuation">{</span>STV_DEFAULT<span class="token punctuation">,</span>   <span class="token string">"DEFAULT   "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STV_INTERNAL<span class="token punctuation">,</span>  <span class="token string">"INTERNAL  "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STV_HIDDEN<span class="token punctuation">,</span>    <span class="token string">"HIDDEN    "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>STV_PROTECTED<span class="token punctuation">,</span> <span class="token string">"PROTECTED "</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> shdrs <span class="token operator">=</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> shdr_str_tab <span class="token operator">=</span> <span class="token function">get_shdr_str_tab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Elf_Sym<span class="token operator">*</span> symbol <span class="token operator">=</span> <span class="token punctuation">(</span>Elf_Sym <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span>sect_idx<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> symbol_num <span class="token operator">=</span> shdrs<span class="token punctuation">[</span>sect_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Sym<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> symbol_str_tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>sect_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_link<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>symbol <span class="token operator">==</span> <span class="token constant">NULL</span>    <span class="token operator">||</span> symbol_str_tab <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">safe_free</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">safe_free</span><span class="token punctuation">(</span>symbol_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Symbol Info For '%s':\n"</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>sect_idx<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_name <span class="token operator">+</span> shdr_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Idx Value      Size   Type      Bind       Visibility Shndx  Name\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> symbol_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  %3d"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%04x "</span><span class="token punctuation">,</span> symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_pair</span><span class="token punctuation">(</span><span class="token function">ELF_ST_TYPE</span><span class="token punctuation">(</span>symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_info<span class="token punctuation">)</span><span class="token punctuation">,</span> typepairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>typepairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_pair</span><span class="token punctuation">(</span><span class="token function">ELF_ST_BIND</span><span class="token punctuation">(</span>symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_info<span class="token punctuation">)</span><span class="token punctuation">,</span> bindpairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>bindpairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">print_pair</span><span class="token punctuation">(</span><span class="token function">ELF_ST_VISIBILITY</span><span class="token punctuation">(</span>symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_other<span class="token punctuation">)</span><span class="token punctuation">,</span> visiblepairs<span class="token punctuation">,</span> <span class="token function">_countof</span><span class="token punctuation">(</span>visiblepairs<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_shndx<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">case</span> SHN_UNDEF<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"UNDEF "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> SHN_ABS<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ABS   "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">case</span> SHN_COMMON<span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"COMMON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%-6d"</span><span class="token punctuation">,</span> symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_shndx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %s\n"</span><span class="token punctuation">,</span> symbol<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>st_name <span class="token operator">+</span> symbol_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">safe_free</span><span class="token punctuation">(</span>symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">safe_free</span><span class="token punctuation">(</span>symbol_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_symbol_info</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> shdrs <span class="token operator">=</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Symbol Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g_shdr_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_type <span class="token operator">==</span> SHT_SYMTAB      <span class="token operator">||</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_type <span class="token operator">==</span> SHT_DYNSYM<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">print_symbol_info_by_sect_idx</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_relocation_info</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> shdrs <span class="token operator">=</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> shdr_str_tab <span class="token operator">=</span> <span class="token function">get_shdr_str_tab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Elf_Rel<span class="token operator">*</span> rel <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> rel_num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  Elf_Sym<span class="token operator">*</span> sym <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> sym_str_tab <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Relocation Info:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g_shdr_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_type <span class="token operator">==</span> SHT_REL<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Relocation Info Without Addends For '%s':\n"</span><span class="token punctuation">,</span>          shdrs<span class="token punctuation">[</span>shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_info<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_name <span class="token operator">+</span> shdr_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>      rel_num <span class="token operator">=</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size <span class="token operator">/</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Elf_Rel<span class="token punctuation">)</span><span class="token punctuation">;</span>      rel <span class="token operator">=</span> <span class="token punctuation">(</span>Elf_Rel <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      sym <span class="token operator">=</span> <span class="token punctuation">(</span>Elf_Sym <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_link<span class="token punctuation">)</span><span class="token punctuation">;</span>      sym_str_tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_link<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_link<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  OFFSET     TYPE       VALUE\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> rel_num<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  0x%08x"</span><span class="token punctuation">,</span> rel<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>r_offset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" 0x%08x"</span><span class="token punctuation">,</span> <span class="token function">ELF_R_TYPE</span><span class="token punctuation">(</span>rel<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>r_info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %s\n"</span><span class="token punctuation">,</span> sym<span class="token punctuation">[</span><span class="token function">ELF_R_SYM</span><span class="token punctuation">(</span>rel<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>r_info<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>st_name <span class="token operator">+</span> sym_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">safe_free</span><span class="token punctuation">(</span>rel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">safe_free</span><span class="token punctuation">(</span>sym<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">safe_free</span><span class="token punctuation">(</span>sym_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_all_str_tab</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">const</span> Elf_Shdr<span class="token operator">*</span> shdrs <span class="token operator">=</span> <span class="token function">get_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> shdr_str_tab <span class="token operator">=</span> <span class="token function">get_shdr_str_tab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> str_tab <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> str_tab_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"All String Table:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> g_shdr_num<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_type <span class="token operator">==</span> SHT_STRTAB<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"String Table '%s':\n"</span><span class="token punctuation">,</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_name <span class="token operator">+</span> shdr_str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  Idx Value\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      str_tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">get_sect_cont_by_idx</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> str_tab_pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str_tab_pos <span class="token operator">&lt;</span> shdrs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>sh_size<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"  %3d %s\n"</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> str_tab <span class="token operator">+</span> str_tab_pos<span class="token punctuation">)</span><span class="token punctuation">;</span>        str_tab_pos <span class="token operator">+=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str_tab <span class="token operator">+</span> str_tab_pos<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token function">safe_free</span><span class="token punctuation">(</span>str_tab<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_usage</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Usage: %s file\n"</span><span class="token punctuation">,</span> g_selfname<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -a  same as -h -p -s -S -r -d\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -h  dump ELF file header\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -p  dump ELF file program header\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -s  dump ELF file section header\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -S  dump Symbol Info\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -r  dump relocation info\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -d  dump all string table\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">" -v  print version info and exit\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">print_version</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Elf(Executable Linkable Format) file dump tool("</span>ARCH<span class="token string">")\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Copyright (c) 2013 Kiba Amor &lt;KibaAmor@gmai.com&gt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"All rights reserved.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Version 1.0\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> show_ehdr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> show_phdrs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> show_shdrs <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> show_symbol_info <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> show_relocation_info <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> show_all_str_tab <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  g_selfname <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'-'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>g_filename <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"multi input file detected\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        g_filename <span class="token operator">=</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>          show_ehdr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          show_phdrs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          show_shdrs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          show_symbol_info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          show_relocation_info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          show_all_str_tab <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'h'</span><span class="token operator">:</span>          show_ehdr <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'p'</span><span class="token operator">:</span>          show_phdrs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>          show_shdrs <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>          show_symbol_info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'r'</span><span class="token operator">:</span>          show_relocation_info <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>          show_all_str_tab <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'v'</span><span class="token operator">:</span>          <span class="token function">print_version</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>          <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"unkown option: '%c'\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>g_filename <span class="token operator">==</span> <span class="token constant">NULL</span>      <span class="token operator">||</span> <span class="token punctuation">(</span>show_ehdr <span class="token operator">==</span> <span class="token number">0</span>      <span class="token operator">&amp;&amp;</span> show_phdrs <span class="token operator">==</span> <span class="token number">0</span>      <span class="token operator">&amp;&amp;</span> show_shdrs <span class="token operator">==</span> <span class="token number">0</span>      <span class="token operator">&amp;&amp;</span> show_symbol_info <span class="token operator">==</span> <span class="token number">0</span>      <span class="token operator">&amp;&amp;</span> show_relocation_info <span class="token operator">==</span> <span class="token number">0</span>      <span class="token operator">&amp;&amp;</span> show_all_str_tab <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">print_usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> EXIT_FAILURE<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">atexit</span><span class="token punctuation">(</span>clean_up<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>show_ehdr<span class="token punctuation">)</span>    <span class="token function">print_ehdr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>show_phdrs<span class="token punctuation">)</span>    <span class="token function">print_phdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>show_shdrs<span class="token punctuation">)</span>    <span class="token function">print_shdrs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>show_symbol_info<span class="token punctuation">)</span>    <span class="token function">print_symbol_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>show_relocation_info<span class="token punctuation">)</span>    <span class="token function">print_relocation_info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>show_all_str_tab<span class="token punctuation">)</span>    <span class="token function">print_all_str_tab</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> EXIT_SUCCESS<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CPP </tag>
            
            <tag> 逆向工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用socat来测试echo服务器和客户端</title>
      <link href="li-yong-socat-lai-ce-shi-echo-fu-wu-qi-he-ke-hu-duan/"/>
      <url>li-yong-socat-lai-ce-shi-echo-fu-wu-qi-he-ke-hu-duan/</url>
      
        <content type="html"><![CDATA[<h2 id="用socat开启echo服务器"><a href="#用socat开启echo服务器" class="headerlink" title="用socat开启echo服务器"></a>用socat开启echo服务器</h2><p>在本地9999端口开启一个echo服务器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">socat tcp-listen:8888 <span class="token builtin class-name">echo</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="用socat测试echo服务器"><a href="#用socat测试echo服务器" class="headerlink" title="用socat测试echo服务器"></a>用socat测试echo服务器</h2><p>把文件in.dat中内容发送到本地的8888端口，并将接收到的数据存放在out中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">socat tcp:127.0.0.1:8888 open:in.dat,rdonly<span class="token operator">!</span><span class="token operator">!</span>open:out.dat,create,wronly<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>可用于对echo服务器进行数据压力测试。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iptable的一些高级使用方法</title>
      <link href="iptable-de-yi-xie-gao-ji-shi-yong-fang-fa/"/>
      <url>iptable-de-yi-xie-gao-ji-shi-yong-fang-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="每秒只响应一次ping，超过的记录日志并丢弃"><a href="#每秒只响应一次ping，超过的记录日志并丢弃" class="headerlink" title="每秒只响应一次ping，超过的记录日志并丢弃"></a>每秒只响应一次ping，超过的记录日志并丢弃</h2><pre class="line-numbers language-base" data-language="base"><code class="language-base">iptables -A INPUT -p icmp --icmp-type echo-request -m limit --limit 1/s -j ACCEPTiptables -A INPUT -p icmp --icmp-type echo-request -j LOG --log-prefix "Denied ICMP: " --log-level 7iptables -A INPUT -p icmp --icmp-type echo-request -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="每两个echo-request就丢弃一个"><a href="#每两个echo-request就丢弃一个" class="headerlink" title="每两个echo-request就丢弃一个"></a>每两个echo-request就丢弃一个</h2><pre class="line-numbers language-base" data-language="base"><code class="language-base">iptables -A INPUT -i eth0 -p icmp --icmp-type echo-request -m statistic --mode nth --every 2 --packet 0 -j DROP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具使用 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
